# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SshUserCertificateArgs', 'SshUserCertificate']

@pulumi.input_type
class SshUserCertificateArgs:
    def __init__(__self__, *,
                 public_key: pulumi.Input[str],
                 ssh_certificate_authority_id: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 valid_after: Optional[pulumi.Input[str]] = None,
                 valid_until: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SshUserCertificate resource.
        :param pulumi.Input[str] public_key: a public key in OpenSSH Authorized Keys format that this certificate signs
        :param pulumi.Input[str] ssh_certificate_authority_id: the ssh certificate authority that is used to sign this ssh user certificate
        :param pulumi.Input[str] certificate: the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] description: human-readable description of this SSH User Certificate. optional, max 255 bytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] key_type: the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        :param pulumi.Input[str] valid_after: the time when the ssh host certificate becomes valid, in RFC 3339 format.
        :param pulumi.Input[str] valid_until: the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "ssh_certificate_authority_id", ssh_certificate_authority_id)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if critical_options is not None:
            pulumi.set(__self__, "critical_options", critical_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if principals is not None:
            pulumi.set(__self__, "principals", principals)
        if valid_after is not None:
            pulumi.set(__self__, "valid_after", valid_after)
        if valid_until is not None:
            pulumi.set(__self__, "valid_until", valid_until)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        """
        a public key in OpenSSH Authorized Keys format that this certificate signs
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="sshCertificateAuthorityId")
    def ssh_certificate_authority_id(self) -> pulumi.Input[str]:
        """
        the ssh certificate authority that is used to sign this ssh user certificate
        """
        return pulumi.get(self, "ssh_certificate_authority_id")

    @ssh_certificate_authority_id.setter
    def ssh_certificate_authority_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_certificate_authority_id", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="criticalOptions")
    def critical_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        """
        return pulumi.get(self, "critical_options")

    @critical_options.setter
    def critical_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "critical_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this SSH User Certificate. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "principals", value)

    @property
    @pulumi.getter(name="validAfter")
    def valid_after(self) -> Optional[pulumi.Input[str]]:
        """
        the time when the ssh host certificate becomes valid, in RFC 3339 format.
        """
        return pulumi.get(self, "valid_after")

    @valid_after.setter
    def valid_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid_after", value)

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> Optional[pulumi.Input[str]]:
        """
        the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        return pulumi.get(self, "valid_until")

    @valid_until.setter
    def valid_until(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid_until", value)


@pulumi.input_type
class _SshUserCertificateState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 ssh_certificate_authority_id: Optional[pulumi.Input[str]] = None,
                 valid_after: Optional[pulumi.Input[str]] = None,
                 valid_until: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SshUserCertificate resources.
        :param pulumi.Input[str] certificate: the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] description: human-readable description of this SSH User Certificate. optional, max 255 bytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] key_type: the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        :param pulumi.Input[str] public_key: a public key in OpenSSH Authorized Keys format that this certificate signs
        :param pulumi.Input[str] ssh_certificate_authority_id: the ssh certificate authority that is used to sign this ssh user certificate
        :param pulumi.Input[str] valid_after: the time when the ssh host certificate becomes valid, in RFC 3339 format.
        :param pulumi.Input[str] valid_until: the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if critical_options is not None:
            pulumi.set(__self__, "critical_options", critical_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if principals is not None:
            pulumi.set(__self__, "principals", principals)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if ssh_certificate_authority_id is not None:
            pulumi.set(__self__, "ssh_certificate_authority_id", ssh_certificate_authority_id)
        if valid_after is not None:
            pulumi.set(__self__, "valid_after", valid_after)
        if valid_until is not None:
            pulumi.set(__self__, "valid_until", valid_until)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="criticalOptions")
    def critical_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        """
        return pulumi.get(self, "critical_options")

    @critical_options.setter
    def critical_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "critical_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this SSH User Certificate. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "principals", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        a public key in OpenSSH Authorized Keys format that this certificate signs
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="sshCertificateAuthorityId")
    def ssh_certificate_authority_id(self) -> Optional[pulumi.Input[str]]:
        """
        the ssh certificate authority that is used to sign this ssh user certificate
        """
        return pulumi.get(self, "ssh_certificate_authority_id")

    @ssh_certificate_authority_id.setter
    def ssh_certificate_authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_certificate_authority_id", value)

    @property
    @pulumi.getter(name="validAfter")
    def valid_after(self) -> Optional[pulumi.Input[str]]:
        """
        the time when the ssh host certificate becomes valid, in RFC 3339 format.
        """
        return pulumi.get(self, "valid_after")

    @valid_after.setter
    def valid_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid_after", value)

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> Optional[pulumi.Input[str]]:
        """
        the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        return pulumi.get(self, "valid_until")

    @valid_until.setter
    def valid_until(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid_until", value)


class SshUserCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 ssh_certificate_authority_id: Optional[pulumi.Input[str]] = None,
                 valid_after: Optional[pulumi.Input[str]] = None,
                 valid_until: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        SSH User Certificates are presented by SSH clients when connecting to an SSH
         server to authenticate their connection. The SSH server must trust the SSH
         Certificate Authority used to sign the certificate.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.SshUserCertificate("example",
            description="temporary access to staging machine",
            principals=[
                "ec2-user",
                "root",
            ],
            public_key="ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK58lFzmWlDimDtBz78wVT4oauA8PjY0CiXTCEIsBNC6UwOJvZ0jdSaYNhDaa7dRV84DfBb/gKzqlXC7cVMZjl0= alan@work-laptop",
            ssh_certificate_authority_id="sshca_25auH5JtiUPW9eMiXYzujvcpkGW",
            valid_until="2022-05-26T08:23:47Z")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] description: human-readable description of this SSH User Certificate. optional, max 255 bytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] key_type: the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        :param pulumi.Input[str] public_key: a public key in OpenSSH Authorized Keys format that this certificate signs
        :param pulumi.Input[str] ssh_certificate_authority_id: the ssh certificate authority that is used to sign this ssh user certificate
        :param pulumi.Input[str] valid_after: the time when the ssh host certificate becomes valid, in RFC 3339 format.
        :param pulumi.Input[str] valid_until: the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SshUserCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SSH User Certificates are presented by SSH clients when connecting to an SSH
         server to authenticate their connection. The SSH server must trust the SSH
         Certificate Authority used to sign the certificate.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.SshUserCertificate("example",
            description="temporary access to staging machine",
            principals=[
                "ec2-user",
                "root",
            ],
            public_key="ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK58lFzmWlDimDtBz78wVT4oauA8PjY0CiXTCEIsBNC6UwOJvZ0jdSaYNhDaa7dRV84DfBb/gKzqlXC7cVMZjl0= alan@work-laptop",
            ssh_certificate_authority_id="sshca_25auH5JtiUPW9eMiXYzujvcpkGW",
            valid_until="2022-05-26T08:23:47Z")
        ```

        :param str resource_name: The name of the resource.
        :param SshUserCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SshUserCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 ssh_certificate_authority_id: Optional[pulumi.Input[str]] = None,
                 valid_after: Optional[pulumi.Input[str]] = None,
                 valid_until: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SshUserCertificateArgs.__new__(SshUserCertificateArgs)

            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["critical_options"] = critical_options
            __props__.__dict__["description"] = description
            __props__.__dict__["extensions"] = extensions
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["principals"] = principals
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            if ssh_certificate_authority_id is None and not opts.urn:
                raise TypeError("Missing required property 'ssh_certificate_authority_id'")
            __props__.__dict__["ssh_certificate_authority_id"] = ssh_certificate_authority_id
            __props__.__dict__["valid_after"] = valid_after
            __props__.__dict__["valid_until"] = valid_until
        super(SshUserCertificate, __self__).__init__(
            'ngrok:index/sshUserCertificate:SshUserCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            public_key: Optional[pulumi.Input[str]] = None,
            ssh_certificate_authority_id: Optional[pulumi.Input[str]] = None,
            valid_after: Optional[pulumi.Input[str]] = None,
            valid_until: Optional[pulumi.Input[str]] = None) -> 'SshUserCertificate':
        """
        Get an existing SshUserCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] description: human-readable description of this SSH User Certificate. optional, max 255 bytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        :param pulumi.Input[str] key_type: the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        :param pulumi.Input[str] public_key: a public key in OpenSSH Authorized Keys format that this certificate signs
        :param pulumi.Input[str] ssh_certificate_authority_id: the ssh certificate authority that is used to sign this ssh user certificate
        :param pulumi.Input[str] valid_after: the time when the ssh host certificate becomes valid, in RFC 3339 format.
        :param pulumi.Input[str] valid_until: the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SshUserCertificateState.__new__(_SshUserCertificateState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["critical_options"] = critical_options
        __props__.__dict__["description"] = description
        __props__.__dict__["extensions"] = extensions
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["principals"] = principals
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["ssh_certificate_authority_id"] = ssh_certificate_authority_id
        __props__.__dict__["valid_after"] = valid_after
        __props__.__dict__["valid_until"] = valid_until
        return SshUserCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        the signed SSH certificate in OpenSSH Authorized Keys Format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="criticalOptions")
    def critical_options(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of critical options included in the certificate. Only two critical options are currently defined by OpenSSH: `force-command` and `source-address`. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        """
        return pulumi.get(self, "critical_options")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of this SSH User Certificate. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of extensions included in the certificate. Extensions are additional metadata that can be interpreted by the SSH server for any purpose. These can be used to permit or deny the ability to open a terminal, do port forwarding, x11 forwarding, and more. If unspecified, the certificate will include limited permissions with the following extension map: `{"permit-pty": "", "permit-user-rc": ""}` OpenSSH understands a number of predefined extensions. See [the OpenSSH certificate protocol spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys) for additional details.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[str]:
        """
        the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this SSH User Certificate. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def principals(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        the list of principals included in the ssh user certificate. This is the list of usernames that the certificate holder may sign in as on a machine authorizinig the signing certificate authority. Dangerously, if no principals are specified, this certificate may be used to log in as any user.
        """
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        """
        a public key in OpenSSH Authorized Keys format that this certificate signs
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="sshCertificateAuthorityId")
    def ssh_certificate_authority_id(self) -> pulumi.Output[str]:
        """
        the ssh certificate authority that is used to sign this ssh user certificate
        """
        return pulumi.get(self, "ssh_certificate_authority_id")

    @property
    @pulumi.getter(name="validAfter")
    def valid_after(self) -> pulumi.Output[Optional[str]]:
        """
        the time when the ssh host certificate becomes valid, in RFC 3339 format.
        """
        return pulumi.get(self, "valid_after")

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> pulumi.Output[Optional[str]]:
        """
        the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        """
        return pulumi.get(self, "valid_until")

