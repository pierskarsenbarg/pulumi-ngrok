# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AgentIngressCertificateManagementPolicyArgs',
    'EventDestinationTargetArgs',
    'EventDestinationTargetCloudwatchLogArgs',
    'EventDestinationTargetCloudwatchLogAuthArgs',
    'EventDestinationTargetCloudwatchLogAuthCredArgs',
    'EventDestinationTargetCloudwatchLogAuthRoleArgs',
    'EventDestinationTargetDatadogArgs',
    'EventDestinationTargetDebugArgs',
    'EventDestinationTargetFirehoseArgs',
    'EventDestinationTargetFirehoseAuthArgs',
    'EventDestinationTargetFirehoseAuthCredArgs',
    'EventDestinationTargetFirehoseAuthRoleArgs',
    'EventDestinationTargetKineseArgs',
    'EventDestinationTargetKineseAuthArgs',
    'EventDestinationTargetKineseAuthCredArgs',
    'EventDestinationTargetKineseAuthRoleArgs',
    'EventSubscriptionSourceArgs',
    'ReservedDomainCertificateManagementPolicyArgs',
    'TlsCertificateSubjectAlternativeNameArgs',
    'TunnelGroupBackendTunnelArgs',
]

@pulumi.input_type
class AgentIngressCertificateManagementPolicyArgs:
    def __init__(__self__, *,
                 authority: Optional[pulumi.Input[str]] = None,
                 private_key_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authority: certificate authority to request certificates from. The only supported value is letsencrypt.
        :param pulumi.Input[str] private_key_type: type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        """
        certificate authority to request certificates from. The only supported value is letsencrypt.
        """
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        return pulumi.get(self, "private_key_type")

    @private_key_type.setter
    def private_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_type", value)


@pulumi.input_type
class EventDestinationTargetArgs:
    def __init__(__self__, *,
                 cloudwatch_logs: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogArgs']]]] = None,
                 datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDatadogArgs']]]] = None,
                 debugs: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDebugArgs']]]] = None,
                 firehoses: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseArgs']]]] = None,
                 kineses: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogArgs']]] cloudwatch_logs: Configuration used to send events to Amazon CloudWatch Logs.
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDatadogArgs']]] datadogs: Configuration used to send events to Datadog.
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDebugArgs']]] debugs: Configuration used for internal debugging.
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseArgs']]] firehoses: Configuration used to send events to Amazon Kinesis Data Firehose.
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseArgs']]] kineses: Configuration used to send events to Amazon Kinesis.
        """
        if cloudwatch_logs is not None:
            pulumi.set(__self__, "cloudwatch_logs", cloudwatch_logs)
        if datadogs is not None:
            pulumi.set(__self__, "datadogs", datadogs)
        if debugs is not None:
            pulumi.set(__self__, "debugs", debugs)
        if firehoses is not None:
            pulumi.set(__self__, "firehoses", firehoses)
        if kineses is not None:
            pulumi.set(__self__, "kineses", kineses)

    @property
    @pulumi.getter(name="cloudwatchLogs")
    def cloudwatch_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogArgs']]]]:
        """
        Configuration used to send events to Amazon CloudWatch Logs.
        """
        return pulumi.get(self, "cloudwatch_logs")

    @cloudwatch_logs.setter
    def cloudwatch_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogArgs']]]]):
        pulumi.set(self, "cloudwatch_logs", value)

    @property
    @pulumi.getter
    def datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDatadogArgs']]]]:
        """
        Configuration used to send events to Datadog.
        """
        return pulumi.get(self, "datadogs")

    @datadogs.setter
    def datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDatadogArgs']]]]):
        pulumi.set(self, "datadogs", value)

    @property
    @pulumi.getter
    def debugs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDebugArgs']]]]:
        """
        Configuration used for internal debugging.
        """
        return pulumi.get(self, "debugs")

    @debugs.setter
    def debugs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetDebugArgs']]]]):
        pulumi.set(self, "debugs", value)

    @property
    @pulumi.getter
    def firehoses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseArgs']]]]:
        """
        Configuration used to send events to Amazon Kinesis Data Firehose.
        """
        return pulumi.get(self, "firehoses")

    @firehoses.setter
    def firehoses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseArgs']]]]):
        pulumi.set(self, "firehoses", value)

    @property
    @pulumi.getter
    def kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseArgs']]]]:
        """
        Configuration used to send events to Amazon Kinesis.
        """
        return pulumi.get(self, "kineses")

    @kineses.setter
    def kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseArgs']]]]):
        pulumi.set(self, "kineses", value)


@pulumi.input_type
class EventDestinationTargetCloudwatchLogArgs:
    def __init__(__self__, *,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthArgs']]]] = None,
                 log_group_arn: Optional[pulumi.Input[str]] = None):
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if log_group_arn is not None:
            pulumi.set(__self__, "log_group_arn", log_group_arn)

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthArgs']]]]:
        return pulumi.get(self, "auths")

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthArgs']]]]):
        pulumi.set(self, "auths", value)

    @property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_group_arn")

    @log_group_arn.setter
    def log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_group_arn", value)


@pulumi.input_type
class EventDestinationTargetCloudwatchLogAuthArgs:
    def __init__(__self__, *,
                 creds: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthCredArgs']]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthRoleArgs']]]] = None):
        if creds is not None:
            pulumi.set(__self__, "creds", creds)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def creds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthCredArgs']]]]:
        return pulumi.get(self, "creds")

    @creds.setter
    def creds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthCredArgs']]]]):
        pulumi.set(self, "creds", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthRoleArgs']]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetCloudwatchLogAuthRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class EventDestinationTargetCloudwatchLogAuthCredArgs:
    def __init__(__self__, *,
                 aws_access_key_id: pulumi.Input[str],
                 aws_secret_access_key: pulumi.Input[str]):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_secret_access_key", value)


@pulumi.input_type
class EventDestinationTargetCloudwatchLogAuthRoleArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str]):
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class EventDestinationTargetDatadogArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 ddsite: Optional[pulumi.Input[str]] = None,
                 ddtags: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if ddsite is not None:
            pulumi.set(__self__, "ddsite", ddsite)
        if ddtags is not None:
            pulumi.set(__self__, "ddtags", ddtags)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def ddsite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddsite")

    @ddsite.setter
    def ddsite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddsite", value)

    @property
    @pulumi.getter
    def ddtags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddtags")

    @ddtags.setter
    def ddtags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddtags", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class EventDestinationTargetDebugArgs:
    def __init__(__self__, *,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[bool]] = None):
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_url", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class EventDestinationTargetFirehoseArgs:
    def __init__(__self__, *,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthArgs']]]] = None,
                 delivery_stream_arn: Optional[pulumi.Input[str]] = None):
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if delivery_stream_arn is not None:
            pulumi.set(__self__, "delivery_stream_arn", delivery_stream_arn)

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthArgs']]]]:
        return pulumi.get(self, "auths")

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthArgs']]]]):
        pulumi.set(self, "auths", value)

    @property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_stream_arn")

    @delivery_stream_arn.setter
    def delivery_stream_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_stream_arn", value)


@pulumi.input_type
class EventDestinationTargetFirehoseAuthArgs:
    def __init__(__self__, *,
                 creds: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthCredArgs']]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthRoleArgs']]]] = None):
        if creds is not None:
            pulumi.set(__self__, "creds", creds)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def creds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthCredArgs']]]]:
        return pulumi.get(self, "creds")

    @creds.setter
    def creds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthCredArgs']]]]):
        pulumi.set(self, "creds", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthRoleArgs']]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetFirehoseAuthRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class EventDestinationTargetFirehoseAuthCredArgs:
    def __init__(__self__, *,
                 aws_access_key_id: pulumi.Input[str],
                 aws_secret_access_key: pulumi.Input[str]):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_secret_access_key", value)


@pulumi.input_type
class EventDestinationTargetFirehoseAuthRoleArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str]):
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class EventDestinationTargetKineseArgs:
    def __init__(__self__, *,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthArgs']]]] = None,
                 stream_arn: Optional[pulumi.Input[str]] = None):
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if stream_arn is not None:
            pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthArgs']]]]:
        return pulumi.get(self, "auths")

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthArgs']]]]):
        pulumi.set(self, "auths", value)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stream_arn")

    @stream_arn.setter
    def stream_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_arn", value)


@pulumi.input_type
class EventDestinationTargetKineseAuthArgs:
    def __init__(__self__, *,
                 creds: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthCredArgs']]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthRoleArgs']]]] = None):
        if creds is not None:
            pulumi.set(__self__, "creds", creds)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def creds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthCredArgs']]]]:
        return pulumi.get(self, "creds")

    @creds.setter
    def creds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthCredArgs']]]]):
        pulumi.set(self, "creds", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthRoleArgs']]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetKineseAuthRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class EventDestinationTargetKineseAuthCredArgs:
    def __init__(__self__, *,
                 aws_access_key_id: pulumi.Input[str],
                 aws_secret_access_key: pulumi.Input[str]):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_secret_access_key", value)


@pulumi.input_type
class EventDestinationTargetKineseAuthRoleArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str]):
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class EventSubscriptionSourceArgs:
    def __init__(__self__, *,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: TODO
        :param pulumi.Input[str] filter: TODO
        :param pulumi.Input[str] type: Type of event for which an event subscription will trigger
        :param pulumi.Input[str] uri: URI of the Event Source API resource.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TODO
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of event for which an event subscription will trigger
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the Event Source API resource.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class ReservedDomainCertificateManagementPolicyArgs:
    def __init__(__self__, *,
                 authority: Optional[pulumi.Input[str]] = None,
                 private_key_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authority: certificate authority to request certificates from. The only supported value is letsencrypt.
        :param pulumi.Input[str] private_key_type: type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        """
        certificate authority to request certificates from. The only supported value is letsencrypt.
        """
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        return pulumi.get(self, "private_key_type")

    @private_key_type.setter
    def private_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_type", value)


@pulumi.input_type
class TlsCertificateSubjectAlternativeNameArgs:
    def __init__(__self__, *,
                 dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: set of additional domains (including wildcards) this TLS certificate is valid for
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: set of IP addresses this TLS certificate is also valid for
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        set of additional domains (including wildcards) this TLS certificate is valid for
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        set of IP addresses this TLS certificate is also valid for
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)


@pulumi.input_type
class TunnelGroupBackendTunnelArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: a resource identifier
        :param pulumi.Input[str] uri: a uri for locating a resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        a resource identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        a uri for locating a resource
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


