# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AgentIngressArgs', 'AgentIngress']

@pulumi.input_type
class AgentIngressArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AgentIngress resource.
        :param pulumi.Input[str] domain: the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        :param pulumi.Input[str] description: human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        :param pulumi.Input[str] uri: URI to the API resource of this Agent ingress
        """
        pulumi.set(__self__, "domain", domain)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI to the API resource of this Agent ingress
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class _AgentIngressState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 ns_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AgentIngress resources.
        :param pulumi.Input[str] created_at: timestamp when the Agent Ingress was created, RFC 3339 format
        :param pulumi.Input[str] description: human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        :param pulumi.Input[str] domain: the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ns_targets: a list of target values to use as the values of NS records for the domain property these values will delegate control over the domain to ngrok
        :param pulumi.Input[Sequence[pulumi.Input[str]]] region_domains: a list of regional agent ingress domains that are subdomains of the value of domain this value may increase over time as ngrok adds more regions
        :param pulumi.Input[str] uri: URI to the API resource of this Agent ingress
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ns_targets is not None:
            pulumi.set(__self__, "ns_targets", ns_targets)
        if region_domains is not None:
            pulumi.set(__self__, "region_domains", region_domains)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        timestamp when the Agent Ingress was created, RFC 3339 format
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nsTargets")
    def ns_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        a list of target values to use as the values of NS records for the domain property these values will delegate control over the domain to ngrok
        """
        return pulumi.get(self, "ns_targets")

    @ns_targets.setter
    def ns_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ns_targets", value)

    @property
    @pulumi.getter(name="regionDomains")
    def region_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        a list of regional agent ingress domains that are subdomains of the value of domain this value may increase over time as ngrok adds more regions
        """
        return pulumi.get(self, "region_domains")

    @region_domains.setter
    def region_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "region_domains", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI to the API resource of this Agent ingress
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


class AgentIngress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.AgentIngress("example",
            description="acme devices",
            domain="connect.acme.com")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        :param pulumi.Input[str] domain: the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        :param pulumi.Input[str] uri: URI to the API resource of this Agent ingress
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AgentIngressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.AgentIngress("example",
            description="acme devices",
            domain="connect.acme.com")
        ```

        :param str resource_name: The name of the resource.
        :param AgentIngressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AgentIngressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AgentIngressArgs.__new__(AgentIngressArgs)

            __props__.__dict__["description"] = description
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["uri"] = uri
            __props__.__dict__["created_at"] = None
            __props__.__dict__["ns_targets"] = None
            __props__.__dict__["region_domains"] = None
        super(AgentIngress, __self__).__init__(
            'ngrok:index/agentIngress:AgentIngress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            ns_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            region_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            uri: Optional[pulumi.Input[str]] = None) -> 'AgentIngress':
        """
        Get an existing AgentIngress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: timestamp when the Agent Ingress was created, RFC 3339 format
        :param pulumi.Input[str] description: human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        :param pulumi.Input[str] domain: the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ns_targets: a list of target values to use as the values of NS records for the domain property these values will delegate control over the domain to ngrok
        :param pulumi.Input[Sequence[pulumi.Input[str]]] region_domains: a list of regional agent ingress domains that are subdomains of the value of domain this value may increase over time as ngrok adds more regions
        :param pulumi.Input[str] uri: URI to the API resource of this Agent ingress
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AgentIngressState.__new__(_AgentIngressState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["ns_targets"] = ns_targets
        __props__.__dict__["region_domains"] = region_domains
        __props__.__dict__["uri"] = uri
        return AgentIngress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        timestamp when the Agent Ingress was created, RFC 3339 format
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of the use of this Agent Ingress. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        the domain that you own to be used as the base domain name to generate regional agent ingress domains.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this Agent Ingress. optional, max 4096 bytes
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nsTargets")
    def ns_targets(self) -> pulumi.Output[Sequence[str]]:
        """
        a list of target values to use as the values of NS records for the domain property these values will delegate control over the domain to ngrok
        """
        return pulumi.get(self, "ns_targets")

    @property
    @pulumi.getter(name="regionDomains")
    def region_domains(self) -> pulumi.Output[Sequence[str]]:
        """
        a list of regional agent ingress domains that are subdomains of the value of domain this value may increase over time as ngrok adds more regions
        """
        return pulumi.get(self, "region_domains")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[str]:
        """
        URI to the API resource of this Agent ingress
        """
        return pulumi.get(self, "uri")

