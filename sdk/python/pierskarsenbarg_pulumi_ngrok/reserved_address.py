# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ReservedAddressArgs', 'ReservedAddress']

@pulumi.input_type
class ReservedAddressArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReservedAddress resource.
        :param pulumi.Input[str] addr: hostname:port of the reserved address that was assigned at creation time
        :param pulumi.Input[str] description: human-readable description of what this reserved address will be used for
        :param pulumi.Input[str] endpoint_configuration_id: ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        :param pulumi.Input[str] region: reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_configuration_id is not None:
            pulumi.set(__self__, "endpoint_configuration_id", endpoint_configuration_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        """
        hostname:port of the reserved address that was assigned at creation time
        """
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of what this reserved address will be used for
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="endpointConfigurationId")
    def endpoint_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        """
        return pulumi.get(self, "endpoint_configuration_id")

    @endpoint_configuration_id.setter
    def endpoint_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_configuration_id", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ReservedAddressState:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReservedAddress resources.
        :param pulumi.Input[str] addr: hostname:port of the reserved address that was assigned at creation time
        :param pulumi.Input[str] description: human-readable description of what this reserved address will be used for
        :param pulumi.Input[str] endpoint_configuration_id: ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        :param pulumi.Input[str] region: reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_configuration_id is not None:
            pulumi.set(__self__, "endpoint_configuration_id", endpoint_configuration_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        """
        hostname:port of the reserved address that was assigned at creation time
        """
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of what this reserved address will be used for
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="endpointConfigurationId")
    def endpoint_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        """
        return pulumi.get(self, "endpoint_configuration_id")

    @endpoint_configuration_id.setter
    def endpoint_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_configuration_id", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class ReservedAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Reserved Addresses are TCP addresses that can be used to listen for traffic.
         TCP address hostnames and ports are assigned by ngrok, they cannot be
         chosen.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.ReservedAddress("example",
            description="SSH for device #001",
            region="us")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr: hostname:port of the reserved address that was assigned at creation time
        :param pulumi.Input[str] description: human-readable description of what this reserved address will be used for
        :param pulumi.Input[str] endpoint_configuration_id: ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        :param pulumi.Input[str] region: reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ReservedAddressArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Reserved Addresses are TCP addresses that can be used to listen for traffic.
         TCP address hostnames and ports are assigned by ngrok, they cannot be
         chosen.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.ReservedAddress("example",
            description="SSH for device #001",
            region="us")
        ```

        :param str resource_name: The name of the resource.
        :param ReservedAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReservedAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReservedAddressArgs.__new__(ReservedAddressArgs)

            __props__.__dict__["addr"] = addr
            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint_configuration_id"] = endpoint_configuration_id
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["region"] = region
        super(ReservedAddress, __self__).__init__(
            'ngrok:index/reservedAddress:ReservedAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addr: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'ReservedAddress':
        """
        Get an existing ReservedAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr: hostname:port of the reserved address that was assigned at creation time
        :param pulumi.Input[str] description: human-readable description of what this reserved address will be used for
        :param pulumi.Input[str] endpoint_configuration_id: ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        :param pulumi.Input[str] region: reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReservedAddressState.__new__(_ReservedAddressState)

        __props__.__dict__["addr"] = addr
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint_configuration_id"] = endpoint_configuration_id
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["region"] = region
        return ReservedAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def addr(self) -> pulumi.Output[str]:
        """
        hostname:port of the reserved address that was assigned at creation time
        """
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of what this reserved address will be used for
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endpointConfigurationId")
    def endpoint_configuration_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of an endpoint configuration of type tcp that will be used to handle inbound traffic to this address
        """
        return pulumi.get(self, "endpoint_configuration_id")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this reserved address. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        reserve the address in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        return pulumi.get(self, "region")

