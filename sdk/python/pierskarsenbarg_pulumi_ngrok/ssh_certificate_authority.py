# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SshCertificateAuthorityArgs', 'SshCertificateAuthority']

@pulumi.input_type
class SshCertificateAuthorityArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 elliptic_curve: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 private_key_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SshCertificateAuthority resource.
        :param pulumi.Input[str] description: human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        :param pulumi.Input[str] elliptic_curve: the type of elliptic curve to use when creating an ECDSA key
        :param pulumi.Input[int] key_size: the key size to use when creating an RSA key. one of `2048` or `4096`
        :param pulumi.Input[str] key_type: the type of private key for this SSH Certificate Authority
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        :param pulumi.Input[str] private_key_type: the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        :param pulumi.Input[str] public_key: raw public key for this SSH Certificate Authority
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if elliptic_curve is not None:
            pulumi.set(__self__, "elliptic_curve", elliptic_curve)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ellipticCurve")
    def elliptic_curve(self) -> Optional[pulumi.Input[str]]:
        """
        the type of elliptic curve to use when creating an ECDSA key
        """
        return pulumi.get(self, "elliptic_curve")

    @elliptic_curve.setter
    def elliptic_curve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elliptic_curve", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[int]]:
        """
        the key size to use when creating an RSA key. one of `2048` or `4096`
        """
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        the type of private key for this SSH Certificate Authority
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        """
        return pulumi.get(self, "private_key_type")

    @private_key_type.setter
    def private_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_type", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        raw public key for this SSH Certificate Authority
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class _SshCertificateAuthorityState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 elliptic_curve: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 private_key_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SshCertificateAuthority resources.
        :param pulumi.Input[str] description: human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        :param pulumi.Input[str] elliptic_curve: the type of elliptic curve to use when creating an ECDSA key
        :param pulumi.Input[int] key_size: the key size to use when creating an RSA key. one of `2048` or `4096`
        :param pulumi.Input[str] key_type: the type of private key for this SSH Certificate Authority
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        :param pulumi.Input[str] private_key_type: the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        :param pulumi.Input[str] public_key: raw public key for this SSH Certificate Authority
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if elliptic_curve is not None:
            pulumi.set(__self__, "elliptic_curve", elliptic_curve)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ellipticCurve")
    def elliptic_curve(self) -> Optional[pulumi.Input[str]]:
        """
        the type of elliptic curve to use when creating an ECDSA key
        """
        return pulumi.get(self, "elliptic_curve")

    @elliptic_curve.setter
    def elliptic_curve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elliptic_curve", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[int]]:
        """
        the key size to use when creating an RSA key. one of `2048` or `4096`
        """
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        the type of private key for this SSH Certificate Authority
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        """
        return pulumi.get(self, "private_key_type")

    @private_key_type.setter
    def private_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_type", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        raw public key for this SSH Certificate Authority
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


class SshCertificateAuthority(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 elliptic_curve: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 private_key_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An SSH Certificate Authority is a pair of an SSH Certificate and its private
         key that can be used to sign other SSH host and user certificates.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.SshCertificateAuthority("example",
            description="Staging Environment Hosts",
            private_key_type="ed25519")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        :param pulumi.Input[str] elliptic_curve: the type of elliptic curve to use when creating an ECDSA key
        :param pulumi.Input[int] key_size: the key size to use when creating an RSA key. one of `2048` or `4096`
        :param pulumi.Input[str] key_type: the type of private key for this SSH Certificate Authority
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        :param pulumi.Input[str] private_key_type: the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        :param pulumi.Input[str] public_key: raw public key for this SSH Certificate Authority
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SshCertificateAuthorityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An SSH Certificate Authority is a pair of an SSH Certificate and its private
         key that can be used to sign other SSH host and user certificates.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.SshCertificateAuthority("example",
            description="Staging Environment Hosts",
            private_key_type="ed25519")
        ```

        :param str resource_name: The name of the resource.
        :param SshCertificateAuthorityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SshCertificateAuthorityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 elliptic_curve: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 private_key_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SshCertificateAuthorityArgs.__new__(SshCertificateAuthorityArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["elliptic_curve"] = elliptic_curve
            __props__.__dict__["key_size"] = key_size
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["private_key_type"] = private_key_type
            __props__.__dict__["public_key"] = public_key
        super(SshCertificateAuthority, __self__).__init__(
            'ngrok:index/sshCertificateAuthority:SshCertificateAuthority',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            elliptic_curve: Optional[pulumi.Input[str]] = None,
            key_size: Optional[pulumi.Input[int]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            private_key_type: Optional[pulumi.Input[str]] = None,
            public_key: Optional[pulumi.Input[str]] = None) -> 'SshCertificateAuthority':
        """
        Get an existing SshCertificateAuthority resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        :param pulumi.Input[str] elliptic_curve: the type of elliptic curve to use when creating an ECDSA key
        :param pulumi.Input[int] key_size: the key size to use when creating an RSA key. one of `2048` or `4096`
        :param pulumi.Input[str] key_type: the type of private key for this SSH Certificate Authority
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        :param pulumi.Input[str] private_key_type: the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        :param pulumi.Input[str] public_key: raw public key for this SSH Certificate Authority
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SshCertificateAuthorityState.__new__(_SshCertificateAuthorityState)

        __props__.__dict__["description"] = description
        __props__.__dict__["elliptic_curve"] = elliptic_curve
        __props__.__dict__["key_size"] = key_size
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["private_key_type"] = private_key_type
        __props__.__dict__["public_key"] = public_key
        return SshCertificateAuthority(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ellipticCurve")
    def elliptic_curve(self) -> pulumi.Output[Optional[str]]:
        """
        the type of elliptic curve to use when creating an ECDSA key
        """
        return pulumi.get(self, "elliptic_curve")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> pulumi.Output[Optional[int]]:
        """
        the key size to use when creating an RSA key. one of `2048` or `4096`
        """
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[str]:
        """
        the type of private key for this SSH Certificate Authority
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> pulumi.Output[Optional[str]]:
        """
        the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        """
        return pulumi.get(self, "private_key_type")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        """
        raw public key for this SSH Certificate Authority
        """
        return pulumi.get(self, "public_key")

