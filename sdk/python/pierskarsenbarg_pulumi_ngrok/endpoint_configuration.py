# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EndpointConfigurationArgs', 'EndpointConfiguration']

@pulumi.input_type
class EndpointConfigurationArgs:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]]] = None,
                 basic_auths: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]]] = None,
                 circuit_breakers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]]] = None,
                 compressions: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_policies: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 mutual_tls: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]]] = None,
                 oauths: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]]] = None,
                 oidcs: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]]] = None,
                 request_headers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]]] = None,
                 response_headers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]]] = None,
                 tls_terminations: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 webhook_validations: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]]] = None):
        """
        The set of arguments for constructing a EndpointConfiguration resource.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]] backends: backend module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]] basic_auths: basic auth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]] circuit_breakers: circuit breaker module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]] compressions: compression module configuration or `null`
        :param pulumi.Input[str] description: human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]] ip_policies: ip policy module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]] loggings: logging module configuration or `null`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]] mutual_tls: mutual TLS module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]] oauths: oauth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]] oidcs: oidc module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]] request_headers: request headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]] response_headers: response headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]] samls: saml module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]] tls_terminations: TLS termination module configuration or `null`
        :param pulumi.Input[str] type: they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]] webhook_validations: webhook validation module configuration or `null`
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if basic_auths is not None:
            pulumi.set(__self__, "basic_auths", basic_auths)
        if circuit_breakers is not None:
            pulumi.set(__self__, "circuit_breakers", circuit_breakers)
        if compressions is not None:
            pulumi.set(__self__, "compressions", compressions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_policies is not None:
            pulumi.set(__self__, "ip_policies", ip_policies)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if mutual_tls is not None:
            pulumi.set(__self__, "mutual_tls", mutual_tls)
        if oauths is not None:
            pulumi.set(__self__, "oauths", oauths)
        if oidcs is not None:
            pulumi.set(__self__, "oidcs", oidcs)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if tls_terminations is not None:
            pulumi.set(__self__, "tls_terminations", tls_terminations)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if webhook_validations is not None:
            pulumi.set(__self__, "webhook_validations", webhook_validations)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]]]:
        """
        backend module configuration or `null`
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="basicAuths")
    def basic_auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]]]:
        """
        basic auth module configuration or `null`
        """
        return pulumi.get(self, "basic_auths")

    @basic_auths.setter
    def basic_auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]]]):
        pulumi.set(self, "basic_auths", value)

    @property
    @pulumi.getter(name="circuitBreakers")
    def circuit_breakers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]]]:
        """
        circuit breaker module configuration or `null`
        """
        return pulumi.get(self, "circuit_breakers")

    @circuit_breakers.setter
    def circuit_breakers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]]]):
        pulumi.set(self, "circuit_breakers", value)

    @property
    @pulumi.getter
    def compressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]]]:
        """
        compression module configuration or `null`
        """
        return pulumi.get(self, "compressions")

    @compressions.setter
    def compressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]]]):
        pulumi.set(self, "compressions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipPolicies")
    def ip_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]]]:
        """
        ip policy module configuration or `null`
        """
        return pulumi.get(self, "ip_policies")

    @ip_policies.setter
    def ip_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]]]):
        pulumi.set(self, "ip_policies", value)

    @property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]]]:
        """
        logging module configuration or `null`
        """
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]]]:
        """
        mutual TLS module configuration or `null`
        """
        return pulumi.get(self, "mutual_tls")

    @mutual_tls.setter
    def mutual_tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]]]):
        pulumi.set(self, "mutual_tls", value)

    @property
    @pulumi.getter
    def oauths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]]]:
        """
        oauth module configuration or `null`
        """
        return pulumi.get(self, "oauths")

    @oauths.setter
    def oauths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]]]):
        pulumi.set(self, "oauths", value)

    @property
    @pulumi.getter
    def oidcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]]]:
        """
        oidc module configuration or `null`
        """
        return pulumi.get(self, "oidcs")

    @oidcs.setter
    def oidcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]]]):
        pulumi.set(self, "oidcs", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]]]:
        """
        request headers module configuration or `null`
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]]]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]]]:
        """
        response headers module configuration or `null`
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]]]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]]]:
        """
        saml module configuration or `null`
        """
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="tlsTerminations")
    def tls_terminations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]]]:
        """
        TLS termination module configuration or `null`
        """
        return pulumi.get(self, "tls_terminations")

    @tls_terminations.setter
    def tls_terminations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]]]):
        pulumi.set(self, "tls_terminations", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="webhookValidations")
    def webhook_validations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]]]:
        """
        webhook validation module configuration or `null`
        """
        return pulumi.get(self, "webhook_validations")

    @webhook_validations.setter
    def webhook_validations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]]]):
        pulumi.set(self, "webhook_validations", value)


@pulumi.input_type
class _EndpointConfigurationState:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]]] = None,
                 basic_auths: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]]] = None,
                 circuit_breakers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]]] = None,
                 compressions: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_policies: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 mutual_tls: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]]] = None,
                 oauths: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]]] = None,
                 oidcs: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]]] = None,
                 request_headers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]]] = None,
                 response_headers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]]] = None,
                 tls_terminations: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 webhook_validations: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]]] = None):
        """
        Input properties used for looking up and filtering EndpointConfiguration resources.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]] backends: backend module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]] basic_auths: basic auth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]] circuit_breakers: circuit breaker module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]] compressions: compression module configuration or `null`
        :param pulumi.Input[str] description: human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]] ip_policies: ip policy module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]] loggings: logging module configuration or `null`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]] mutual_tls: mutual TLS module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]] oauths: oauth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]] oidcs: oidc module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]] request_headers: request headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]] response_headers: response headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]] samls: saml module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]] tls_terminations: TLS termination module configuration or `null`
        :param pulumi.Input[str] type: they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]] webhook_validations: webhook validation module configuration or `null`
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if basic_auths is not None:
            pulumi.set(__self__, "basic_auths", basic_auths)
        if circuit_breakers is not None:
            pulumi.set(__self__, "circuit_breakers", circuit_breakers)
        if compressions is not None:
            pulumi.set(__self__, "compressions", compressions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_policies is not None:
            pulumi.set(__self__, "ip_policies", ip_policies)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if mutual_tls is not None:
            pulumi.set(__self__, "mutual_tls", mutual_tls)
        if oauths is not None:
            pulumi.set(__self__, "oauths", oauths)
        if oidcs is not None:
            pulumi.set(__self__, "oidcs", oidcs)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if tls_terminations is not None:
            pulumi.set(__self__, "tls_terminations", tls_terminations)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if webhook_validations is not None:
            pulumi.set(__self__, "webhook_validations", webhook_validations)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]]]:
        """
        backend module configuration or `null`
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="basicAuths")
    def basic_auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]]]:
        """
        basic auth module configuration or `null`
        """
        return pulumi.get(self, "basic_auths")

    @basic_auths.setter
    def basic_auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationBasicAuthArgs']]]]):
        pulumi.set(self, "basic_auths", value)

    @property
    @pulumi.getter(name="circuitBreakers")
    def circuit_breakers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]]]:
        """
        circuit breaker module configuration or `null`
        """
        return pulumi.get(self, "circuit_breakers")

    @circuit_breakers.setter
    def circuit_breakers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCircuitBreakerArgs']]]]):
        pulumi.set(self, "circuit_breakers", value)

    @property
    @pulumi.getter
    def compressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]]]:
        """
        compression module configuration or `null`
        """
        return pulumi.get(self, "compressions")

    @compressions.setter
    def compressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationCompressionArgs']]]]):
        pulumi.set(self, "compressions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipPolicies")
    def ip_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]]]:
        """
        ip policy module configuration or `null`
        """
        return pulumi.get(self, "ip_policies")

    @ip_policies.setter
    def ip_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationIpPolicyArgs']]]]):
        pulumi.set(self, "ip_policies", value)

    @property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]]]:
        """
        logging module configuration or `null`
        """
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]]]:
        """
        mutual TLS module configuration or `null`
        """
        return pulumi.get(self, "mutual_tls")

    @mutual_tls.setter
    def mutual_tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationMutualTlArgs']]]]):
        pulumi.set(self, "mutual_tls", value)

    @property
    @pulumi.getter
    def oauths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]]]:
        """
        oauth module configuration or `null`
        """
        return pulumi.get(self, "oauths")

    @oauths.setter
    def oauths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOauthArgs']]]]):
        pulumi.set(self, "oauths", value)

    @property
    @pulumi.getter
    def oidcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]]]:
        """
        oidc module configuration or `null`
        """
        return pulumi.get(self, "oidcs")

    @oidcs.setter
    def oidcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationOidcArgs']]]]):
        pulumi.set(self, "oidcs", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]]]:
        """
        request headers module configuration or `null`
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationRequestHeaderArgs']]]]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]]]:
        """
        response headers module configuration or `null`
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationResponseHeaderArgs']]]]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]]]:
        """
        saml module configuration or `null`
        """
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="tlsTerminations")
    def tls_terminations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]]]:
        """
        TLS termination module configuration or `null`
        """
        return pulumi.get(self, "tls_terminations")

    @tls_terminations.setter
    def tls_terminations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationTlsTerminationArgs']]]]):
        pulumi.set(self, "tls_terminations", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="webhookValidations")
    def webhook_validations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]]]:
        """
        webhook validation module configuration or `null`
        """
        return pulumi.get(self, "webhook_validations")

    @webhook_validations.setter
    def webhook_validations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationWebhookValidationArgs']]]]):
        pulumi.set(self, "webhook_validations", value)


class EndpointConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBackendArgs']]]]] = None,
                 basic_auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBasicAuthArgs']]]]] = None,
                 circuit_breakers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCircuitBreakerArgs']]]]] = None,
                 compressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCompressionArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationIpPolicyArgs']]]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationLoggingArgs']]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 mutual_tls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationMutualTlArgs']]]]] = None,
                 oauths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOauthArgs']]]]] = None,
                 oidcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOidcArgs']]]]] = None,
                 request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationRequestHeaderArgs']]]]] = None,
                 response_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationResponseHeaderArgs']]]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationSamlArgs']]]]] = None,
                 tls_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationTlsTerminationArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 webhook_validations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationWebhookValidationArgs']]]]] = None,
                 __props__=None):
        """
        Endpoint Configurations are a reusable group of modules that encapsulate how
         traffic to a domain or address is handled. Endpoint configurations are only
         applied to Domains and TCP Addresses they have been attached to.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.EndpointConfiguration("example",
            description="app servers",
            request_headers=[ngrok.EndpointConfigurationRequestHeaderArgs(
                add={
                    "x-frontend": "ngrok",
                },
                removes=["cache-control"],
            )],
            type="https")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBackendArgs']]]] backends: backend module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBasicAuthArgs']]]] basic_auths: basic auth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCircuitBreakerArgs']]]] circuit_breakers: circuit breaker module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCompressionArgs']]]] compressions: compression module configuration or `null`
        :param pulumi.Input[str] description: human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationIpPolicyArgs']]]] ip_policies: ip policy module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationLoggingArgs']]]] loggings: logging module configuration or `null`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationMutualTlArgs']]]] mutual_tls: mutual TLS module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOauthArgs']]]] oauths: oauth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOidcArgs']]]] oidcs: oidc module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationRequestHeaderArgs']]]] request_headers: request headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationResponseHeaderArgs']]]] response_headers: response headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationSamlArgs']]]] samls: saml module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationTlsTerminationArgs']]]] tls_terminations: TLS termination module configuration or `null`
        :param pulumi.Input[str] type: they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationWebhookValidationArgs']]]] webhook_validations: webhook validation module configuration or `null`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EndpointConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Endpoint Configurations are a reusable group of modules that encapsulate how
         traffic to a domain or address is handled. Endpoint configurations are only
         applied to Domains and TCP Addresses they have been attached to.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.EndpointConfiguration("example",
            description="app servers",
            request_headers=[ngrok.EndpointConfigurationRequestHeaderArgs(
                add={
                    "x-frontend": "ngrok",
                },
                removes=["cache-control"],
            )],
            type="https")
        ```

        :param str resource_name: The name of the resource.
        :param EndpointConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBackendArgs']]]]] = None,
                 basic_auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBasicAuthArgs']]]]] = None,
                 circuit_breakers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCircuitBreakerArgs']]]]] = None,
                 compressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCompressionArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationIpPolicyArgs']]]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationLoggingArgs']]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 mutual_tls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationMutualTlArgs']]]]] = None,
                 oauths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOauthArgs']]]]] = None,
                 oidcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOidcArgs']]]]] = None,
                 request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationRequestHeaderArgs']]]]] = None,
                 response_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationResponseHeaderArgs']]]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationSamlArgs']]]]] = None,
                 tls_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationTlsTerminationArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 webhook_validations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationWebhookValidationArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointConfigurationArgs.__new__(EndpointConfigurationArgs)

            __props__.__dict__["backends"] = backends
            __props__.__dict__["basic_auths"] = basic_auths
            __props__.__dict__["circuit_breakers"] = circuit_breakers
            __props__.__dict__["compressions"] = compressions
            __props__.__dict__["description"] = description
            __props__.__dict__["ip_policies"] = ip_policies
            __props__.__dict__["loggings"] = loggings
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["mutual_tls"] = mutual_tls
            __props__.__dict__["oauths"] = oauths
            __props__.__dict__["oidcs"] = oidcs
            __props__.__dict__["request_headers"] = request_headers
            __props__.__dict__["response_headers"] = response_headers
            __props__.__dict__["samls"] = samls
            __props__.__dict__["tls_terminations"] = tls_terminations
            __props__.__dict__["type"] = type
            __props__.__dict__["webhook_validations"] = webhook_validations
        super(EndpointConfiguration, __self__).__init__(
            'ngrok:index/endpointConfiguration:EndpointConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBackendArgs']]]]] = None,
            basic_auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBasicAuthArgs']]]]] = None,
            circuit_breakers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCircuitBreakerArgs']]]]] = None,
            compressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCompressionArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ip_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationIpPolicyArgs']]]]] = None,
            loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationLoggingArgs']]]]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            mutual_tls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationMutualTlArgs']]]]] = None,
            oauths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOauthArgs']]]]] = None,
            oidcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOidcArgs']]]]] = None,
            request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationRequestHeaderArgs']]]]] = None,
            response_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationResponseHeaderArgs']]]]] = None,
            samls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationSamlArgs']]]]] = None,
            tls_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationTlsTerminationArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            webhook_validations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationWebhookValidationArgs']]]]] = None) -> 'EndpointConfiguration':
        """
        Get an existing EndpointConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBackendArgs']]]] backends: backend module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationBasicAuthArgs']]]] basic_auths: basic auth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCircuitBreakerArgs']]]] circuit_breakers: circuit breaker module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationCompressionArgs']]]] compressions: compression module configuration or `null`
        :param pulumi.Input[str] description: human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationIpPolicyArgs']]]] ip_policies: ip policy module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationLoggingArgs']]]] loggings: logging module configuration or `null`
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationMutualTlArgs']]]] mutual_tls: mutual TLS module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOauthArgs']]]] oauths: oauth module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationOidcArgs']]]] oidcs: oidc module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationRequestHeaderArgs']]]] request_headers: request headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationResponseHeaderArgs']]]] response_headers: response headers module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationSamlArgs']]]] samls: saml module configuration or `null`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationTlsTerminationArgs']]]] tls_terminations: TLS termination module configuration or `null`
        :param pulumi.Input[str] type: they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointConfigurationWebhookValidationArgs']]]] webhook_validations: webhook validation module configuration or `null`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointConfigurationState.__new__(_EndpointConfigurationState)

        __props__.__dict__["backends"] = backends
        __props__.__dict__["basic_auths"] = basic_auths
        __props__.__dict__["circuit_breakers"] = circuit_breakers
        __props__.__dict__["compressions"] = compressions
        __props__.__dict__["description"] = description
        __props__.__dict__["ip_policies"] = ip_policies
        __props__.__dict__["loggings"] = loggings
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["mutual_tls"] = mutual_tls
        __props__.__dict__["oauths"] = oauths
        __props__.__dict__["oidcs"] = oidcs
        __props__.__dict__["request_headers"] = request_headers
        __props__.__dict__["response_headers"] = response_headers
        __props__.__dict__["samls"] = samls
        __props__.__dict__["tls_terminations"] = tls_terminations
        __props__.__dict__["type"] = type
        __props__.__dict__["webhook_validations"] = webhook_validations
        return EndpointConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationBackend']]]:
        """
        backend module configuration or `null`
        """
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="basicAuths")
    def basic_auths(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationBasicAuth']]]:
        """
        basic auth module configuration or `null`
        """
        return pulumi.get(self, "basic_auths")

    @property
    @pulumi.getter(name="circuitBreakers")
    def circuit_breakers(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationCircuitBreaker']]]:
        """
        circuit breaker module configuration or `null`
        """
        return pulumi.get(self, "circuit_breakers")

    @property
    @pulumi.getter
    def compressions(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationCompression']]]:
        """
        compression module configuration or `null`
        """
        return pulumi.get(self, "compressions")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipPolicies")
    def ip_policies(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationIpPolicy']]]:
        """
        ip policy module configuration or `null`
        """
        return pulumi.get(self, "ip_policies")

    @property
    @pulumi.getter
    def loggings(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationLogging']]]:
        """
        logging module configuration or `null`
        """
        return pulumi.get(self, "loggings")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationMutualTl']]]:
        """
        mutual TLS module configuration or `null`
        """
        return pulumi.get(self, "mutual_tls")

    @property
    @pulumi.getter
    def oauths(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationOauth']]]:
        """
        oauth module configuration or `null`
        """
        return pulumi.get(self, "oauths")

    @property
    @pulumi.getter
    def oidcs(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationOidc']]]:
        """
        oidc module configuration or `null`
        """
        return pulumi.get(self, "oidcs")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationRequestHeader']]]:
        """
        request headers module configuration or `null`
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationResponseHeader']]]:
        """
        response headers module configuration or `null`
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter
    def samls(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationSaml']]]:
        """
        saml module configuration or `null`
        """
        return pulumi.get(self, "samls")

    @property
    @pulumi.getter(name="tlsTerminations")
    def tls_terminations(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationTlsTermination']]]:
        """
        TLS termination module configuration or `null`
        """
        return pulumi.get(self, "tls_terminations")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="webhookValidations")
    def webhook_validations(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointConfigurationWebhookValidation']]]:
        """
        webhook validation module configuration or `null`
        """
        return pulumi.get(self, "webhook_validations")

