# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FailoverBackendArgs', 'FailoverBackend']

@pulumi.input_type
class FailoverBackendArgs:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FailoverBackend resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backends: the ids of the child backends in order
        :param pulumi.Input[str] created_at: timestamp when the backend was created, RFC 3339 format
        :param pulumi.Input[str] description: human-readable description of this backend. Optional
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this backend. Optional
        :param pulumi.Input[str] uri: URI of the FailoverBackend API resource
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the ids of the child backends in order
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        timestamp when the backend was created, RFC 3339 format
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this backend. Optional
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this backend. Optional
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the FailoverBackend API resource
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class _FailoverBackendState:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FailoverBackend resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backends: the ids of the child backends in order
        :param pulumi.Input[str] created_at: timestamp when the backend was created, RFC 3339 format
        :param pulumi.Input[str] description: human-readable description of this backend. Optional
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this backend. Optional
        :param pulumi.Input[str] uri: URI of the FailoverBackend API resource
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the ids of the child backends in order
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        timestamp when the backend was created, RFC 3339 format
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this backend. Optional
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this backend. Optional
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the FailoverBackend API resource
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


class FailoverBackend(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A Failover backend defines failover behavior within a list of referenced
         backends. Traffic is sent to the first backend in the list. If that backend
         is offline or no connection can be established, ngrok attempts to connect to
         the next backend in the list until one is successful.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.FailoverBackend("example",
            backends=["bkdhr_26rOyncxuCZ0JdIjYiEDGlsh1lO"],
            description="acme failover",
            metadata="{\\"environment\\": \\"staging\\"}")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backends: the ids of the child backends in order
        :param pulumi.Input[str] created_at: timestamp when the backend was created, RFC 3339 format
        :param pulumi.Input[str] description: human-readable description of this backend. Optional
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this backend. Optional
        :param pulumi.Input[str] uri: URI of the FailoverBackend API resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FailoverBackendArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Failover backend defines failover behavior within a list of referenced
         backends. Traffic is sent to the first backend in the list. If that backend
         is offline or no connection can be established, ngrok attempts to connect to
         the next backend in the list until one is successful.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.FailoverBackend("example",
            backends=["bkdhr_26rOyncxuCZ0JdIjYiEDGlsh1lO"],
            description="acme failover",
            metadata="{\\"environment\\": \\"staging\\"}")
        ```

        :param str resource_name: The name of the resource.
        :param FailoverBackendArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FailoverBackendArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FailoverBackendArgs.__new__(FailoverBackendArgs)

            __props__.__dict__["backends"] = backends
            __props__.__dict__["created_at"] = created_at
            __props__.__dict__["description"] = description
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["uri"] = uri
        super(FailoverBackend, __self__).__init__(
            'ngrok:index/failoverBackend:FailoverBackend',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            uri: Optional[pulumi.Input[str]] = None) -> 'FailoverBackend':
        """
        Get an existing FailoverBackend resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backends: the ids of the child backends in order
        :param pulumi.Input[str] created_at: timestamp when the backend was created, RFC 3339 format
        :param pulumi.Input[str] description: human-readable description of this backend. Optional
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this backend. Optional
        :param pulumi.Input[str] uri: URI of the FailoverBackend API resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FailoverBackendState.__new__(_FailoverBackendState)

        __props__.__dict__["backends"] = backends
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["uri"] = uri
        return FailoverBackend(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        the ids of the child backends in order
        """
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        timestamp when the backend was created, RFC 3339 format
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of this backend. Optional
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this backend. Optional
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[str]:
        """
        URI of the FailoverBackend API resource
        """
        return pulumi.get(self, "uri")

