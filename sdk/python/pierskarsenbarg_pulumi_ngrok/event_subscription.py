# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventSubscriptionArgs', 'EventSubscription']

@pulumi.input_type
class EventSubscriptionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]] = None):
        """
        The set of arguments for constructing a EventSubscription resource.
        :param pulumi.Input[str] description: Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A list of Event Destination IDs which should be used for this Event Subscription.
        :param pulumi.Input[str] metadata: Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        :param pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]] sources: Sources containing the types for which this event subscription will trigger
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Event Destination IDs which should be used for this Event Subscription.
        """
        return pulumi.get(self, "destination_ids")

    @destination_ids.setter
    def destination_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ids", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]]:
        """
        Sources containing the types for which this event subscription will trigger
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class _EventSubscriptionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]] = None):
        """
        Input properties used for looking up and filtering EventSubscription resources.
        :param pulumi.Input[str] description: Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A list of Event Destination IDs which should be used for this Event Subscription.
        :param pulumi.Input[str] metadata: Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        :param pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]] sources: Sources containing the types for which this event subscription will trigger
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Event Destination IDs which should be used for this Event Subscription.
        """
        return pulumi.get(self, "destination_ids")

    @destination_ids.setter
    def destination_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ids", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]]:
        """
        Sources containing the types for which this event subscription will trigger
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventSubscriptionSourceArgs']]]]):
        pulumi.set(self, "sources", value)


class EventSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventSubscriptionSourceArgs']]]]] = None,
                 __props__=None):
        """
        Create a EventSubscription resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A list of Event Destination IDs which should be used for this Event Subscription.
        :param pulumi.Input[str] metadata: Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventSubscriptionSourceArgs']]]] sources: Sources containing the types for which this event subscription will trigger
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EventSubscriptionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventSubscription resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventSubscriptionSourceArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventSubscriptionArgs.__new__(EventSubscriptionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["destination_ids"] = destination_ids
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["sources"] = sources
        super(EventSubscription, __self__).__init__(
            'ngrok:index/eventSubscription:EventSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventSubscriptionSourceArgs']]]]] = None) -> 'EventSubscription':
        """
        Get an existing EventSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ids: A list of Event Destination IDs which should be used for this Event Subscription.
        :param pulumi.Input[str] metadata: Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventSubscriptionSourceArgs']]]] sources: Sources containing the types for which this event subscription will trigger
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventSubscriptionState.__new__(_EventSubscriptionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["destination_ids"] = destination_ids
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["sources"] = sources
        return EventSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Arbitrary customer supplied information intended to be human readable. Optional, max 255 chars.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of Event Destination IDs which should be used for this Event Subscription.
        """
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        Arbitrary customer supplied information intended to be machine readable. Optional, max 4096 chars.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Optional[Sequence['outputs.EventSubscriptionSource']]]:
        """
        Sources containing the types for which this event subscription will trigger
        """
        return pulumi.get(self, "sources")

