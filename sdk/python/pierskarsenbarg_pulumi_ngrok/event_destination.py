# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventDestinationArgs', 'EventDestination']

@pulumi.input_type
class EventDestinationArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]]] = None,
                 verify_with_test_event: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a EventDestination resource.
        :param pulumi.Input[str] description: Human-readable description of the Event Destination. Optional, max 255 bytes.
        :param pulumi.Input[str] format: The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        :param pulumi.Input[str] metadata: Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]] targets: An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if verify_with_test_event is not None:
            pulumi.set(__self__, "verify_with_test_event", verify_with_test_event)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable description of the Event Destination. Optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]]]:
        """
        An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="verifyWithTestEvent")
    def verify_with_test_event(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_with_test_event")

    @verify_with_test_event.setter
    def verify_with_test_event(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_with_test_event", value)


@pulumi.input_type
class _EventDestinationState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]]] = None,
                 verify_with_test_event: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering EventDestination resources.
        :param pulumi.Input[str] description: Human-readable description of the Event Destination. Optional, max 255 bytes.
        :param pulumi.Input[str] format: The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        :param pulumi.Input[str] metadata: Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]] targets: An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if verify_with_test_event is not None:
            pulumi.set(__self__, "verify_with_test_event", verify_with_test_event)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable description of the Event Destination. Optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]]]:
        """
        An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventDestinationTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="verifyWithTestEvent")
    def verify_with_test_event(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_with_test_event")

    @verify_with_test_event.setter
    def verify_with_test_event(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_with_test_event", value)


class EventDestination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventDestinationTargetArgs']]]]] = None,
                 verify_with_test_event: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a EventDestination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Human-readable description of the Event Destination. Optional, max 255 bytes.
        :param pulumi.Input[str] format: The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        :param pulumi.Input[str] metadata: Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventDestinationTargetArgs']]]] targets: An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EventDestinationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventDestination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventDestinationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventDestinationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventDestinationTargetArgs']]]]] = None,
                 verify_with_test_event: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventDestinationArgs.__new__(EventDestinationArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["format"] = format
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["targets"] = targets
            __props__.__dict__["verify_with_test_event"] = verify_with_test_event
        super(EventDestination, __self__).__init__(
            'ngrok:index/eventDestination:EventDestination',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventDestinationTargetArgs']]]]] = None,
            verify_with_test_event: Optional[pulumi.Input[bool]] = None) -> 'EventDestination':
        """
        Get an existing EventDestination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Human-readable description of the Event Destination. Optional, max 255 bytes.
        :param pulumi.Input[str] format: The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        :param pulumi.Input[str] metadata: Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventDestinationTargetArgs']]]] targets: An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventDestinationState.__new__(_EventDestinationState)

        __props__.__dict__["description"] = description
        __props__.__dict__["format"] = format
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["targets"] = targets
        __props__.__dict__["verify_with_test_event"] = verify_with_test_event
        return EventDestination(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Human-readable description of the Event Destination. Optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[str]]:
        """
        The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Optional[Sequence['outputs.EventDestinationTarget']]]:
        """
        An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="verifyWithTestEvent")
    def verify_with_test_event(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "verify_with_test_event")

