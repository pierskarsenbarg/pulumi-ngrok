# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AgentIngressCertificateManagementPolicy',
    'EventDestinationTarget',
    'EventDestinationTargetCloudwatchLog',
    'EventDestinationTargetCloudwatchLogAuth',
    'EventDestinationTargetCloudwatchLogAuthCred',
    'EventDestinationTargetCloudwatchLogAuthRole',
    'EventDestinationTargetDatadog',
    'EventDestinationTargetDebug',
    'EventDestinationTargetFirehose',
    'EventDestinationTargetFirehoseAuth',
    'EventDestinationTargetFirehoseAuthCred',
    'EventDestinationTargetFirehoseAuthRole',
    'EventDestinationTargetKinese',
    'EventDestinationTargetKineseAuth',
    'EventDestinationTargetKineseAuthCred',
    'EventDestinationTargetKineseAuthRole',
    'EventSubscriptionSource',
    'ReservedDomainCertificateManagementPolicy',
    'TlsCertificateSubjectAlternativeName',
    'TunnelGroupBackendTunnel',
]

@pulumi.output_type
class AgentIngressCertificateManagementPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKeyType":
            suggest = "private_key_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentIngressCertificateManagementPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentIngressCertificateManagementPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentIngressCertificateManagementPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authority: Optional[str] = None,
                 private_key_type: Optional[str] = None):
        """
        :param str authority: certificate authority to request certificates from. The only supported value is letsencrypt.
        :param str private_key_type: type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)

    @property
    @pulumi.getter
    def authority(self) -> Optional[str]:
        """
        certificate authority to request certificates from. The only supported value is letsencrypt.
        """
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[str]:
        """
        type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        return pulumi.get(self, "private_key_type")


@pulumi.output_type
class EventDestinationTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudwatchLogs":
            suggest = "cloudwatch_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloudwatch_logs: Optional[Sequence['outputs.EventDestinationTargetCloudwatchLog']] = None,
                 datadogs: Optional[Sequence['outputs.EventDestinationTargetDatadog']] = None,
                 debugs: Optional[Sequence['outputs.EventDestinationTargetDebug']] = None,
                 firehoses: Optional[Sequence['outputs.EventDestinationTargetFirehose']] = None,
                 kineses: Optional[Sequence['outputs.EventDestinationTargetKinese']] = None):
        """
        :param Sequence['EventDestinationTargetCloudwatchLogArgs'] cloudwatch_logs: Configuration used to send events to Amazon CloudWatch Logs.
        :param Sequence['EventDestinationTargetDatadogArgs'] datadogs: Configuration used to send events to Datadog.
        :param Sequence['EventDestinationTargetDebugArgs'] debugs: Configuration used for internal debugging.
        :param Sequence['EventDestinationTargetFirehoseArgs'] firehoses: Configuration used to send events to Amazon Kinesis Data Firehose.
        :param Sequence['EventDestinationTargetKineseArgs'] kineses: Configuration used to send events to Amazon Kinesis.
        """
        if cloudwatch_logs is not None:
            pulumi.set(__self__, "cloudwatch_logs", cloudwatch_logs)
        if datadogs is not None:
            pulumi.set(__self__, "datadogs", datadogs)
        if debugs is not None:
            pulumi.set(__self__, "debugs", debugs)
        if firehoses is not None:
            pulumi.set(__self__, "firehoses", firehoses)
        if kineses is not None:
            pulumi.set(__self__, "kineses", kineses)

    @property
    @pulumi.getter(name="cloudwatchLogs")
    def cloudwatch_logs(self) -> Optional[Sequence['outputs.EventDestinationTargetCloudwatchLog']]:
        """
        Configuration used to send events to Amazon CloudWatch Logs.
        """
        return pulumi.get(self, "cloudwatch_logs")

    @property
    @pulumi.getter
    def datadogs(self) -> Optional[Sequence['outputs.EventDestinationTargetDatadog']]:
        """
        Configuration used to send events to Datadog.
        """
        return pulumi.get(self, "datadogs")

    @property
    @pulumi.getter
    def debugs(self) -> Optional[Sequence['outputs.EventDestinationTargetDebug']]:
        """
        Configuration used for internal debugging.
        """
        return pulumi.get(self, "debugs")

    @property
    @pulumi.getter
    def firehoses(self) -> Optional[Sequence['outputs.EventDestinationTargetFirehose']]:
        """
        Configuration used to send events to Amazon Kinesis Data Firehose.
        """
        return pulumi.get(self, "firehoses")

    @property
    @pulumi.getter
    def kineses(self) -> Optional[Sequence['outputs.EventDestinationTargetKinese']]:
        """
        Configuration used to send events to Amazon Kinesis.
        """
        return pulumi.get(self, "kineses")


@pulumi.output_type
class EventDestinationTargetCloudwatchLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupArn":
            suggest = "log_group_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetCloudwatchLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetCloudwatchLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetCloudwatchLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auths: Optional[Sequence['outputs.EventDestinationTargetCloudwatchLogAuth']] = None,
                 log_group_arn: Optional[str] = None):
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if log_group_arn is not None:
            pulumi.set(__self__, "log_group_arn", log_group_arn)

    @property
    @pulumi.getter
    def auths(self) -> Optional[Sequence['outputs.EventDestinationTargetCloudwatchLogAuth']]:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> Optional[str]:
        return pulumi.get(self, "log_group_arn")


@pulumi.output_type
class EventDestinationTargetCloudwatchLogAuth(dict):
    def __init__(__self__, *,
                 creds: Optional[Sequence['outputs.EventDestinationTargetCloudwatchLogAuthCred']] = None,
                 roles: Optional[Sequence['outputs.EventDestinationTargetCloudwatchLogAuthRole']] = None):
        if creds is not None:
            pulumi.set(__self__, "creds", creds)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def creds(self) -> Optional[Sequence['outputs.EventDestinationTargetCloudwatchLogAuthCred']]:
        return pulumi.get(self, "creds")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.EventDestinationTargetCloudwatchLogAuthRole']]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class EventDestinationTargetCloudwatchLogAuthCred(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetCloudwatchLogAuthCred. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetCloudwatchLogAuthCred.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetCloudwatchLogAuthCred.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")


@pulumi.output_type
class EventDestinationTargetCloudwatchLogAuthRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetCloudwatchLogAuthRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetCloudwatchLogAuthRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetCloudwatchLogAuthRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str):
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class EventDestinationTargetDatadog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetDatadog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetDatadog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetDatadog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 ddsite: Optional[str] = None,
                 ddtags: Optional[str] = None,
                 service: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if ddsite is not None:
            pulumi.set(__self__, "ddsite", ddsite)
        if ddtags is not None:
            pulumi.set(__self__, "ddtags", ddtags)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def ddsite(self) -> Optional[str]:
        return pulumi.get(self, "ddsite")

    @property
    @pulumi.getter
    def ddtags(self) -> Optional[str]:
        return pulumi.get(self, "ddtags")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class EventDestinationTargetDebug(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callbackUrl":
            suggest = "callback_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetDebug. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetDebug.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetDebug.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback_url: Optional[str] = None,
                 log: Optional[bool] = None):
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[str]:
        return pulumi.get(self, "callback_url")

    @property
    @pulumi.getter
    def log(self) -> Optional[bool]:
        return pulumi.get(self, "log")


@pulumi.output_type
class EventDestinationTargetFirehose(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliveryStreamArn":
            suggest = "delivery_stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetFirehose. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetFirehose.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetFirehose.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auths: Optional[Sequence['outputs.EventDestinationTargetFirehoseAuth']] = None,
                 delivery_stream_arn: Optional[str] = None):
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if delivery_stream_arn is not None:
            pulumi.set(__self__, "delivery_stream_arn", delivery_stream_arn)

    @property
    @pulumi.getter
    def auths(self) -> Optional[Sequence['outputs.EventDestinationTargetFirehoseAuth']]:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> Optional[str]:
        return pulumi.get(self, "delivery_stream_arn")


@pulumi.output_type
class EventDestinationTargetFirehoseAuth(dict):
    def __init__(__self__, *,
                 creds: Optional[Sequence['outputs.EventDestinationTargetFirehoseAuthCred']] = None,
                 roles: Optional[Sequence['outputs.EventDestinationTargetFirehoseAuthRole']] = None):
        if creds is not None:
            pulumi.set(__self__, "creds", creds)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def creds(self) -> Optional[Sequence['outputs.EventDestinationTargetFirehoseAuthCred']]:
        return pulumi.get(self, "creds")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.EventDestinationTargetFirehoseAuthRole']]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class EventDestinationTargetFirehoseAuthCred(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetFirehoseAuthCred. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetFirehoseAuthCred.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetFirehoseAuthCred.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")


@pulumi.output_type
class EventDestinationTargetFirehoseAuthRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetFirehoseAuthRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetFirehoseAuthRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetFirehoseAuthRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str):
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class EventDestinationTargetKinese(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetKinese. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetKinese.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetKinese.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auths: Optional[Sequence['outputs.EventDestinationTargetKineseAuth']] = None,
                 stream_arn: Optional[str] = None):
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if stream_arn is not None:
            pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter
    def auths(self) -> Optional[Sequence['outputs.EventDestinationTargetKineseAuth']]:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> Optional[str]:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class EventDestinationTargetKineseAuth(dict):
    def __init__(__self__, *,
                 creds: Optional[Sequence['outputs.EventDestinationTargetKineseAuthCred']] = None,
                 roles: Optional[Sequence['outputs.EventDestinationTargetKineseAuthRole']] = None):
        if creds is not None:
            pulumi.set(__self__, "creds", creds)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def creds(self) -> Optional[Sequence['outputs.EventDestinationTargetKineseAuthCred']]:
        return pulumi.get(self, "creds")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.EventDestinationTargetKineseAuthRole']]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class EventDestinationTargetKineseAuthCred(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetKineseAuthCred. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetKineseAuthCred.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetKineseAuthCred.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")


@pulumi.output_type
class EventDestinationTargetKineseAuthRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDestinationTargetKineseAuthRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDestinationTargetKineseAuthRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDestinationTargetKineseAuthRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str):
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class EventSubscriptionSource(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence[str]] = None,
                 filter: Optional[str] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        :param Sequence[str] fields: TODO
        :param str filter: TODO
        :param str type: Type of event for which an event subscription will trigger
        :param str uri: URI of the Event Source API resource.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        """
        TODO
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        TODO
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of event for which an event subscription will trigger
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        URI of the Event Source API resource.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class ReservedDomainCertificateManagementPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKeyType":
            suggest = "private_key_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReservedDomainCertificateManagementPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReservedDomainCertificateManagementPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReservedDomainCertificateManagementPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authority: Optional[str] = None,
                 private_key_type: Optional[str] = None):
        """
        :param str authority: certificate authority to request certificates from. The only supported value is letsencrypt.
        :param str private_key_type: type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)

    @property
    @pulumi.getter
    def authority(self) -> Optional[str]:
        """
        certificate authority to request certificates from. The only supported value is letsencrypt.
        """
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[str]:
        """
        type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
        """
        return pulumi.get(self, "private_key_type")


@pulumi.output_type
class TlsCertificateSubjectAlternativeName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsNames":
            suggest = "dns_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TlsCertificateSubjectAlternativeName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TlsCertificateSubjectAlternativeName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TlsCertificateSubjectAlternativeName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_names: Optional[Sequence[str]] = None,
                 ips: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] dns_names: set of additional domains (including wildcards) this TLS certificate is valid for
        :param Sequence[str] ips: set of IP addresses this TLS certificate is also valid for
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        set of additional domains (including wildcards) this TLS certificate is valid for
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        """
        set of IP addresses this TLS certificate is also valid for
        """
        return pulumi.get(self, "ips")


@pulumi.output_type
class TunnelGroupBackendTunnel(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        :param str id: a resource identifier
        :param str uri: a uri for locating a resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        a resource identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        a uri for locating a resource
        """
        return pulumi.get(self, "uri")


