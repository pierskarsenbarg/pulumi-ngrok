# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReservedDomainArgs', 'ReservedDomain']

@pulumi.input_type
class ReservedDomainArgs:
    def __init__(__self__, *,
                 acme_challenge_cname_target: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_management_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]]] = None,
                 cname_target: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 https_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReservedDomain resource.
        :param pulumi.Input[str] acme_challenge_cname_target: DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        :param pulumi.Input[str] certificate_id: ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        :param pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]] certificate_management_policies: configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        :param pulumi.Input[str] cname_target: DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        :param pulumi.Input[str] description: human-readable description of what this reserved domain will be used for
        :param pulumi.Input[str] http_endpoint_configuration_id: ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        :param pulumi.Input[str] https_endpoint_configuration_id: ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        :param pulumi.Input[str] name: the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        :param pulumi.Input[str] region: reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        if acme_challenge_cname_target is not None:
            pulumi.set(__self__, "acme_challenge_cname_target", acme_challenge_cname_target)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_management_policies is not None:
            pulumi.set(__self__, "certificate_management_policies", certificate_management_policies)
        if cname_target is not None:
            pulumi.set(__self__, "cname_target", cname_target)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if http_endpoint_configuration_id is not None:
            pulumi.set(__self__, "http_endpoint_configuration_id", http_endpoint_configuration_id)
        if https_endpoint_configuration_id is not None:
            pulumi.set(__self__, "https_endpoint_configuration_id", https_endpoint_configuration_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="acmeChallengeCnameTarget")
    def acme_challenge_cname_target(self) -> Optional[pulumi.Input[str]]:
        """
        DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        """
        return pulumi.get(self, "acme_challenge_cname_target")

    @acme_challenge_cname_target.setter
    def acme_challenge_cname_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_challenge_cname_target", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateManagementPolicies")
    def certificate_management_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]]]:
        """
        configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        """
        return pulumi.get(self, "certificate_management_policies")

    @certificate_management_policies.setter
    def certificate_management_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]]]):
        pulumi.set(self, "certificate_management_policies", value)

    @property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> Optional[pulumi.Input[str]]:
        """
        DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        """
        return pulumi.get(self, "cname_target")

    @cname_target.setter
    def cname_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_target", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of what this reserved domain will be used for
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="httpEndpointConfigurationId")
    def http_endpoint_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        """
        return pulumi.get(self, "http_endpoint_configuration_id")

    @http_endpoint_configuration_id.setter
    def http_endpoint_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint_configuration_id", value)

    @property
    @pulumi.getter(name="httpsEndpointConfigurationId")
    def https_endpoint_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        """
        return pulumi.get(self, "https_endpoint_configuration_id")

    @https_endpoint_configuration_id.setter
    def https_endpoint_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint_configuration_id", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ReservedDomainState:
    def __init__(__self__, *,
                 acme_challenge_cname_target: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_management_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]]] = None,
                 cname_target: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 http_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 https_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReservedDomain resources.
        :param pulumi.Input[str] acme_challenge_cname_target: DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        :param pulumi.Input[str] certificate_id: ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        :param pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]] certificate_management_policies: configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        :param pulumi.Input[str] cname_target: DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        :param pulumi.Input[str] description: human-readable description of what this reserved domain will be used for
        :param pulumi.Input[str] domain: hostname of the reserved domain
        :param pulumi.Input[str] http_endpoint_configuration_id: ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        :param pulumi.Input[str] https_endpoint_configuration_id: ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        :param pulumi.Input[str] name: the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        :param pulumi.Input[str] region: reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        if acme_challenge_cname_target is not None:
            pulumi.set(__self__, "acme_challenge_cname_target", acme_challenge_cname_target)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_management_policies is not None:
            pulumi.set(__self__, "certificate_management_policies", certificate_management_policies)
        if cname_target is not None:
            pulumi.set(__self__, "cname_target", cname_target)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if http_endpoint_configuration_id is not None:
            pulumi.set(__self__, "http_endpoint_configuration_id", http_endpoint_configuration_id)
        if https_endpoint_configuration_id is not None:
            pulumi.set(__self__, "https_endpoint_configuration_id", https_endpoint_configuration_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="acmeChallengeCnameTarget")
    def acme_challenge_cname_target(self) -> Optional[pulumi.Input[str]]:
        """
        DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        """
        return pulumi.get(self, "acme_challenge_cname_target")

    @acme_challenge_cname_target.setter
    def acme_challenge_cname_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_challenge_cname_target", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateManagementPolicies")
    def certificate_management_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]]]:
        """
        configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        """
        return pulumi.get(self, "certificate_management_policies")

    @certificate_management_policies.setter
    def certificate_management_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReservedDomainCertificateManagementPolicyArgs']]]]):
        pulumi.set(self, "certificate_management_policies", value)

    @property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> Optional[pulumi.Input[str]]:
        """
        DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        """
        return pulumi.get(self, "cname_target")

    @cname_target.setter
    def cname_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_target", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of what this reserved domain will be used for
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        hostname of the reserved domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="httpEndpointConfigurationId")
    def http_endpoint_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        """
        return pulumi.get(self, "http_endpoint_configuration_id")

    @http_endpoint_configuration_id.setter
    def http_endpoint_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint_configuration_id", value)

    @property
    @pulumi.getter(name="httpsEndpointConfigurationId")
    def https_endpoint_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        """
        return pulumi.get(self, "https_endpoint_configuration_id")

    @https_endpoint_configuration_id.setter
    def https_endpoint_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint_configuration_id", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class ReservedDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acme_challenge_cname_target: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_management_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReservedDomainCertificateManagementPolicyArgs']]]]] = None,
                 cname_target: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 https_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Reserved Domains are hostnames that you can listen for traffic on. Domains
         can be used to listen for http, https or tls traffic. You may use a domain
         that you own by creating a CNAME record specified in the returned resource.
         This CNAME record points traffic for that domain to ngrok's edge servers.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.ReservedDomain("example",
            certificate_id="cert_25auGELSEngiae3wzmLLesiZn8h",
            region="us")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acme_challenge_cname_target: DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        :param pulumi.Input[str] certificate_id: ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReservedDomainCertificateManagementPolicyArgs']]]] certificate_management_policies: configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        :param pulumi.Input[str] cname_target: DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        :param pulumi.Input[str] description: human-readable description of what this reserved domain will be used for
        :param pulumi.Input[str] http_endpoint_configuration_id: ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        :param pulumi.Input[str] https_endpoint_configuration_id: ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        :param pulumi.Input[str] name: the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        :param pulumi.Input[str] region: reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ReservedDomainArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Reserved Domains are hostnames that you can listen for traffic on. Domains
         can be used to listen for http, https or tls traffic. You may use a domain
         that you own by creating a CNAME record specified in the returned resource.
         This CNAME record points traffic for that domain to ngrok's edge servers.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.ReservedDomain("example",
            certificate_id="cert_25auGELSEngiae3wzmLLesiZn8h",
            region="us")
        ```

        :param str resource_name: The name of the resource.
        :param ReservedDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReservedDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acme_challenge_cname_target: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_management_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReservedDomainCertificateManagementPolicyArgs']]]]] = None,
                 cname_target: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 https_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReservedDomainArgs.__new__(ReservedDomainArgs)

            __props__.__dict__["acme_challenge_cname_target"] = acme_challenge_cname_target
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["certificate_management_policies"] = certificate_management_policies
            __props__.__dict__["cname_target"] = cname_target
            __props__.__dict__["description"] = description
            __props__.__dict__["http_endpoint_configuration_id"] = http_endpoint_configuration_id
            __props__.__dict__["https_endpoint_configuration_id"] = https_endpoint_configuration_id
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["domain"] = None
        super(ReservedDomain, __self__).__init__(
            'ngrok:index/reservedDomain:ReservedDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acme_challenge_cname_target: Optional[pulumi.Input[str]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            certificate_management_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReservedDomainCertificateManagementPolicyArgs']]]]] = None,
            cname_target: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            http_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
            https_endpoint_configuration_id: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'ReservedDomain':
        """
        Get an existing ReservedDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acme_challenge_cname_target: DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        :param pulumi.Input[str] certificate_id: ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReservedDomainCertificateManagementPolicyArgs']]]] certificate_management_policies: configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        :param pulumi.Input[str] cname_target: DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        :param pulumi.Input[str] description: human-readable description of what this reserved domain will be used for
        :param pulumi.Input[str] domain: hostname of the reserved domain
        :param pulumi.Input[str] http_endpoint_configuration_id: ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        :param pulumi.Input[str] https_endpoint_configuration_id: ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        :param pulumi.Input[str] name: the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        :param pulumi.Input[str] region: reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReservedDomainState.__new__(_ReservedDomainState)

        __props__.__dict__["acme_challenge_cname_target"] = acme_challenge_cname_target
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["certificate_management_policies"] = certificate_management_policies
        __props__.__dict__["cname_target"] = cname_target
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["http_endpoint_configuration_id"] = http_endpoint_configuration_id
        __props__.__dict__["https_endpoint_configuration_id"] = https_endpoint_configuration_id
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return ReservedDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acmeChallengeCnameTarget")
    def acme_challenge_cname_target(self) -> pulumi.Output[str]:
        """
        DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        """
        return pulumi.get(self, "acme_challenge_cname_target")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateManagementPolicies")
    def certificate_management_policies(self) -> pulumi.Output[Optional[Sequence['outputs.ReservedDomainCertificateManagementPolicy']]]:
        """
        configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        """
        return pulumi.get(self, "certificate_management_policies")

    @property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> pulumi.Output[str]:
        """
        DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        """
        return pulumi.get(self, "cname_target")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of what this reserved domain will be used for
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        hostname of the reserved domain
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="httpEndpointConfigurationId")
    def http_endpoint_configuration_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        """
        return pulumi.get(self, "http_endpoint_configuration_id")

    @property
    @pulumi.getter(name="httpsEndpointConfigurationId")
    def https_endpoint_configuration_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        """
        return pulumi.get(self, "https_endpoint_configuration_id")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        """
        return pulumi.get(self, "region")

