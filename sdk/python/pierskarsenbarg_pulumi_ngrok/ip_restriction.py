# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IpRestrictionArgs', 'IpRestriction']

@pulumi.input_type
class IpRestrictionArgs:
    def __init__(__self__, *,
                 ip_policy_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enforced: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IpRestriction resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_policy_ids: the set of IP policy identifiers that are used to enforce the restriction
        :param pulumi.Input[str] type: the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        :param pulumi.Input[str] description: human-readable description of this IP restriction. optional, max 255 bytes.
        :param pulumi.Input[bool] enforced: true if the IP restriction will be enforced. if false, only warnings will be issued
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        """
        pulumi.set(__self__, "ip_policy_ids", ip_policy_ids)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enforced is not None:
            pulumi.set(__self__, "enforced", enforced)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="ipPolicyIds")
    def ip_policy_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        the set of IP policy identifiers that are used to enforce the restriction
        """
        return pulumi.get(self, "ip_policy_ids")

    @ip_policy_ids.setter
    def ip_policy_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ip_policy_ids", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this IP restriction. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        true if the IP restriction will be enforced. if false, only warnings will be issued
        """
        return pulumi.get(self, "enforced")

    @enforced.setter
    def enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforced", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class _IpRestrictionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enforced: Optional[pulumi.Input[bool]] = None,
                 ip_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpRestriction resources.
        :param pulumi.Input[str] description: human-readable description of this IP restriction. optional, max 255 bytes.
        :param pulumi.Input[bool] enforced: true if the IP restriction will be enforced. if false, only warnings will be issued
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_policy_ids: the set of IP policy identifiers that are used to enforce the restriction
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        :param pulumi.Input[str] type: the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enforced is not None:
            pulumi.set(__self__, "enforced", enforced)
        if ip_policy_ids is not None:
            pulumi.set(__self__, "ip_policy_ids", ip_policy_ids)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        human-readable description of this IP restriction. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        true if the IP restriction will be enforced. if false, only warnings will be issued
        """
        return pulumi.get(self, "enforced")

    @enforced.setter
    def enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforced", value)

    @property
    @pulumi.getter(name="ipPolicyIds")
    def ip_policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the set of IP policy identifiers that are used to enforce the restriction
        """
        return pulumi.get(self, "ip_policy_ids")

    @ip_policy_ids.setter
    def ip_policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_policy_ids", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class IpRestriction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enforced: Optional[pulumi.Input[bool]] = None,
                 ip_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An IP restriction is a restriction placed on the CIDRs that are allowed to
         initiate traffic to a specific aspect of your ngrok account. An IP
         restriction has a type which defines the ingress it applies to. IP
         restrictions can be used to enforce the source IPs that can make API
         requests, log in to the dashboard, start ngrok agents, and connect to your
         public-facing endpoints.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.IpRestriction("example",
            ip_policy_ids=["ipp_25auGwa4eEWUeCOBfCZkwtwqFey"],
            type="dashboard")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: human-readable description of this IP restriction. optional, max 255 bytes.
        :param pulumi.Input[bool] enforced: true if the IP restriction will be enforced. if false, only warnings will be issued
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_policy_ids: the set of IP policy identifiers that are used to enforce the restriction
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        :param pulumi.Input[str] type: the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpRestrictionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An IP restriction is a restriction placed on the CIDRs that are allowed to
         initiate traffic to a specific aspect of your ngrok account. An IP
         restriction has a type which defines the ingress it applies to. IP
         restrictions can be used to enforce the source IPs that can make API
         requests, log in to the dashboard, start ngrok agents, and connect to your
         public-facing endpoints.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_ngrok as ngrok

        example = ngrok.IpRestriction("example",
            ip_policy_ids=["ipp_25auGwa4eEWUeCOBfCZkwtwqFey"],
            type="dashboard")
        ```

        :param str resource_name: The name of the resource.
        :param IpRestrictionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpRestrictionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enforced: Optional[pulumi.Input[bool]] = None,
                 ip_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpRestrictionArgs.__new__(IpRestrictionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enforced"] = enforced
            if ip_policy_ids is None and not opts.urn:
                raise TypeError("Missing required property 'ip_policy_ids'")
            __props__.__dict__["ip_policy_ids"] = ip_policy_ids
            __props__.__dict__["metadata"] = metadata
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(IpRestriction, __self__).__init__(
            'ngrok:index/ipRestriction:IpRestriction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enforced: Optional[pulumi.Input[bool]] = None,
            ip_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'IpRestriction':
        """
        Get an existing IpRestriction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: human-readable description of this IP restriction. optional, max 255 bytes.
        :param pulumi.Input[bool] enforced: true if the IP restriction will be enforced. if false, only warnings will be issued
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_policy_ids: the set of IP policy identifiers that are used to enforce the restriction
        :param pulumi.Input[str] metadata: arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        :param pulumi.Input[str] type: the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpRestrictionState.__new__(_IpRestrictionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enforced"] = enforced
        __props__.__dict__["ip_policy_ids"] = ip_policy_ids
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["type"] = type
        return IpRestriction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        human-readable description of this IP restriction. optional, max 255 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enforced(self) -> pulumi.Output[Optional[bool]]:
        """
        true if the IP restriction will be enforced. if false, only warnings will be issued
        """
        return pulumi.get(self, "enforced")

    @property
    @pulumi.getter(name="ipPolicyIds")
    def ip_policy_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        the set of IP policy identifiers that are used to enforce the restriction
        """
        return pulumi.get(self, "ip_policy_ids")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
        """
        return pulumi.get(self, "type")

