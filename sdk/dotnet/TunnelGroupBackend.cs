// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok
{
    /// <summary>
    /// A Tunnel Group Backend balances traffic among all online tunnels that match
    ///  a label selector.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ngrok = PiersKarsenbarg.Ngrok;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ngrok.TunnelGroupBackend("example", new()
    ///     {
    ///         Description = "acme tunnel group",
    ///         Labels = 
    ///         {
    ///             { "baz", "qux" },
    ///             { "foo", "bar" },
    ///         },
    ///         Metadata = "{\"environment\": \"staging\"}",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NgrokResourceType("ngrok:index/tunnelGroupBackend:TunnelGroupBackend")]
    public partial class TunnelGroupBackend : global::Pulumi.CustomResource
    {
        /// <summary>
        /// timestamp when the backend was created, RFC 3339 format
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// human-readable description of this backend. Optional
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// labels to watch for tunnels on, e.g. app-&gt;foo, dc-&gt;bar
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// arbitrary user-defined machine-readable data of this backend. Optional
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// tunnels matching this backend
        /// </summary>
        [Output("tunnels")]
        public Output<ImmutableArray<Outputs.TunnelGroupBackendTunnel>> Tunnels { get; private set; } = null!;

        /// <summary>
        /// URI of the TunnelGroupBackend API resource
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a TunnelGroupBackend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TunnelGroupBackend(string name, TunnelGroupBackendArgs? args = null, CustomResourceOptions? options = null)
            : base("ngrok:index/tunnelGroupBackend:TunnelGroupBackend", name, args ?? new TunnelGroupBackendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TunnelGroupBackend(string name, Input<string> id, TunnelGroupBackendState? state = null, CustomResourceOptions? options = null)
            : base("ngrok:index/tunnelGroupBackend:TunnelGroupBackend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-ngrok",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TunnelGroupBackend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TunnelGroupBackend Get(string name, Input<string> id, TunnelGroupBackendState? state = null, CustomResourceOptions? options = null)
        {
            return new TunnelGroupBackend(name, id, state, options);
        }
    }

    public sealed class TunnelGroupBackendArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// timestamp when the backend was created, RFC 3339 format
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// human-readable description of this backend. Optional
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// labels to watch for tunnels on, e.g. app-&gt;foo, dc-&gt;bar
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this backend. Optional
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("tunnels")]
        private InputList<Inputs.TunnelGroupBackendTunnelArgs>? _tunnels;

        /// <summary>
        /// tunnels matching this backend
        /// </summary>
        public InputList<Inputs.TunnelGroupBackendTunnelArgs> Tunnels
        {
            get => _tunnels ?? (_tunnels = new InputList<Inputs.TunnelGroupBackendTunnelArgs>());
            set => _tunnels = value;
        }

        /// <summary>
        /// URI of the TunnelGroupBackend API resource
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public TunnelGroupBackendArgs()
        {
        }
        public static new TunnelGroupBackendArgs Empty => new TunnelGroupBackendArgs();
    }

    public sealed class TunnelGroupBackendState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// timestamp when the backend was created, RFC 3339 format
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// human-readable description of this backend. Optional
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// labels to watch for tunnels on, e.g. app-&gt;foo, dc-&gt;bar
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this backend. Optional
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("tunnels")]
        private InputList<Inputs.TunnelGroupBackendTunnelGetArgs>? _tunnels;

        /// <summary>
        /// tunnels matching this backend
        /// </summary>
        public InputList<Inputs.TunnelGroupBackendTunnelGetArgs> Tunnels
        {
            get => _tunnels ?? (_tunnels = new InputList<Inputs.TunnelGroupBackendTunnelGetArgs>());
            set => _tunnels = value;
        }

        /// <summary>
        /// URI of the TunnelGroupBackend API resource
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public TunnelGroupBackendState()
        {
        }
        public static new TunnelGroupBackendState Empty => new TunnelGroupBackendState();
    }
}
