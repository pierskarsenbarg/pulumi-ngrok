// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok
{
    /// <summary>
    /// Reserved Domains are hostnames that you can listen for traffic on. Domains
    ///  can be used to listen for http, https or tls traffic. You may use a domain
    ///  that you own by creating a CNAME record specified in the returned resource.
    ///  This CNAME record points traffic for that domain to ngrok's edge servers.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ngrok = PiersKarsenbarg.Ngrok;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ngrok.ReservedDomain("example", new()
    ///     {
    ///         CertificateId = "cert_26rOxyrxCJlOc0frz7MK0HQjRvd",
    ///         Region = "us",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NgrokResourceType("ngrok:index/reservedDomain:ReservedDomain")]
    public partial class ReservedDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        /// </summary>
        [Output("acmeChallengeCnameTarget")]
        public Output<string> AcmeChallengeCnameTarget { get; private set; } = null!;

        /// <summary>
        /// ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        /// </summary>
        [Output("certificateManagementPolicies")]
        public Output<ImmutableArray<Outputs.ReservedDomainCertificateManagementPolicy>> CertificateManagementPolicies { get; private set; } = null!;

        /// <summary>
        /// DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        /// </summary>
        [Output("cnameTarget")]
        public Output<string> CnameTarget { get; private set; } = null!;

        /// <summary>
        /// human-readable description of what this reserved domain will be used for
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// hostname of the reserved domain
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        /// </summary>
        [Output("httpEndpointConfigurationId")]
        public Output<string?> HttpEndpointConfigurationId { get; private set; } = null!;

        /// <summary>
        /// ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        /// </summary>
        [Output("httpsEndpointConfigurationId")]
        public Output<string?> HttpsEndpointConfigurationId { get; private set; } = null!;

        /// <summary>
        /// arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;


        /// <summary>
        /// Create a ReservedDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReservedDomain(string name, ReservedDomainArgs? args = null, CustomResourceOptions? options = null)
            : base("ngrok:index/reservedDomain:ReservedDomain", name, args ?? new ReservedDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReservedDomain(string name, Input<string> id, ReservedDomainState? state = null, CustomResourceOptions? options = null)
            : base("ngrok:index/reservedDomain:ReservedDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-ngrok",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReservedDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReservedDomain Get(string name, Input<string> id, ReservedDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new ReservedDomain(name, id, state, options);
        }
    }

    public sealed class ReservedDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        /// </summary>
        [Input("acmeChallengeCnameTarget")]
        public Input<string>? AcmeChallengeCnameTarget { get; set; }

        /// <summary>
        /// ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("certificateManagementPolicies")]
        private InputList<Inputs.ReservedDomainCertificateManagementPolicyArgs>? _certificateManagementPolicies;

        /// <summary>
        /// configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        /// </summary>
        public InputList<Inputs.ReservedDomainCertificateManagementPolicyArgs> CertificateManagementPolicies
        {
            get => _certificateManagementPolicies ?? (_certificateManagementPolicies = new InputList<Inputs.ReservedDomainCertificateManagementPolicyArgs>());
            set => _certificateManagementPolicies = value;
        }

        /// <summary>
        /// DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        /// </summary>
        [Input("cnameTarget")]
        public Input<string>? CnameTarget { get; set; }

        /// <summary>
        /// human-readable description of what this reserved domain will be used for
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// hostname of the reserved domain
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        /// </summary>
        [Input("httpEndpointConfigurationId")]
        public Input<string>? HttpEndpointConfigurationId { get; set; }

        /// <summary>
        /// ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        /// </summary>
        [Input("httpsEndpointConfigurationId")]
        public Input<string>? HttpsEndpointConfigurationId { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public ReservedDomainArgs()
        {
        }
        public static new ReservedDomainArgs Empty => new ReservedDomainArgs();
    }

    public sealed class ReservedDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
        /// </summary>
        [Input("acmeChallengeCnameTarget")]
        public Input<string>? AcmeChallengeCnameTarget { get; set; }

        /// <summary>
        /// ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificate_management_policy`.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("certificateManagementPolicies")]
        private InputList<Inputs.ReservedDomainCertificateManagementPolicyGetArgs>? _certificateManagementPolicies;

        /// <summary>
        /// configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
        /// </summary>
        public InputList<Inputs.ReservedDomainCertificateManagementPolicyGetArgs> CertificateManagementPolicies
        {
            get => _certificateManagementPolicies ?? (_certificateManagementPolicies = new InputList<Inputs.ReservedDomainCertificateManagementPolicyGetArgs>());
            set => _certificateManagementPolicies = value;
        }

        /// <summary>
        /// DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
        /// </summary>
        [Input("cnameTarget")]
        public Input<string>? CnameTarget { get; set; }

        /// <summary>
        /// human-readable description of what this reserved domain will be used for
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// hostname of the reserved domain
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
        /// </summary>
        [Input("httpEndpointConfigurationId")]
        public Input<string>? HttpEndpointConfigurationId { get; set; }

        /// <summary>
        /// ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
        /// </summary>
        [Input("httpsEndpointConfigurationId")]
        public Input<string>? HttpsEndpointConfigurationId { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public ReservedDomainState()
        {
        }
        public static new ReservedDomainState Empty => new ReservedDomainState();
    }
}
