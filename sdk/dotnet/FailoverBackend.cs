// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok
{
    /// <summary>
    /// A Failover backend defines failover behavior within a list of referenced
    ///  backends. Traffic is sent to the first backend in the list. If that backend
    ///  is offline or no connection can be established, ngrok attempts to connect to
    ///  the next backend in the list until one is successful.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ngrok = PiersKarsenbarg.Ngrok;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ngrok.FailoverBackend("example", new()
    ///     {
    ///         Backends = new[]
    ///         {
    ///             "bkdhr_26rOyncxuCZ0JdIjYiEDGlsh1lO",
    ///         },
    ///         Description = "acme failover",
    ///         Metadata = "{\"environment\": \"staging\"}",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NgrokResourceType("ngrok:index/failoverBackend:FailoverBackend")]
    public partial class FailoverBackend : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the ids of the child backends in order
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<string>> Backends { get; private set; } = null!;

        /// <summary>
        /// timestamp when the backend was created, RFC 3339 format
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// human-readable description of this backend. Optional
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// arbitrary user-defined machine-readable data of this backend. Optional
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// URI of the FailoverBackend API resource
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a FailoverBackend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FailoverBackend(string name, FailoverBackendArgs? args = null, CustomResourceOptions? options = null)
            : base("ngrok:index/failoverBackend:FailoverBackend", name, args ?? new FailoverBackendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FailoverBackend(string name, Input<string> id, FailoverBackendState? state = null, CustomResourceOptions? options = null)
            : base("ngrok:index/failoverBackend:FailoverBackend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-ngrok",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FailoverBackend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FailoverBackend Get(string name, Input<string> id, FailoverBackendState? state = null, CustomResourceOptions? options = null)
        {
            return new FailoverBackend(name, id, state, options);
        }
    }

    public sealed class FailoverBackendArgs : global::Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<string>? _backends;

        /// <summary>
        /// the ids of the child backends in order
        /// </summary>
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        /// <summary>
        /// timestamp when the backend was created, RFC 3339 format
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// human-readable description of this backend. Optional
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this backend. Optional
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// URI of the FailoverBackend API resource
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public FailoverBackendArgs()
        {
        }
        public static new FailoverBackendArgs Empty => new FailoverBackendArgs();
    }

    public sealed class FailoverBackendState : global::Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<string>? _backends;

        /// <summary>
        /// the ids of the child backends in order
        /// </summary>
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        /// <summary>
        /// timestamp when the backend was created, RFC 3339 format
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// human-readable description of this backend. Optional
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this backend. Optional
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// URI of the FailoverBackend API resource
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public FailoverBackendState()
        {
        }
        public static new FailoverBackendState Empty => new FailoverBackendState();
    }
}
