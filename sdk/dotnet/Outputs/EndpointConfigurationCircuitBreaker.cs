// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok.Outputs
{

    [OutputType]
    public sealed class EndpointConfigurationCircuitBreaker
    {
        /// <summary>
        /// `true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Error threshold percentage should be between 0 - 1.0, not 0-100.0
        /// </summary>
        public readonly double? ErrorThresholdPercentage;
        /// <summary>
        /// Integer number of buckets into which metrics are retained. Max 128.
        /// </summary>
        public readonly int? NumBuckets;
        /// <summary>
        /// Integer number of seconds in the statistical rolling window that metrics are retained for.
        /// </summary>
        public readonly int? RollingWindow;
        /// <summary>
        /// Integer number of seconds after which the circuit is tripped to wait before re-evaluating upstream health
        /// </summary>
        public readonly int? TrippedDuration;
        /// <summary>
        /// Integer number of requests in a rolling window that will trip the circuit. Helpful if traffic volume is low.
        /// </summary>
        public readonly int? VolumeThreshold;

        [OutputConstructor]
        private EndpointConfigurationCircuitBreaker(
            bool? enabled,

            double? errorThresholdPercentage,

            int? numBuckets,

            int? rollingWindow,

            int? trippedDuration,

            int? volumeThreshold)
        {
            Enabled = enabled;
            ErrorThresholdPercentage = errorThresholdPercentage;
            NumBuckets = numBuckets;
            RollingWindow = rollingWindow;
            TrippedDuration = trippedDuration;
            VolumeThreshold = volumeThreshold;
        }
    }
}
