// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok
{
    /// <summary>
    /// SSH Host Certificates along with the corresponding private key allows an SSH
    ///  server to assert its authenticity to connecting SSH clients who trust the
    ///  SSH Certificate Authority that was used to sign the certificate.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Ngrok = PiersKarsenbarg.Ngrok;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ngrok.SshHostCertificate("example", new()
    ///     {
    ///         Description = "personal server",
    ///         Principals = new[]
    ///         {
    ///             "inconshreveable.com",
    ///             "10.2.42.9",
    ///         },
    ///         PublicKey = "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI3oSgxrOEJ+tIJ/n6VYtxQIFvynqlOHpfOAJ4x4OfmMYDkbf8dr6RAuUSf+ZC2HMCujta7EjZ9t+6v08Ue+Cgk= inconshreveable.com",
    ///         SshCertificateAuthorityId = "sshca_25auH7sr0BYJFNyfJUwXPzyyFAz",
    ///         ValidUntil = "2022-05-26T08:23:47Z",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NgrokResourceType("ngrok:index/sshHostCertificate:SshHostCertificate")]
    public partial class SshHostCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
        /// </summary>
        [Output("principals")]
        public Output<ImmutableArray<string>> Principals { get; private set; } = null!;

        /// <summary>
        /// a public key in OpenSSH Authorized Keys format that this certificate signs
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// the ssh certificate authority that is used to sign this ssh host certificate
        /// </summary>
        [Output("sshCertificateAuthorityId")]
        public Output<string> SshCertificateAuthorityId { get; private set; } = null!;

        /// <summary>
        /// the time when the ssh host certificate becomes valid, in RFC 3339 format.
        /// </summary>
        [Output("validAfter")]
        public Output<string?> ValidAfter { get; private set; } = null!;

        /// <summary>
        /// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        /// </summary>
        [Output("validUntil")]
        public Output<string?> ValidUntil { get; private set; } = null!;


        /// <summary>
        /// Create a SshHostCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SshHostCertificate(string name, SshHostCertificateArgs args, CustomResourceOptions? options = null)
            : base("ngrok:index/sshHostCertificate:SshHostCertificate", name, args ?? new SshHostCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SshHostCertificate(string name, Input<string> id, SshHostCertificateState? state = null, CustomResourceOptions? options = null)
            : base("ngrok:index/sshHostCertificate:SshHostCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-ngrok",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SshHostCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SshHostCertificate Get(string name, Input<string> id, SshHostCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new SshHostCertificate(name, id, state, options);
        }
    }

    public sealed class SshHostCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("principals")]
        private InputList<string>? _principals;

        /// <summary>
        /// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
        /// </summary>
        public InputList<string> Principals
        {
            get => _principals ?? (_principals = new InputList<string>());
            set => _principals = value;
        }

        /// <summary>
        /// a public key in OpenSSH Authorized Keys format that this certificate signs
        /// </summary>
        [Input("publicKey", required: true)]
        public Input<string> PublicKey { get; set; } = null!;

        /// <summary>
        /// the ssh certificate authority that is used to sign this ssh host certificate
        /// </summary>
        [Input("sshCertificateAuthorityId", required: true)]
        public Input<string> SshCertificateAuthorityId { get; set; } = null!;

        /// <summary>
        /// the time when the ssh host certificate becomes valid, in RFC 3339 format.
        /// </summary>
        [Input("validAfter")]
        public Input<string>? ValidAfter { get; set; }

        /// <summary>
        /// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        public SshHostCertificateArgs()
        {
        }
        public static new SshHostCertificateArgs Empty => new SshHostCertificateArgs();
    }

    public sealed class SshHostCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshd_config` configuration file with a `HostCertificate` directive
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the key type of the `public_key`, one of `rsa`, `ecdsa` or `ed25519`
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("principals")]
        private InputList<string>? _principals;

        /// <summary>
        /// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
        /// </summary>
        public InputList<string> Principals
        {
            get => _principals ?? (_principals = new InputList<string>());
            set => _principals = value;
        }

        /// <summary>
        /// a public key in OpenSSH Authorized Keys format that this certificate signs
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// the ssh certificate authority that is used to sign this ssh host certificate
        /// </summary>
        [Input("sshCertificateAuthorityId")]
        public Input<string>? SshCertificateAuthorityId { get; set; }

        /// <summary>
        /// the time when the ssh host certificate becomes valid, in RFC 3339 format.
        /// </summary>
        [Input("validAfter")]
        public Input<string>? ValidAfter { get; set; }

        /// <summary>
        /// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `valid_before`.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        public SshHostCertificateState()
        {
        }
        public static new SshHostCertificateState Empty => new SshHostCertificateState();
    }
}
