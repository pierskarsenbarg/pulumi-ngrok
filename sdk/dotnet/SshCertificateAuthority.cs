// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok
{
    /// <summary>
    /// An SSH Certificate Authority is a pair of an SSH Certificate and its private
    ///  key that can be used to sign other SSH host and user certificates.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Ngrok = PiersKarsenbarg.Ngrok;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ngrok.SshCertificateAuthority("example", new()
    ///     {
    ///         Description = "Staging Environment Hosts",
    ///         PrivateKeyType = "ed25519",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NgrokResourceType("ngrok:index/sshCertificateAuthority:SshCertificateAuthority")]
    public partial class SshCertificateAuthority : global::Pulumi.CustomResource
    {
        /// <summary>
        /// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// the type of elliptic curve to use when creating an ECDSA key
        /// </summary>
        [Output("ellipticCurve")]
        public Output<string?> EllipticCurve { get; private set; } = null!;

        /// <summary>
        /// the key size to use when creating an RSA key. one of `2048` or `4096`
        /// </summary>
        [Output("keySize")]
        public Output<int?> KeySize { get; private set; } = null!;

        /// <summary>
        /// the type of private key for this SSH Certificate Authority
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        /// </summary>
        [Output("privateKeyType")]
        public Output<string?> PrivateKeyType { get; private set; } = null!;

        /// <summary>
        /// raw public key for this SSH Certificate Authority
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;


        /// <summary>
        /// Create a SshCertificateAuthority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SshCertificateAuthority(string name, SshCertificateAuthorityArgs? args = null, CustomResourceOptions? options = null)
            : base("ngrok:index/sshCertificateAuthority:SshCertificateAuthority", name, args ?? new SshCertificateAuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SshCertificateAuthority(string name, Input<string> id, SshCertificateAuthorityState? state = null, CustomResourceOptions? options = null)
            : base("ngrok:index/sshCertificateAuthority:SshCertificateAuthority", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-ngrok",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SshCertificateAuthority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SshCertificateAuthority Get(string name, Input<string> id, SshCertificateAuthorityState? state = null, CustomResourceOptions? options = null)
        {
            return new SshCertificateAuthority(name, id, state, options);
        }
    }

    public sealed class SshCertificateAuthorityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the type of elliptic curve to use when creating an ECDSA key
        /// </summary>
        [Input("ellipticCurve")]
        public Input<string>? EllipticCurve { get; set; }

        /// <summary>
        /// the key size to use when creating an RSA key. one of `2048` or `4096`
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// the type of private key for this SSH Certificate Authority
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        /// </summary>
        [Input("privateKeyType")]
        public Input<string>? PrivateKeyType { get; set; }

        /// <summary>
        /// raw public key for this SSH Certificate Authority
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        public SshCertificateAuthorityArgs()
        {
        }
        public static new SshCertificateAuthorityArgs Empty => new SshCertificateAuthorityArgs();
    }

    public sealed class SshCertificateAuthorityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// the type of elliptic curve to use when creating an ECDSA key
        /// </summary>
        [Input("ellipticCurve")]
        public Input<string>? EllipticCurve { get; set; }

        /// <summary>
        /// the key size to use when creating an RSA key. one of `2048` or `4096`
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// the type of private key for this SSH Certificate Authority
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
        /// </summary>
        [Input("privateKeyType")]
        public Input<string>? PrivateKeyType { get; set; }

        /// <summary>
        /// raw public key for this SSH Certificate Authority
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        public SshCertificateAuthorityState()
        {
        }
        public static new SshCertificateAuthorityState Empty => new SshCertificateAuthorityState();
    }
}
