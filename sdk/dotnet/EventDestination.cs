// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok
{
    [NgrokResourceType("ngrok:index/eventDestination:EventDestination")]
    public partial class EventDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Human-readable description of the Event Destination. Optional, max 255 bytes.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        /// </summary>
        [Output("format")]
        public Output<string?> Format { get; private set; } = null!;

        /// <summary>
        /// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<Outputs.EventDestinationTarget>> Targets { get; private set; } = null!;

        [Output("verifyWithTestEvent")]
        public Output<bool?> VerifyWithTestEvent { get; private set; } = null!;


        /// <summary>
        /// Create a EventDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventDestination(string name, EventDestinationArgs? args = null, CustomResourceOptions? options = null)
            : base("ngrok:index/eventDestination:EventDestination", name, args ?? new EventDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventDestination(string name, Input<string> id, EventDestinationState? state = null, CustomResourceOptions? options = null)
            : base("ngrok:index/eventDestination:EventDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventDestination Get(string name, Input<string> id, EventDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new EventDestination(name, id, state, options);
        }
    }

    public sealed class EventDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable description of the Event Destination. Optional, max 255 bytes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("targets")]
        private InputList<Inputs.EventDestinationTargetArgs>? _targets;

        /// <summary>
        /// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        /// </summary>
        public InputList<Inputs.EventDestinationTargetArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.EventDestinationTargetArgs>());
            set => _targets = value;
        }

        [Input("verifyWithTestEvent")]
        public Input<bool>? VerifyWithTestEvent { get; set; }

        public EventDestinationArgs()
        {
        }
        public static new EventDestinationArgs Empty => new EventDestinationArgs();
    }

    public sealed class EventDestinationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable description of the Event Destination. Optional, max 255 bytes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("targets")]
        private InputList<Inputs.EventDestinationTargetGetArgs>? _targets;

        /// <summary>
        /// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatch_logs`, or `s3`.
        /// </summary>
        public InputList<Inputs.EventDestinationTargetGetArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.EventDestinationTargetGetArgs>());
            set => _targets = value;
        }

        [Input("verifyWithTestEvent")]
        public Input<bool>? VerifyWithTestEvent { get; set; }

        public EventDestinationState()
        {
        }
        public static new EventDestinationState Empty => new EventDestinationState();
    }
}
