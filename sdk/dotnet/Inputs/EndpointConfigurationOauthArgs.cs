// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Ngrok.Inputs
{

    public sealed class EndpointConfigurationOauthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Integer number of seconds after which ngrok guarantees it will refresh user state from the identity provider and recheck whether the user is still authorized to access the endpoint. This is the preferred tunable to use to enforce a minimum amount of time after which a revoked user will no longer be able to access the resource.
        /// </summary>
        [Input("authCheckInterval")]
        public Input<int>? AuthCheckInterval { get; set; }

        /// <summary>
        /// the prefix of the session cookie that ngrok sets on the http client to cache authentication. default is 'ngrok.'
        /// </summary>
        [Input("cookiePrefix")]
        public Input<string>? CookiePrefix { get; set; }

        /// <summary>
        /// `true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Integer number of seconds of inactivity after which if the user has not accessed the endpoint, their session will time out and they will be forced to reauthenticate.
        /// </summary>
        [Input("inactivityTimeout")]
        public Input<int>? InactivityTimeout { get; set; }

        /// <summary>
        /// Integer number of seconds of the maximum duration of an authenticated session. After this period is exceeded, a user must reauthenticate.
        /// </summary>
        [Input("maximumDuration")]
        public Input<int>? MaximumDuration { get; set; }

        /// <summary>
        /// Do not enforce authentication on HTTP OPTIONS requests. necessary if you are supporting CORS.
        /// </summary>
        [Input("optionsPassthrough")]
        public Input<bool>? OptionsPassthrough { get; set; }

        [Input("providers")]
        private InputList<Inputs.EndpointConfigurationOauthProviderArgs>? _providers;

        /// <summary>
        /// an object which defines the identity provider to use for authentication and configuration for who may access the endpoint
        /// </summary>
        public InputList<Inputs.EndpointConfigurationOauthProviderArgs> Providers
        {
            get => _providers ?? (_providers = new InputList<Inputs.EndpointConfigurationOauthProviderArgs>());
            set => _providers = value;
        }

        public EndpointConfigurationOauthArgs()
        {
        }
        public static new EndpointConfigurationOauthArgs Empty => new EndpointConfigurationOauthArgs();
    }
}
