// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * An IP restriction is a restriction placed on the CIDRs that are allowed to
 *  initiate traffic to a specific aspect of your ngrok account. An IP
 *  restriction has a type which defines the ingress it applies to. IP
 *  restrictions can be used to enforce the source IPs that can make API
 *  requests, log in to the dashboard, start ngrok agents, and connect to your
 *  public-facing endpoints.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pulumi/ngrok";
 *
 * const example = new ngrok.IpRestriction("example", {
 *     ipPolicyIds: ["ipp_25auGwa4eEWUeCOBfCZkwtwqFey"],
 *     type: "dashboard",
 * });
 * ```
 */
export class IpRestriction extends pulumi.CustomResource {
    /**
     * Get an existing IpRestriction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpRestrictionState, opts?: pulumi.CustomResourceOptions): IpRestriction {
        return new IpRestriction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/ipRestriction:IpRestriction';

    /**
     * Returns true if the given object is an instance of IpRestriction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpRestriction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpRestriction.__pulumiType;
    }

    /**
     * human-readable description of this IP restriction. optional, max 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * true if the IP restriction will be enforced. if false, only warnings will be issued
     */
    public readonly enforced!: pulumi.Output<boolean | undefined>;
    /**
     * the set of IP policy identifiers that are used to enforce the restriction
     */
    public readonly ipPolicyIds!: pulumi.Output<string[]>;
    /**
     * arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IpRestriction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpRestrictionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpRestrictionArgs | IpRestrictionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpRestrictionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enforced"] = state ? state.enforced : undefined;
            resourceInputs["ipPolicyIds"] = state ? state.ipPolicyIds : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IpRestrictionArgs | undefined;
            if ((!args || args.ipPolicyIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipPolicyIds'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enforced"] = args ? args.enforced : undefined;
            resourceInputs["ipPolicyIds"] = args ? args.ipPolicyIds : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpRestriction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpRestriction resources.
 */
export interface IpRestrictionState {
    /**
     * human-readable description of this IP restriction. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * true if the IP restriction will be enforced. if false, only warnings will be issued
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * the set of IP policy identifiers that are used to enforce the restriction
     */
    ipPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpRestriction resource.
 */
export interface IpRestrictionArgs {
    /**
     * human-readable description of this IP restriction. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * true if the IP restriction will be enforced. if false, only warnings will be issued
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * the set of IP policy identifiers that are used to enforce the restriction
     */
    ipPolicyIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
     */
    type: pulumi.Input<string>;
}
