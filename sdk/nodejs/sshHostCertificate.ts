// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * SSH Host Certificates along with the corresponding private key allows an SSH
 *  server to assert its authenticity to connecting SSH clients who trust the
 *  SSH Certificate Authority that was used to sign the certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pierskarsenbarg/ngrok";
 *
 * const example = new ngrok.SshHostCertificate("example", {
 *     description: "personal server",
 *     principals: [
 *         "inconshreveable.com",
 *         "10.2.42.9",
 *     ],
 *     publicKey: "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI3oSgxrOEJ+tIJ/n6VYtxQIFvynqlOHpfOAJ4x4OfmMYDkbf8dr6RAuUSf+ZC2HMCujta7EjZ9t+6v08Ue+Cgk= inconshreveable.com",
 *     sshCertificateAuthorityId: "sshca_26rOyuA7GzMmCmvfOui9TPWNxLa",
 *     validUntil: "2022-06-22T22:21:35-05:00",
 * });
 * ```
 */
export class SshHostCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SshHostCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshHostCertificateState, opts?: pulumi.CustomResourceOptions): SshHostCertificate {
        return new SshHostCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/sshHostCertificate:SshHostCertificate';

    /**
     * Returns true if the given object is an instance of SshHostCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SshHostCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SshHostCertificate.__pulumiType;
    }

    /**
     * the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * human-readable description of this SSH Host Certificate. optional, max 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
     */
    public readonly keyType!: pulumi.Output<string>;
    /**
     * arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
     */
    public readonly principals!: pulumi.Output<string[] | undefined>;
    /**
     * a public key in OpenSSH Authorized Keys format that this certificate signs
     */
    public readonly publicKey!: pulumi.Output<string>;
    /**
     * the ssh certificate authority that is used to sign this ssh host certificate
     */
    public readonly sshCertificateAuthorityId!: pulumi.Output<string>;
    /**
     * the time when the ssh host certificate becomes valid, in RFC 3339 format.
     */
    public readonly validAfter!: pulumi.Output<string | undefined>;
    /**
     * the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
     */
    public readonly validUntil!: pulumi.Output<string | undefined>;

    /**
     * Create a SshHostCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshHostCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshHostCertificateArgs | SshHostCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshHostCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["principals"] = state ? state.principals : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["sshCertificateAuthorityId"] = state ? state.sshCertificateAuthorityId : undefined;
            resourceInputs["validAfter"] = state ? state.validAfter : undefined;
            resourceInputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as SshHostCertificateArgs | undefined;
            if ((!args || args.publicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicKey'");
            }
            if ((!args || args.sshCertificateAuthorityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshCertificateAuthorityId'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["principals"] = args ? args.principals : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["sshCertificateAuthorityId"] = args ? args.sshCertificateAuthorityId : undefined;
            resourceInputs["validAfter"] = args ? args.validAfter : undefined;
            resourceInputs["validUntil"] = args ? args.validUntil : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SshHostCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SshHostCertificate resources.
 */
export interface SshHostCertificateState {
    /**
     * the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
     */
    certificate?: pulumi.Input<string>;
    /**
     * human-readable description of this SSH Host Certificate. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
     */
    keyType?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
     */
    principals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * a public key in OpenSSH Authorized Keys format that this certificate signs
     */
    publicKey?: pulumi.Input<string>;
    /**
     * the ssh certificate authority that is used to sign this ssh host certificate
     */
    sshCertificateAuthorityId?: pulumi.Input<string>;
    /**
     * the time when the ssh host certificate becomes valid, in RFC 3339 format.
     */
    validAfter?: pulumi.Input<string>;
    /**
     * the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
     */
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SshHostCertificate resource.
 */
export interface SshHostCertificateArgs {
    /**
     * the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
     */
    certificate?: pulumi.Input<string>;
    /**
     * human-readable description of this SSH Host Certificate. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
     */
    keyType?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
     */
    principals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * a public key in OpenSSH Authorized Keys format that this certificate signs
     */
    publicKey: pulumi.Input<string>;
    /**
     * the ssh certificate authority that is used to sign this ssh host certificate
     */
    sshCertificateAuthorityId: pulumi.Input<string>;
    /**
     * the time when the ssh host certificate becomes valid, in RFC 3339 format.
     */
    validAfter?: pulumi.Input<string>;
    /**
     * the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
     */
    validUntil?: pulumi.Input<string>;
}
