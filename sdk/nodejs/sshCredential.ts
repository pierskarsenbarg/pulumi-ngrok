// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * SSH Credentials are SSH public keys that can be used to start SSH tunnels
 *  via the ngrok SSH tunnel gateway.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pulumi/ngrok";
 *
 * const example = new ngrok.SshCredential("example", {
 *     acls: [
 *         "bind:1.tcp.ngrok.io:20002",
 *         "bind:132.devices.company.com",
 *     ],
 *     description: "for device #132",
 *     publicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmGS49FkSODAcKhn3+/47DW2zEn19BZvzRQ8RZjL3v6hCIX2qXfsFK35EGxNI0wV23H4xXC2gVRPHKU71YnCb50tad3yMBTM6+2yfGsEDasEH/anmBLclChKvuGiT547RskZlpbAbdq3GvbzmY+R/2EBRMOiObpc8XmSzKAd05j28kqN0+rZO65SWId0MXdvJdSCSAnuRqBNd/aXKlu8hBPDcgwbT2lMkuR+ApoBS2FLRBOiQyt2Ol0T7Uuf7lTLlazpGB3uTw5zFYUNXkuuI6cAP8QYuY1Bne/hNrG8t3Aw9a1yc2C4Fz1hJ/4OMRxTQ8SUQf+Rmxs8DryMlMFJ8r device132@example.com",
 * });
 * ```
 */
export class SshCredential extends pulumi.CustomResource {
    /**
     * Get an existing SshCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshCredentialState, opts?: pulumi.CustomResourceOptions): SshCredential {
        return new SshCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/sshCredential:SshCredential';

    /**
     * Returns true if the given object is an instance of SshCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SshCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SshCredential.__pulumiType;
    }

    /**
     * optional list of ACL rules. If unspecified, the credential will have no restrictions. The only allowed ACL rule at this time is the `bind` rule. The `bind` rule allows the caller to restrict what domains and addresses the token is allowed to bind. For example, to allow the token to open a tunnel on example.ngrok.io your ACL would include the rule `bind:example.ngrok.io`. Bind rules may specify a leading wildcard to match multiple domains with a common suffix. For example, you may specify a rule of `bind:*.example.com` which will allow `x.example.com`, `y.example.com`, `*.example.com`, etc. A rule of `'*'` is equivalent to no acl at all and will explicitly permit all actions.
     */
    public readonly acls!: pulumi.Output<string[] | undefined>;
    /**
     * human-readable description of who or what will use the ssh credential to authenticate. Optional, max 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * arbitrary user-defined machine-readable data of this ssh credential. Optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * the PEM-encoded public key of the SSH keypair that will be used to authenticate
     */
    public readonly publicKey!: pulumi.Output<string>;

    /**
     * Create a SshCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshCredentialArgs | SshCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshCredentialState | undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as SshCredentialArgs | undefined;
            if ((!args || args.publicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicKey'");
            }
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SshCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SshCredential resources.
 */
export interface SshCredentialState {
    /**
     * optional list of ACL rules. If unspecified, the credential will have no restrictions. The only allowed ACL rule at this time is the `bind` rule. The `bind` rule allows the caller to restrict what domains and addresses the token is allowed to bind. For example, to allow the token to open a tunnel on example.ngrok.io your ACL would include the rule `bind:example.ngrok.io`. Bind rules may specify a leading wildcard to match multiple domains with a common suffix. For example, you may specify a rule of `bind:*.example.com` which will allow `x.example.com`, `y.example.com`, `*.example.com`, etc. A rule of `'*'` is equivalent to no acl at all and will explicitly permit all actions.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * human-readable description of who or what will use the ssh credential to authenticate. Optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this ssh credential. Optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the PEM-encoded public key of the SSH keypair that will be used to authenticate
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SshCredential resource.
 */
export interface SshCredentialArgs {
    /**
     * optional list of ACL rules. If unspecified, the credential will have no restrictions. The only allowed ACL rule at this time is the `bind` rule. The `bind` rule allows the caller to restrict what domains and addresses the token is allowed to bind. For example, to allow the token to open a tunnel on example.ngrok.io your ACL would include the rule `bind:example.ngrok.io`. Bind rules may specify a leading wildcard to match multiple domains with a common suffix. For example, you may specify a rule of `bind:*.example.com` which will allow `x.example.com`, `y.example.com`, `*.example.com`, etc. A rule of `'*'` is equivalent to no acl at all and will explicitly permit all actions.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * human-readable description of who or what will use the ssh credential to authenticate. Optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this ssh credential. Optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the PEM-encoded public key of the SSH keypair that will be used to authenticate
     */
    publicKey: pulumi.Input<string>;
}
