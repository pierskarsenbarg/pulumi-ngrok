// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * TLS Certificates are pairs of x509 certificates and their matching private
 *  key that can be used to terminate TLS traffic. TLS certificates are unused
 *  until they are attached to a Domain. TLS Certificates may also be
 *  provisioned by ngrok automatically for domains on which you have enabled
 *  automated certificate provisioning.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pierskarsenbarg/ngrok";
 *
 * const example = new ngrok.TlsCertificate("example", {
 *     certificatePem: `-----BEGIN CERTIFICATE-----
 * MIIDDTCCAfWgAwIBAgIUBUunDdA4gjgtEbZA8w9Ljhvl3bEwDQYJKoZIhvcNAQEL
 * BQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wHhcNMjAwMzI0MTgxODE5WhcNMjAw
 * NDIzMTgxODE5WjAWMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcN
 * AQEBBQADggEPADCCAQoCggEBAPKVkkKYNl3d9cqrz4tIFlwsohED5W4y1dcBixy4
 * GANFFnw43nc2wPyKwYXumJqJIFrcW/NkUZL07bd+dou6mT6Gh/zbaTW91IkREPXL
 * 7b3KfVu4XkFosVXpWs0U6o4GrZ81CLiKBWI+H03x/ij5OSiJ1l71pqLeTJLOydAR
 * Al8kpp7axeHU4UbDrAZkW5SnuZTjIKwVg0UNsBg1yNfUOu1Uah3BYaqPgQitC0Yg
 * LW+NUGu/T91bkD7tLsVInkQXeQGdXBAqOycfJ7wj8OlIpyuXjTnGFA0izVmbQw5f
 * rQnZ0geGyhLamvz9Gcd7mIlD/+/AEN9Lht82tAOzKG98/O8CAwEAAaNTMFEwHQYD
 * VR0OBBYEFKv6RsvEC6T+zCtJZwB0FCR1sEkhMB8GA1UdIwQYMBaAFKv6RsvEC6T+
 * zCtJZwB0FCR1sEkhMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEB
 * AC5fBrouinespo5+9AipjhY/HOKTg+OCnppFnSnqeU1eXZZJ0oakdHTpTNxtbQP9
 * tOJTA2f3KWvmpNDMohEQXZz8wHDkdbrIXJKVp6zs1pEp+0BIjA4y9mSywa5xuyk0
 * oGeChRgGqp2JujDyPCb7LEaKKQEEdMqy73QG+jEAh14+wKixlAf1nATBdeCUvssK
 * 2x1uZMyqjJFB5y/5EdnWQzD4WJkrsCkxsZHVMN1d+dqf2sf3dTRV8fzsFGOG17NS
 * 6u2n9iGcFdBA82XN8yeLIWhy1t3GWutG1sdxENbFRRXea+iUqzDsmRtkaBma2GLQ
 * d6JTpFbsCtwDjP23UEi7SZo=
 * -----END CERTIFICATE-----
 * `,
 *     privateKeyPem: `-----BEGIN PRIVATE KEY-----
 * MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDylZJCmDZd3fXK
 * q8+LSBZcLKIRA+VuMtXXAYscuBgDRRZ8ON53NsD8isGF7piaiSBa3FvzZFGS9O23
 * fnaLupk+hof822k1vdSJERD1y+29yn1buF5BaLFV6VrNFOqOBq2fNQi4igViPh9N
 * 8f4o+TkoidZe9aai3kySzsnQEQJfJKae2sXh1OFGw6wGZFuUp7mU4yCsFYNFDbAY
 * NcjX1DrtVGodwWGqj4EIrQtGIC1vjVBrv0/dW5A+7S7FSJ5EF3kBnVwQKjsnHye8
 * I/DpSKcrl405xhQNIs1Zm0MOX60J2dIHhsoS2pr8/RnHe5iJQ//vwBDfS4bfNrQD
 * syhvfPzvAgMBAAECggEBALLv7YE98exvi5zB+0fMFuJK8gkHDLequ93q/4hhqyTO
 * U3WyJTdepiAi4fk/NEXZnIopPZJdj2aNUMQnfp43OE7MwYac+hBwRFQOyKnmkSmM
 * Mcf0SWKKLTUn+piIMzQsbOmhHxuwg6QiGslOFaJ3o9fpRL2rCg3dWDJ6Ypcd1NgE
 * K0uy7gg+DwIpU6MeG6lA+HbxbGi+yd2x88Gjn9dGr7FZK34RUDooH60BCX9P8N9X
 * T+n10MzzX7ZQOsLfe8FKc1/X8AybI5SYm1GMyfKD4QBt6JG4HKAjPHzBzcIpfN3d
 * 7BM11Imkrz7LcbUG+F23NVsi6n5IIGT1WqwCRIH2PpECgYEA/SJ5Ra4d0hUS5RYB
 * zABquM3sp7JsKxCn7O5PqNLB4TgH9dXtWFhaFVB6juMGyHbvktVH0j4lps/Te0rk
 * VU2zU1XxvCTFhtcCYUtNk0cRw6LH8feKiorXHdDRB33t0c47QSD/6AGOjBtxqD7B
 * 3ZxyR3P+7RdQopLLRFN+FHAnmzsCgYEA9VSGZDFSK+fbg4CgwkWdzuHrAXaUEv0U
 * ovqqWd/yXB9wauEvRHnOrSgW6hFZQiatJOXx0KnalJQzohz/SLGO0MqGtwQbYWVT
 * WiJgjUbNeiPEHBeUA6U55lVQr26kQSUWdXEtRbDz+hqV1K+6tTEMzaSPmJiHNgki
 * lNMO2gqGQd0CgYBJ268qx5zn2UJEGWG41j5NYbg1TfgFsLxugzI2/heX0TNxZVP1
 * PQI7ydmYq2ElSJ6qZxSnoX5255i7FqT8xskV/bOkw83mhAGrxb8Cw+/I90wDq8h+
 * l/ggOPdkijfDybq8TBae6SVgd/l3r6f9M1KcypmNMApVBSPN8daNvBOyVQKBgQDo
 * sj2utyFrx8Xsm4rf+kxOuPbBMooM4MQ8OmpuSP6G5sMofWLqHmcs0sO5TK9PEYRV
 * ZU3ST+ml2FSJRdvWRaRi4laZLWoTHZrL+aN/HVM0sMwIoUyhkIy0ruOTIuzlZZpB
 * 1xHL8qXX6nOHgw8jYdz1CUuyv6owVMXaR77kjer+eQKBgByYZlR/eNTzlot0SdFl
 * IbgQ9bV7VLIo+vKzOXE3trfzRJMgUosLTp+5wdSVSW/VBdYZ7Ir3n0bbpY/dGinI
 * VShxPbChhCZnhvG2lEEiekI44m5jHSA6hhtRdt/CrhL65Rw2SE5lMEe8htg1UGus
 * wzLHWHBl72FjbjdhvEgrq60W
 * -----END PRIVATE KEY-----
 * `,
 * });
 * ```
 */
export class TlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing TlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsCertificateState, opts?: pulumi.CustomResourceOptions): TlsCertificate {
        return new TlsCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/tlsCertificate:TlsCertificate';

    /**
     * Returns true if the given object is an instance of TlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsCertificate.__pulumiType;
    }

    /**
     * chain of PEM-encoded certificates, leaf first. See [Certificate Bundles](https://ngrok.com/docs/api#tls-certificates-pem).
     */
    public readonly certificatePem!: pulumi.Output<string>;
    /**
     * human-readable description of this TLS certificate. optional, max 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * private key for the TLS certificate, PEM-encoded. See [Private Keys](https://ngrok.com/docs/ngrok-link#tls-certificates-key).
     */
    public readonly privateKeyPem!: pulumi.Output<string>;
    /**
     * subject alternative names (SANs) from the leaf of this TLS certificate
     */
    public readonly subjectAlternativeNames!: pulumi.Output<outputs.TlsCertificateSubjectAlternativeName[]>;

    /**
     * Create a TlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsCertificateArgs | TlsCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsCertificateState | undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
        } else {
            const args = argsOrState as TlsCertificateArgs | undefined;
            if ((!args || args.certificatePem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificatePem'");
            }
            if ((!args || args.privateKeyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKeyPem'");
            }
            resourceInputs["certificatePem"] = args ? args.certificatePem : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["privateKeyPem"] = args ? args.privateKeyPem : undefined;
            resourceInputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsCertificate resources.
 */
export interface TlsCertificateState {
    /**
     * chain of PEM-encoded certificates, leaf first. See [Certificate Bundles](https://ngrok.com/docs/api#tls-certificates-pem).
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * human-readable description of this TLS certificate. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * private key for the TLS certificate, PEM-encoded. See [Private Keys](https://ngrok.com/docs/ngrok-link#tls-certificates-key).
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * subject alternative names (SANs) from the leaf of this TLS certificate
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<inputs.TlsCertificateSubjectAlternativeName>[]>;
}

/**
 * The set of arguments for constructing a TlsCertificate resource.
 */
export interface TlsCertificateArgs {
    /**
     * chain of PEM-encoded certificates, leaf first. See [Certificate Bundles](https://ngrok.com/docs/api#tls-certificates-pem).
     */
    certificatePem: pulumi.Input<string>;
    /**
     * human-readable description of this TLS certificate. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * private key for the TLS certificate, PEM-encoded. See [Private Keys](https://ngrok.com/docs/ngrok-link#tls-certificates-key).
     */
    privateKeyPem: pulumi.Input<string>;
    /**
     * subject alternative names (SANs) from the leaf of this TLS certificate
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<inputs.TlsCertificateSubjectAlternativeName>[]>;
}
