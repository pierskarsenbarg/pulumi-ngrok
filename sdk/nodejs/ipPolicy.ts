// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * IP Policies are reusable groups of CIDR ranges with an `allow` or `deny`
 *  action. They can be attached to endpoints via the Endpoint Configuration IP
 *  Policy module. They can also be used with IP Restrictions to control source
 *  IP ranges that can start tunnel sessions and connect to the API and dashboard.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pulumi/ngrok";
 *
 * const example = new ngrok.index/ipPolicy.IpPolicy("example", {
 *     action: "allow",
 *     description: "API Outbound Gateway",
 * });
 * ```
 */
export class IpPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IpPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpPolicyState, opts?: pulumi.CustomResourceOptions): IpPolicy {
        return new IpPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/ipPolicy:IpPolicy';

    /**
     * Returns true if the given object is an instance of IpPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpPolicy.__pulumiType;
    }

    /**
     * this field is deprecated. Please leave it empty and use the ip policy rule object's "action" field instead. It is temporarily retained for backwards compatibility reasons.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * human-readable description of the source IPs of this IP policy. optional, max 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * arbitrary user-defined machine-readable data of this IP policy. optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;

    /**
     * Create a IpPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpPolicyArgs | IpPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
        } else {
            const args = argsOrState as IpPolicyArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpPolicy resources.
 */
export interface IpPolicyState {
    /**
     * this field is deprecated. Please leave it empty and use the ip policy rule object's "action" field instead. It is temporarily retained for backwards compatibility reasons.
     */
    action?: pulumi.Input<string>;
    /**
     * human-readable description of the source IPs of this IP policy. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this IP policy. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpPolicy resource.
 */
export interface IpPolicyArgs {
    /**
     * this field is deprecated. Please leave it empty and use the ip policy rule object's "action" field instead. It is temporarily retained for backwards compatibility reasons.
     */
    action?: pulumi.Input<string>;
    /**
     * human-readable description of the source IPs of this IP policy. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this IP policy. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
}
