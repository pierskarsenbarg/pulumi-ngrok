// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AgentIngressCertificateManagementPolicy {
    /**
     * certificate authority to request certificates from. The only supported value is letsencrypt.
     */
    authority?: string;
    /**
     * type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
     */
    privateKeyType?: string;
}

export interface EventDestinationTarget {
    /**
     * Configuration used to send events to Amazon CloudWatch Logs.
     */
    cloudwatchLogs?: outputs.EventDestinationTargetCloudwatchLog[];
    /**
     * Configuration used to send events to Datadog.
     */
    datadogs?: outputs.EventDestinationTargetDatadog[];
    /**
     * Configuration used for internal debugging.
     */
    debugs?: outputs.EventDestinationTargetDebug[];
    /**
     * Configuration used to send events to Amazon Kinesis Data Firehose.
     */
    firehoses?: outputs.EventDestinationTargetFirehose[];
    /**
     * Configuration used to send events to Amazon Kinesis.
     */
    kineses?: outputs.EventDestinationTargetKinese[];
}

export interface EventDestinationTargetCloudwatchLog {
    auths?: outputs.EventDestinationTargetCloudwatchLogAuth[];
    logGroupArn?: string;
}

export interface EventDestinationTargetCloudwatchLogAuth {
    creds?: outputs.EventDestinationTargetCloudwatchLogAuthCred[];
    roles?: outputs.EventDestinationTargetCloudwatchLogAuthRole[];
}

export interface EventDestinationTargetCloudwatchLogAuthCred {
    awsAccessKeyId: string;
    awsSecretAccessKey: string;
}

export interface EventDestinationTargetCloudwatchLogAuthRole {
    roleArn: string;
}

export interface EventDestinationTargetDatadog {
    apiKey?: string;
    ddsite?: string;
    ddtags?: string;
    service?: string;
}

export interface EventDestinationTargetDebug {
    callbackUrl?: string;
    log?: boolean;
}

export interface EventDestinationTargetFirehose {
    auths?: outputs.EventDestinationTargetFirehoseAuth[];
    deliveryStreamArn?: string;
}

export interface EventDestinationTargetFirehoseAuth {
    creds?: outputs.EventDestinationTargetFirehoseAuthCred[];
    roles?: outputs.EventDestinationTargetFirehoseAuthRole[];
}

export interface EventDestinationTargetFirehoseAuthCred {
    awsAccessKeyId: string;
    awsSecretAccessKey: string;
}

export interface EventDestinationTargetFirehoseAuthRole {
    roleArn: string;
}

export interface EventDestinationTargetKinese {
    auths?: outputs.EventDestinationTargetKineseAuth[];
    streamArn?: string;
}

export interface EventDestinationTargetKineseAuth {
    creds?: outputs.EventDestinationTargetKineseAuthCred[];
    roles?: outputs.EventDestinationTargetKineseAuthRole[];
}

export interface EventDestinationTargetKineseAuthCred {
    awsAccessKeyId: string;
    awsSecretAccessKey: string;
}

export interface EventDestinationTargetKineseAuthRole {
    roleArn: string;
}

export interface EventSubscriptionSource {
    /**
     * TODO
     */
    fields?: string[];
    /**
     * TODO
     */
    filter?: string;
    /**
     * Type of event for which an event subscription will trigger
     */
    type?: string;
    /**
     * URI of the Event Source API resource.
     */
    uri: string;
}

export interface ReservedDomainCertificateManagementPolicy {
    /**
     * certificate authority to request certificates from. The only supported value is letsencrypt.
     */
    authority?: string;
    /**
     * type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
     */
    privateKeyType?: string;
}

export interface TlsCertificateSubjectAlternativeName {
    /**
     * set of additional domains (including wildcards) this TLS certificate is valid for
     */
    dnsNames: string[];
    /**
     * set of IP addresses this TLS certificate is also valid for
     */
    ips: string[];
}

export interface TunnelGroupBackendTunnel {
    /**
     * a resource identifier
     */
    id: string;
    /**
     * a uri for locating a resource
     */
    uri: string;
}

