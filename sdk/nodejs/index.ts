// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentIngressArgs, AgentIngressState } from "./agentIngress";
export type AgentIngress = import("./agentIngress").AgentIngress;
export const AgentIngress: typeof import("./agentIngress").AgentIngress = null as any;
utilities.lazyLoad(exports, ["AgentIngress"], () => require("./agentIngress"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { CertificateAuthorityArgs, CertificateAuthorityState } from "./certificateAuthority";
export type CertificateAuthority = import("./certificateAuthority").CertificateAuthority;
export const CertificateAuthority: typeof import("./certificateAuthority").CertificateAuthority = null as any;
utilities.lazyLoad(exports, ["CertificateAuthority"], () => require("./certificateAuthority"));

export { CredentialArgs, CredentialState } from "./credential";
export type Credential = import("./credential").Credential;
export const Credential: typeof import("./credential").Credential = null as any;
utilities.lazyLoad(exports, ["Credential"], () => require("./credential"));

export { EndpointConfigurationArgs, EndpointConfigurationState } from "./endpointConfiguration";
export type EndpointConfiguration = import("./endpointConfiguration").EndpointConfiguration;
export const EndpointConfiguration: typeof import("./endpointConfiguration").EndpointConfiguration = null as any;
utilities.lazyLoad(exports, ["EndpointConfiguration"], () => require("./endpointConfiguration"));

export { EventDestinationArgs, EventDestinationState } from "./eventDestination";
export type EventDestination = import("./eventDestination").EventDestination;
export const EventDestination: typeof import("./eventDestination").EventDestination = null as any;
utilities.lazyLoad(exports, ["EventDestination"], () => require("./eventDestination"));

export { EventSubscriptionArgs, EventSubscriptionState } from "./eventSubscription";
export type EventSubscription = import("./eventSubscription").EventSubscription;
export const EventSubscription: typeof import("./eventSubscription").EventSubscription = null as any;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));

export { IpPolicyArgs, IpPolicyState } from "./ipPolicy";
export type IpPolicy = import("./ipPolicy").IpPolicy;
export const IpPolicy: typeof import("./ipPolicy").IpPolicy = null as any;
utilities.lazyLoad(exports, ["IpPolicy"], () => require("./ipPolicy"));

export { IpPolicyRuleArgs, IpPolicyRuleState } from "./ipPolicyRule";
export type IpPolicyRule = import("./ipPolicyRule").IpPolicyRule;
export const IpPolicyRule: typeof import("./ipPolicyRule").IpPolicyRule = null as any;
utilities.lazyLoad(exports, ["IpPolicyRule"], () => require("./ipPolicyRule"));

export { IpRestrictionArgs, IpRestrictionState } from "./ipRestriction";
export type IpRestriction = import("./ipRestriction").IpRestriction;
export const IpRestriction: typeof import("./ipRestriction").IpRestriction = null as any;
utilities.lazyLoad(exports, ["IpRestriction"], () => require("./ipRestriction"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReservedAddressArgs, ReservedAddressState } from "./reservedAddress";
export type ReservedAddress = import("./reservedAddress").ReservedAddress;
export const ReservedAddress: typeof import("./reservedAddress").ReservedAddress = null as any;
utilities.lazyLoad(exports, ["ReservedAddress"], () => require("./reservedAddress"));

export { ReservedDomainArgs, ReservedDomainState } from "./reservedDomain";
export type ReservedDomain = import("./reservedDomain").ReservedDomain;
export const ReservedDomain: typeof import("./reservedDomain").ReservedDomain = null as any;
utilities.lazyLoad(exports, ["ReservedDomain"], () => require("./reservedDomain"));

export { SshCertificateAuthorityArgs, SshCertificateAuthorityState } from "./sshCertificateAuthority";
export type SshCertificateAuthority = import("./sshCertificateAuthority").SshCertificateAuthority;
export const SshCertificateAuthority: typeof import("./sshCertificateAuthority").SshCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["SshCertificateAuthority"], () => require("./sshCertificateAuthority"));

export { SshCredentialArgs, SshCredentialState } from "./sshCredential";
export type SshCredential = import("./sshCredential").SshCredential;
export const SshCredential: typeof import("./sshCredential").SshCredential = null as any;
utilities.lazyLoad(exports, ["SshCredential"], () => require("./sshCredential"));

export { SshHostCertificateArgs, SshHostCertificateState } from "./sshHostCertificate";
export type SshHostCertificate = import("./sshHostCertificate").SshHostCertificate;
export const SshHostCertificate: typeof import("./sshHostCertificate").SshHostCertificate = null as any;
utilities.lazyLoad(exports, ["SshHostCertificate"], () => require("./sshHostCertificate"));

export { SshUserCertificateArgs, SshUserCertificateState } from "./sshUserCertificate";
export type SshUserCertificate = import("./sshUserCertificate").SshUserCertificate;
export const SshUserCertificate: typeof import("./sshUserCertificate").SshUserCertificate = null as any;
utilities.lazyLoad(exports, ["SshUserCertificate"], () => require("./sshUserCertificate"));

export { TlsCertificateArgs, TlsCertificateState } from "./tlsCertificate";
export type TlsCertificate = import("./tlsCertificate").TlsCertificate;
export const TlsCertificate: typeof import("./tlsCertificate").TlsCertificate = null as any;
utilities.lazyLoad(exports, ["TlsCertificate"], () => require("./tlsCertificate"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ngrok:index/agentIngress:AgentIngress":
                return new AgentIngress(name, <any>undefined, { urn })
            case "ngrok:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "ngrok:index/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "ngrok:index/credential:Credential":
                return new Credential(name, <any>undefined, { urn })
            case "ngrok:index/endpointConfiguration:EndpointConfiguration":
                return new EndpointConfiguration(name, <any>undefined, { urn })
            case "ngrok:index/eventDestination:EventDestination":
                return new EventDestination(name, <any>undefined, { urn })
            case "ngrok:index/eventSubscription:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "ngrok:index/ipPolicy:IpPolicy":
                return new IpPolicy(name, <any>undefined, { urn })
            case "ngrok:index/ipPolicyRule:IpPolicyRule":
                return new IpPolicyRule(name, <any>undefined, { urn })
            case "ngrok:index/ipRestriction:IpRestriction":
                return new IpRestriction(name, <any>undefined, { urn })
            case "ngrok:index/reservedAddress:ReservedAddress":
                return new ReservedAddress(name, <any>undefined, { urn })
            case "ngrok:index/reservedDomain:ReservedDomain":
                return new ReservedDomain(name, <any>undefined, { urn })
            case "ngrok:index/sshCertificateAuthority:SshCertificateAuthority":
                return new SshCertificateAuthority(name, <any>undefined, { urn })
            case "ngrok:index/sshCredential:SshCredential":
                return new SshCredential(name, <any>undefined, { urn })
            case "ngrok:index/sshHostCertificate:SshHostCertificate":
                return new SshHostCertificate(name, <any>undefined, { urn })
            case "ngrok:index/sshUserCertificate:SshUserCertificate":
                return new SshUserCertificate(name, <any>undefined, { urn })
            case "ngrok:index/tlsCertificate:TlsCertificate":
                return new TlsCertificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ngrok", "index/agentIngress", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/credential", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/endpointConfiguration", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/eventDestination", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/eventSubscription", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/ipPolicy", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/ipPolicyRule", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/ipRestriction", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/reservedAddress", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/reservedDomain", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshCredential", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshHostCertificate", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshUserCertificate", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/tlsCertificate", _module)
pulumi.runtime.registerResourcePackage("ngrok", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ngrok") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
