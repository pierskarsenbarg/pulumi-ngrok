// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./agentIngress";
export * from "./apiKey";
export * from "./certificateAuthority";
export * from "./credential";
export * from "./endpointConfiguration";
export * from "./eventDestination";
export * from "./eventSubscription";
export * from "./ipPolicy";
export * from "./ipPolicyRule";
export * from "./ipRestriction";
export * from "./provider";
export * from "./reservedAddress";
export * from "./reservedDomain";
export * from "./sshCertificateAuthority";
export * from "./sshCredential";
export * from "./sshHostCertificate";
export * from "./sshUserCertificate";
export * from "./tlsCertificate";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AgentIngress } from "./agentIngress";
import { ApiKey } from "./apiKey";
import { CertificateAuthority } from "./certificateAuthority";
import { Credential } from "./credential";
import { EndpointConfiguration } from "./endpointConfiguration";
import { EventDestination } from "./eventDestination";
import { EventSubscription } from "./eventSubscription";
import { IpPolicy } from "./ipPolicy";
import { IpPolicyRule } from "./ipPolicyRule";
import { IpRestriction } from "./ipRestriction";
import { ReservedAddress } from "./reservedAddress";
import { ReservedDomain } from "./reservedDomain";
import { SshCertificateAuthority } from "./sshCertificateAuthority";
import { SshCredential } from "./sshCredential";
import { SshHostCertificate } from "./sshHostCertificate";
import { SshUserCertificate } from "./sshUserCertificate";
import { TlsCertificate } from "./tlsCertificate";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ngrok:index/agentIngress:AgentIngress":
                return new AgentIngress(name, <any>undefined, { urn })
            case "ngrok:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "ngrok:index/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "ngrok:index/credential:Credential":
                return new Credential(name, <any>undefined, { urn })
            case "ngrok:index/endpointConfiguration:EndpointConfiguration":
                return new EndpointConfiguration(name, <any>undefined, { urn })
            case "ngrok:index/eventDestination:EventDestination":
                return new EventDestination(name, <any>undefined, { urn })
            case "ngrok:index/eventSubscription:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "ngrok:index/ipPolicy:IpPolicy":
                return new IpPolicy(name, <any>undefined, { urn })
            case "ngrok:index/ipPolicyRule:IpPolicyRule":
                return new IpPolicyRule(name, <any>undefined, { urn })
            case "ngrok:index/ipRestriction:IpRestriction":
                return new IpRestriction(name, <any>undefined, { urn })
            case "ngrok:index/reservedAddress:ReservedAddress":
                return new ReservedAddress(name, <any>undefined, { urn })
            case "ngrok:index/reservedDomain:ReservedDomain":
                return new ReservedDomain(name, <any>undefined, { urn })
            case "ngrok:index/sshCertificateAuthority:SshCertificateAuthority":
                return new SshCertificateAuthority(name, <any>undefined, { urn })
            case "ngrok:index/sshCredential:SshCredential":
                return new SshCredential(name, <any>undefined, { urn })
            case "ngrok:index/sshHostCertificate:SshHostCertificate":
                return new SshHostCertificate(name, <any>undefined, { urn })
            case "ngrok:index/sshUserCertificate:SshUserCertificate":
                return new SshUserCertificate(name, <any>undefined, { urn })
            case "ngrok:index/tlsCertificate:TlsCertificate":
                return new TlsCertificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ngrok", "index/agentIngress", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/credential", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/endpointConfiguration", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/eventDestination", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/eventSubscription", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/ipPolicy", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/ipPolicyRule", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/ipRestriction", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/reservedAddress", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/reservedDomain", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshCredential", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshHostCertificate", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/sshUserCertificate", _module)
pulumi.runtime.registerResourceModule("ngrok", "index/tlsCertificate", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("ngrok", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ngrok") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
