// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Reserved Domains are hostnames that you can listen for traffic on. Domains
 *  can be used to listen for http, https or tls traffic. You may use a domain
 *  that you own by creating a CNAME record specified in the returned resource.
 *  This CNAME record points traffic for that domain to ngrok's edge servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pulumi/ngrok";
 *
 * const example = new ngrok.ReservedDomain("example", {
 *     certificateId: "cert_25auGELSEngiae3wzmLLesiZn8h",
 *     region: "us",
 * });
 * ```
 */
export class ReservedDomain extends pulumi.CustomResource {
    /**
     * Get an existing ReservedDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservedDomainState, opts?: pulumi.CustomResourceOptions): ReservedDomain {
        return new ReservedDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/reservedDomain:ReservedDomain';

    /**
     * Returns true if the given object is an instance of ReservedDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReservedDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedDomain.__pulumiType;
    }

    /**
     * DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
     */
    public readonly acmeChallengeCnameTarget!: pulumi.Output<string>;
    /**
     * ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificateManagementPolicy`.
     */
    public readonly certificateId!: pulumi.Output<string | undefined>;
    /**
     * configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
     */
    public readonly certificateManagementPolicies!: pulumi.Output<outputs.ReservedDomainCertificateManagementPolicy[] | undefined>;
    /**
     * DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
     */
    public readonly cnameTarget!: pulumi.Output<string>;
    /**
     * human-readable description of what this reserved domain will be used for
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * hostname of the reserved domain
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
     */
    public readonly httpEndpointConfigurationId!: pulumi.Output<string | undefined>;
    /**
     * ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
     */
    public readonly httpsEndpointConfigurationId!: pulumi.Output<string | undefined>;
    /**
     * arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
     */
    public readonly region!: pulumi.Output<string | undefined>;

    /**
     * Create a ReservedDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ReservedDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservedDomainArgs | ReservedDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservedDomainState | undefined;
            resourceInputs["acmeChallengeCnameTarget"] = state ? state.acmeChallengeCnameTarget : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateManagementPolicies"] = state ? state.certificateManagementPolicies : undefined;
            resourceInputs["cnameTarget"] = state ? state.cnameTarget : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["httpEndpointConfigurationId"] = state ? state.httpEndpointConfigurationId : undefined;
            resourceInputs["httpsEndpointConfigurationId"] = state ? state.httpsEndpointConfigurationId : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as ReservedDomainArgs | undefined;
            resourceInputs["acmeChallengeCnameTarget"] = args ? args.acmeChallengeCnameTarget : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["certificateManagementPolicies"] = args ? args.certificateManagementPolicies : undefined;
            resourceInputs["cnameTarget"] = args ? args.cnameTarget : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpEndpointConfigurationId"] = args ? args.httpEndpointConfigurationId : undefined;
            resourceInputs["httpsEndpointConfigurationId"] = args ? args.httpsEndpointConfigurationId : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["domain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReservedDomain resources.
 */
export interface ReservedDomainState {
    /**
     * DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
     */
    acmeChallengeCnameTarget?: pulumi.Input<string>;
    /**
     * ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificateManagementPolicy`.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
     */
    certificateManagementPolicies?: pulumi.Input<pulumi.Input<inputs.ReservedDomainCertificateManagementPolicy>[]>;
    /**
     * DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
     */
    cnameTarget?: pulumi.Input<string>;
    /**
     * human-readable description of what this reserved domain will be used for
     */
    description?: pulumi.Input<string>;
    /**
     * hostname of the reserved domain
     */
    domain?: pulumi.Input<string>;
    /**
     * ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
     */
    httpEndpointConfigurationId?: pulumi.Input<string>;
    /**
     * ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
     */
    httpsEndpointConfigurationId?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
     */
    name?: pulumi.Input<string>;
    /**
     * reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReservedDomain resource.
 */
export interface ReservedDomainArgs {
    /**
     * DNS CNAME target for the host _acme-challenge.example.com, where example.com is your reserved domain name. This is required to issue certificates for wildcard, non-ngrok reserved domains. Must be null for non-wildcard domains and ngrok subdomains.
     */
    acmeChallengeCnameTarget?: pulumi.Input<string>;
    /**
     * ID of a user-uploaded TLS certificate to use for connections to targeting this domain. Optional, mutually exclusive with `certificateManagementPolicy`.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * configuration for automatic management of TLS certificates for this domain, or null if automatic management is disabled
     */
    certificateManagementPolicies?: pulumi.Input<pulumi.Input<inputs.ReservedDomainCertificateManagementPolicy>[]>;
    /**
     * DNS CNAME target for a custom hostname, or null if the reserved domain is a subdomain of *.ngrok.io
     */
    cnameTarget?: pulumi.Input<string>;
    /**
     * human-readable description of what this reserved domain will be used for
     */
    description?: pulumi.Input<string>;
    /**
     * ID of an endpoint configuration of type http that will be used to handle inbound http traffic to this domain
     */
    httpEndpointConfigurationId?: pulumi.Input<string>;
    /**
     * ID of an endpoint configuration of type https that will be used to handle inbound https traffic to this domain
     */
    httpsEndpointConfigurationId?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this reserved domain. Optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * the domain name to reserve. It may be a full domain name like app.example.com. If the name does not contain a '.' it will reserve that subdomain on ngrok.io.
     */
    name?: pulumi.Input<string>;
    /**
     * reserve the domain in this geographic ngrok datacenter. Optional, default is us. (au, eu, ap, us, jp, in, sa)
     */
    region?: pulumi.Input<string>;
}
