// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A Tunnel Group Backend balances traffic among all online tunnels that match
 *  a label selector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ngrok from "@pierskarsenbarg/ngrok";
 *
 * const example = new ngrok.TunnelGroupBackend("example", {
 *     description: "acme tunnel group",
 *     labels: {
 *         baz: "qux",
 *         foo: "bar",
 *     },
 *     metadata: "{\"environment\": \"staging\"}",
 * });
 * ```
 */
export class TunnelGroupBackend extends pulumi.CustomResource {
    /**
     * Get an existing TunnelGroupBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TunnelGroupBackendState, opts?: pulumi.CustomResourceOptions): TunnelGroupBackend {
        return new TunnelGroupBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/tunnelGroupBackend:TunnelGroupBackend';

    /**
     * Returns true if the given object is an instance of TunnelGroupBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TunnelGroupBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TunnelGroupBackend.__pulumiType;
    }

    /**
     * timestamp when the backend was created, RFC 3339 format
     */
    public readonly createdAt!: pulumi.Output<string>;
    /**
     * human-readable description of this backend. Optional
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * labels to watch for tunnels on, e.g. app->foo, dc->bar
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * arbitrary user-defined machine-readable data of this backend. Optional
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * tunnels matching this backend
     */
    public readonly tunnels!: pulumi.Output<outputs.TunnelGroupBackendTunnel[]>;
    /**
     * URI of the TunnelGroupBackend API resource
     */
    public readonly uri!: pulumi.Output<string>;

    /**
     * Create a TunnelGroupBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TunnelGroupBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TunnelGroupBackendArgs | TunnelGroupBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TunnelGroupBackendState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["tunnels"] = state ? state.tunnels : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as TunnelGroupBackendArgs | undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["tunnels"] = args ? args.tunnels : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TunnelGroupBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TunnelGroupBackend resources.
 */
export interface TunnelGroupBackendState {
    /**
     * timestamp when the backend was created, RFC 3339 format
     */
    createdAt?: pulumi.Input<string>;
    /**
     * human-readable description of this backend. Optional
     */
    description?: pulumi.Input<string>;
    /**
     * labels to watch for tunnels on, e.g. app->foo, dc->bar
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * arbitrary user-defined machine-readable data of this backend. Optional
     */
    metadata?: pulumi.Input<string>;
    /**
     * tunnels matching this backend
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.TunnelGroupBackendTunnel>[]>;
    /**
     * URI of the TunnelGroupBackend API resource
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TunnelGroupBackend resource.
 */
export interface TunnelGroupBackendArgs {
    /**
     * timestamp when the backend was created, RFC 3339 format
     */
    createdAt?: pulumi.Input<string>;
    /**
     * human-readable description of this backend. Optional
     */
    description?: pulumi.Input<string>;
    /**
     * labels to watch for tunnels on, e.g. app->foo, dc->bar
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * arbitrary user-defined machine-readable data of this backend. Optional
     */
    metadata?: pulumi.Input<string>;
    /**
     * tunnels matching this backend
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.TunnelGroupBackendTunnel>[]>;
    /**
     * URI of the TunnelGroupBackend API resource
     */
    uri?: pulumi.Input<string>;
}
