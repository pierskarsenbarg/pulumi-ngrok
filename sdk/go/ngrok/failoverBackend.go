// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A Failover backend defines failover behavior within a list of referenced
//
//	backends. Traffic is sent to the first backend in the list. If that backend
//	is offline or no connection can be established, ngrok attempts to connect to
//	the next backend in the list until one is successful.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ngrok.NewFailoverBackend(ctx, "example", &ngrok.FailoverBackendArgs{
//				Backends: pulumi.StringArray{
//					pulumi.String("bkdhr_26rOyncxuCZ0JdIjYiEDGlsh1lO"),
//				},
//				Description: pulumi.String("acme failover"),
//				Metadata:    pulumi.String("{\"environment\": \"staging\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FailoverBackend struct {
	pulumi.CustomResourceState

	// the ids of the child backends in order
	Backends pulumi.StringArrayOutput `pulumi:"backends"`
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// human-readable description of this backend. Optional
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// URI of the FailoverBackend API resource
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewFailoverBackend registers a new resource with the given unique name, arguments, and options.
func NewFailoverBackend(ctx *pulumi.Context,
	name string, args *FailoverBackendArgs, opts ...pulumi.ResourceOption) (*FailoverBackend, error) {
	if args == nil {
		args = &FailoverBackendArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FailoverBackend
	err := ctx.RegisterResource("ngrok:index/failoverBackend:FailoverBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFailoverBackend gets an existing FailoverBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFailoverBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FailoverBackendState, opts ...pulumi.ResourceOption) (*FailoverBackend, error) {
	var resource FailoverBackend
	err := ctx.ReadResource("ngrok:index/failoverBackend:FailoverBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FailoverBackend resources.
type failoverBackendState struct {
	// the ids of the child backends in order
	Backends []string `pulumi:"backends"`
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt *string `pulumi:"createdAt"`
	// human-readable description of this backend. Optional
	Description *string `pulumi:"description"`
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata *string `pulumi:"metadata"`
	// URI of the FailoverBackend API resource
	Uri *string `pulumi:"uri"`
}

type FailoverBackendState struct {
	// the ids of the child backends in order
	Backends pulumi.StringArrayInput
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt pulumi.StringPtrInput
	// human-readable description of this backend. Optional
	Description pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata pulumi.StringPtrInput
	// URI of the FailoverBackend API resource
	Uri pulumi.StringPtrInput
}

func (FailoverBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*failoverBackendState)(nil)).Elem()
}

type failoverBackendArgs struct {
	// the ids of the child backends in order
	Backends []string `pulumi:"backends"`
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt *string `pulumi:"createdAt"`
	// human-readable description of this backend. Optional
	Description *string `pulumi:"description"`
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata *string `pulumi:"metadata"`
	// URI of the FailoverBackend API resource
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a FailoverBackend resource.
type FailoverBackendArgs struct {
	// the ids of the child backends in order
	Backends pulumi.StringArrayInput
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt pulumi.StringPtrInput
	// human-readable description of this backend. Optional
	Description pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata pulumi.StringPtrInput
	// URI of the FailoverBackend API resource
	Uri pulumi.StringPtrInput
}

func (FailoverBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*failoverBackendArgs)(nil)).Elem()
}

type FailoverBackendInput interface {
	pulumi.Input

	ToFailoverBackendOutput() FailoverBackendOutput
	ToFailoverBackendOutputWithContext(ctx context.Context) FailoverBackendOutput
}

func (*FailoverBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverBackend)(nil)).Elem()
}

func (i *FailoverBackend) ToFailoverBackendOutput() FailoverBackendOutput {
	return i.ToFailoverBackendOutputWithContext(context.Background())
}

func (i *FailoverBackend) ToFailoverBackendOutputWithContext(ctx context.Context) FailoverBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverBackendOutput)
}

func (i *FailoverBackend) ToOutput(ctx context.Context) pulumix.Output[*FailoverBackend] {
	return pulumix.Output[*FailoverBackend]{
		OutputState: i.ToFailoverBackendOutputWithContext(ctx).OutputState,
	}
}

// FailoverBackendArrayInput is an input type that accepts FailoverBackendArray and FailoverBackendArrayOutput values.
// You can construct a concrete instance of `FailoverBackendArrayInput` via:
//
//	FailoverBackendArray{ FailoverBackendArgs{...} }
type FailoverBackendArrayInput interface {
	pulumi.Input

	ToFailoverBackendArrayOutput() FailoverBackendArrayOutput
	ToFailoverBackendArrayOutputWithContext(context.Context) FailoverBackendArrayOutput
}

type FailoverBackendArray []FailoverBackendInput

func (FailoverBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FailoverBackend)(nil)).Elem()
}

func (i FailoverBackendArray) ToFailoverBackendArrayOutput() FailoverBackendArrayOutput {
	return i.ToFailoverBackendArrayOutputWithContext(context.Background())
}

func (i FailoverBackendArray) ToFailoverBackendArrayOutputWithContext(ctx context.Context) FailoverBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverBackendArrayOutput)
}

func (i FailoverBackendArray) ToOutput(ctx context.Context) pulumix.Output[[]*FailoverBackend] {
	return pulumix.Output[[]*FailoverBackend]{
		OutputState: i.ToFailoverBackendArrayOutputWithContext(ctx).OutputState,
	}
}

// FailoverBackendMapInput is an input type that accepts FailoverBackendMap and FailoverBackendMapOutput values.
// You can construct a concrete instance of `FailoverBackendMapInput` via:
//
//	FailoverBackendMap{ "key": FailoverBackendArgs{...} }
type FailoverBackendMapInput interface {
	pulumi.Input

	ToFailoverBackendMapOutput() FailoverBackendMapOutput
	ToFailoverBackendMapOutputWithContext(context.Context) FailoverBackendMapOutput
}

type FailoverBackendMap map[string]FailoverBackendInput

func (FailoverBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FailoverBackend)(nil)).Elem()
}

func (i FailoverBackendMap) ToFailoverBackendMapOutput() FailoverBackendMapOutput {
	return i.ToFailoverBackendMapOutputWithContext(context.Background())
}

func (i FailoverBackendMap) ToFailoverBackendMapOutputWithContext(ctx context.Context) FailoverBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverBackendMapOutput)
}

func (i FailoverBackendMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FailoverBackend] {
	return pulumix.Output[map[string]*FailoverBackend]{
		OutputState: i.ToFailoverBackendMapOutputWithContext(ctx).OutputState,
	}
}

type FailoverBackendOutput struct{ *pulumi.OutputState }

func (FailoverBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverBackend)(nil)).Elem()
}

func (o FailoverBackendOutput) ToFailoverBackendOutput() FailoverBackendOutput {
	return o
}

func (o FailoverBackendOutput) ToFailoverBackendOutputWithContext(ctx context.Context) FailoverBackendOutput {
	return o
}

func (o FailoverBackendOutput) ToOutput(ctx context.Context) pulumix.Output[*FailoverBackend] {
	return pulumix.Output[*FailoverBackend]{
		OutputState: o.OutputState,
	}
}

// the ids of the child backends in order
func (o FailoverBackendOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FailoverBackend) pulumi.StringArrayOutput { return v.Backends }).(pulumi.StringArrayOutput)
}

// timestamp when the backend was created, RFC 3339 format
func (o FailoverBackendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FailoverBackend) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// human-readable description of this backend. Optional
func (o FailoverBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverBackend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// arbitrary user-defined machine-readable data of this backend. Optional
func (o FailoverBackendOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverBackend) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// URI of the FailoverBackend API resource
func (o FailoverBackendOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *FailoverBackend) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type FailoverBackendArrayOutput struct{ *pulumi.OutputState }

func (FailoverBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FailoverBackend)(nil)).Elem()
}

func (o FailoverBackendArrayOutput) ToFailoverBackendArrayOutput() FailoverBackendArrayOutput {
	return o
}

func (o FailoverBackendArrayOutput) ToFailoverBackendArrayOutputWithContext(ctx context.Context) FailoverBackendArrayOutput {
	return o
}

func (o FailoverBackendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FailoverBackend] {
	return pulumix.Output[[]*FailoverBackend]{
		OutputState: o.OutputState,
	}
}

func (o FailoverBackendArrayOutput) Index(i pulumi.IntInput) FailoverBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FailoverBackend {
		return vs[0].([]*FailoverBackend)[vs[1].(int)]
	}).(FailoverBackendOutput)
}

type FailoverBackendMapOutput struct{ *pulumi.OutputState }

func (FailoverBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FailoverBackend)(nil)).Elem()
}

func (o FailoverBackendMapOutput) ToFailoverBackendMapOutput() FailoverBackendMapOutput {
	return o
}

func (o FailoverBackendMapOutput) ToFailoverBackendMapOutputWithContext(ctx context.Context) FailoverBackendMapOutput {
	return o
}

func (o FailoverBackendMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FailoverBackend] {
	return pulumix.Output[map[string]*FailoverBackend]{
		OutputState: o.OutputState,
	}
}

func (o FailoverBackendMapOutput) MapIndex(k pulumi.StringInput) FailoverBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FailoverBackend {
		return vs[0].(map[string]*FailoverBackend)[vs[1].(string)]
	}).(FailoverBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverBackendInput)(nil)).Elem(), &FailoverBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverBackendArrayInput)(nil)).Elem(), FailoverBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverBackendMapInput)(nil)).Elem(), FailoverBackendMap{})
	pulumi.RegisterOutputType(FailoverBackendOutput{})
	pulumi.RegisterOutputType(FailoverBackendArrayOutput{})
	pulumi.RegisterOutputType(FailoverBackendMapOutput{})
}
