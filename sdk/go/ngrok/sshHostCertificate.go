// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// SSH Host Certificates along with the corresponding private key allows an SSH
//
//	server to assert its authenticity to connecting SSH clients who trust the
//	SSH Certificate Authority that was used to sign the certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ngrok.NewSshHostCertificate(ctx, "example", &ngrok.SshHostCertificateArgs{
//				Description: pulumi.String("personal server"),
//				Principals: pulumi.StringArray{
//					pulumi.String("inconshreveable.com"),
//					pulumi.String("10.2.42.9"),
//				},
//				PublicKey:                 pulumi.String("ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI3oSgxrOEJ+tIJ/n6VYtxQIFvynqlOHpfOAJ4x4OfmMYDkbf8dr6RAuUSf+ZC2HMCujta7EjZ9t+6v08Ue+Cgk= inconshreveable.com"),
//				SshCertificateAuthorityId: pulumi.String("sshca_26rOyuA7GzMmCmvfOui9TPWNxLa"),
//				ValidUntil:                pulumi.String("2022-06-22T22:21:35-05:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SshHostCertificate struct {
	pulumi.CustomResourceState

	// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
	Principals pulumi.StringArrayOutput `pulumi:"principals"`
	// a public key in OpenSSH Authorized Keys format that this certificate signs
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// the ssh certificate authority that is used to sign this ssh host certificate
	SshCertificateAuthorityId pulumi.StringOutput `pulumi:"sshCertificateAuthorityId"`
	// the time when the ssh host certificate becomes valid, in RFC 3339 format.
	ValidAfter pulumi.StringPtrOutput `pulumi:"validAfter"`
	// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
	ValidUntil pulumi.StringPtrOutput `pulumi:"validUntil"`
}

// NewSshHostCertificate registers a new resource with the given unique name, arguments, and options.
func NewSshHostCertificate(ctx *pulumi.Context,
	name string, args *SshHostCertificateArgs, opts ...pulumi.ResourceOption) (*SshHostCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.SshCertificateAuthorityId == nil {
		return nil, errors.New("invalid value for required argument 'SshCertificateAuthorityId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SshHostCertificate
	err := ctx.RegisterResource("ngrok:index/sshHostCertificate:SshHostCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshHostCertificate gets an existing SshHostCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshHostCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshHostCertificateState, opts ...pulumi.ResourceOption) (*SshHostCertificate, error) {
	var resource SshHostCertificate
	err := ctx.ReadResource("ngrok:index/sshHostCertificate:SshHostCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshHostCertificate resources.
type sshHostCertificateState struct {
	// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
	Certificate *string `pulumi:"certificate"`
	// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
	KeyType *string `pulumi:"keyType"`
	// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
	Principals []string `pulumi:"principals"`
	// a public key in OpenSSH Authorized Keys format that this certificate signs
	PublicKey *string `pulumi:"publicKey"`
	// the ssh certificate authority that is used to sign this ssh host certificate
	SshCertificateAuthorityId *string `pulumi:"sshCertificateAuthorityId"`
	// the time when the ssh host certificate becomes valid, in RFC 3339 format.
	ValidAfter *string `pulumi:"validAfter"`
	// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
	ValidUntil *string `pulumi:"validUntil"`
}

type SshHostCertificateState struct {
	// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
	Certificate pulumi.StringPtrInput
	// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
	KeyType pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
	Principals pulumi.StringArrayInput
	// a public key in OpenSSH Authorized Keys format that this certificate signs
	PublicKey pulumi.StringPtrInput
	// the ssh certificate authority that is used to sign this ssh host certificate
	SshCertificateAuthorityId pulumi.StringPtrInput
	// the time when the ssh host certificate becomes valid, in RFC 3339 format.
	ValidAfter pulumi.StringPtrInput
	// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
	ValidUntil pulumi.StringPtrInput
}

func (SshHostCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshHostCertificateState)(nil)).Elem()
}

type sshHostCertificateArgs struct {
	// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
	Certificate *string `pulumi:"certificate"`
	// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
	KeyType *string `pulumi:"keyType"`
	// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
	Principals []string `pulumi:"principals"`
	// a public key in OpenSSH Authorized Keys format that this certificate signs
	PublicKey string `pulumi:"publicKey"`
	// the ssh certificate authority that is used to sign this ssh host certificate
	SshCertificateAuthorityId string `pulumi:"sshCertificateAuthorityId"`
	// the time when the ssh host certificate becomes valid, in RFC 3339 format.
	ValidAfter *string `pulumi:"validAfter"`
	// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
	ValidUntil *string `pulumi:"validUntil"`
}

// The set of arguments for constructing a SshHostCertificate resource.
type SshHostCertificateArgs struct {
	// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
	Certificate pulumi.StringPtrInput
	// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
	KeyType pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
	Principals pulumi.StringArrayInput
	// a public key in OpenSSH Authorized Keys format that this certificate signs
	PublicKey pulumi.StringInput
	// the ssh certificate authority that is used to sign this ssh host certificate
	SshCertificateAuthorityId pulumi.StringInput
	// the time when the ssh host certificate becomes valid, in RFC 3339 format.
	ValidAfter pulumi.StringPtrInput
	// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
	ValidUntil pulumi.StringPtrInput
}

func (SshHostCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshHostCertificateArgs)(nil)).Elem()
}

type SshHostCertificateInput interface {
	pulumi.Input

	ToSshHostCertificateOutput() SshHostCertificateOutput
	ToSshHostCertificateOutputWithContext(ctx context.Context) SshHostCertificateOutput
}

func (*SshHostCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**SshHostCertificate)(nil)).Elem()
}

func (i *SshHostCertificate) ToSshHostCertificateOutput() SshHostCertificateOutput {
	return i.ToSshHostCertificateOutputWithContext(context.Background())
}

func (i *SshHostCertificate) ToSshHostCertificateOutputWithContext(ctx context.Context) SshHostCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshHostCertificateOutput)
}

func (i *SshHostCertificate) ToOutput(ctx context.Context) pulumix.Output[*SshHostCertificate] {
	return pulumix.Output[*SshHostCertificate]{
		OutputState: i.ToSshHostCertificateOutputWithContext(ctx).OutputState,
	}
}

// SshHostCertificateArrayInput is an input type that accepts SshHostCertificateArray and SshHostCertificateArrayOutput values.
// You can construct a concrete instance of `SshHostCertificateArrayInput` via:
//
//	SshHostCertificateArray{ SshHostCertificateArgs{...} }
type SshHostCertificateArrayInput interface {
	pulumi.Input

	ToSshHostCertificateArrayOutput() SshHostCertificateArrayOutput
	ToSshHostCertificateArrayOutputWithContext(context.Context) SshHostCertificateArrayOutput
}

type SshHostCertificateArray []SshHostCertificateInput

func (SshHostCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshHostCertificate)(nil)).Elem()
}

func (i SshHostCertificateArray) ToSshHostCertificateArrayOutput() SshHostCertificateArrayOutput {
	return i.ToSshHostCertificateArrayOutputWithContext(context.Background())
}

func (i SshHostCertificateArray) ToSshHostCertificateArrayOutputWithContext(ctx context.Context) SshHostCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshHostCertificateArrayOutput)
}

func (i SshHostCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]*SshHostCertificate] {
	return pulumix.Output[[]*SshHostCertificate]{
		OutputState: i.ToSshHostCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

// SshHostCertificateMapInput is an input type that accepts SshHostCertificateMap and SshHostCertificateMapOutput values.
// You can construct a concrete instance of `SshHostCertificateMapInput` via:
//
//	SshHostCertificateMap{ "key": SshHostCertificateArgs{...} }
type SshHostCertificateMapInput interface {
	pulumi.Input

	ToSshHostCertificateMapOutput() SshHostCertificateMapOutput
	ToSshHostCertificateMapOutputWithContext(context.Context) SshHostCertificateMapOutput
}

type SshHostCertificateMap map[string]SshHostCertificateInput

func (SshHostCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshHostCertificate)(nil)).Elem()
}

func (i SshHostCertificateMap) ToSshHostCertificateMapOutput() SshHostCertificateMapOutput {
	return i.ToSshHostCertificateMapOutputWithContext(context.Background())
}

func (i SshHostCertificateMap) ToSshHostCertificateMapOutputWithContext(ctx context.Context) SshHostCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshHostCertificateMapOutput)
}

func (i SshHostCertificateMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SshHostCertificate] {
	return pulumix.Output[map[string]*SshHostCertificate]{
		OutputState: i.ToSshHostCertificateMapOutputWithContext(ctx).OutputState,
	}
}

type SshHostCertificateOutput struct{ *pulumi.OutputState }

func (SshHostCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshHostCertificate)(nil)).Elem()
}

func (o SshHostCertificateOutput) ToSshHostCertificateOutput() SshHostCertificateOutput {
	return o
}

func (o SshHostCertificateOutput) ToSshHostCertificateOutputWithContext(ctx context.Context) SshHostCertificateOutput {
	return o
}

func (o SshHostCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[*SshHostCertificate] {
	return pulumix.Output[*SshHostCertificate]{
		OutputState: o.OutputState,
	}
}

// the signed SSH certificate in OpenSSH Authorized Keys format. this value should be placed in a `-cert.pub` certificate file on disk that should be referenced in your `sshdConfig` configuration file with a `HostCertificate` directive
func (o SshHostCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// human-readable description of this SSH Host Certificate. optional, max 255 bytes.
func (o SshHostCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// the key type of the `publicKey`, one of `rsa`, `ecdsa` or `ed25519`
func (o SshHostCertificateOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// arbitrary user-defined machine-readable data of this SSH Host Certificate. optional, max 4096 bytes.
func (o SshHostCertificateOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// the list of principals included in the ssh host certificate. This is the list of hostnames and/or IP addresses that are authorized to serve SSH traffic with this certificate. Dangerously, if no principals are specified, this certificate is considered valid for all hosts.
func (o SshHostCertificateOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringArrayOutput { return v.Principals }).(pulumi.StringArrayOutput)
}

// a public key in OpenSSH Authorized Keys format that this certificate signs
func (o SshHostCertificateOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// the ssh certificate authority that is used to sign this ssh host certificate
func (o SshHostCertificateOutput) SshCertificateAuthorityId() pulumi.StringOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringOutput { return v.SshCertificateAuthorityId }).(pulumi.StringOutput)
}

// the time when the ssh host certificate becomes valid, in RFC 3339 format.
func (o SshHostCertificateOutput) ValidAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringPtrOutput { return v.ValidAfter }).(pulumi.StringPtrOutput)
}

// the time after which the ssh host certificate becomes invalid, in RFC 3339 format. the OpenSSH certificates RFC calls this `validBefore`.
func (o SshHostCertificateOutput) ValidUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshHostCertificate) pulumi.StringPtrOutput { return v.ValidUntil }).(pulumi.StringPtrOutput)
}

type SshHostCertificateArrayOutput struct{ *pulumi.OutputState }

func (SshHostCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshHostCertificate)(nil)).Elem()
}

func (o SshHostCertificateArrayOutput) ToSshHostCertificateArrayOutput() SshHostCertificateArrayOutput {
	return o
}

func (o SshHostCertificateArrayOutput) ToSshHostCertificateArrayOutputWithContext(ctx context.Context) SshHostCertificateArrayOutput {
	return o
}

func (o SshHostCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SshHostCertificate] {
	return pulumix.Output[[]*SshHostCertificate]{
		OutputState: o.OutputState,
	}
}

func (o SshHostCertificateArrayOutput) Index(i pulumi.IntInput) SshHostCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SshHostCertificate {
		return vs[0].([]*SshHostCertificate)[vs[1].(int)]
	}).(SshHostCertificateOutput)
}

type SshHostCertificateMapOutput struct{ *pulumi.OutputState }

func (SshHostCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshHostCertificate)(nil)).Elem()
}

func (o SshHostCertificateMapOutput) ToSshHostCertificateMapOutput() SshHostCertificateMapOutput {
	return o
}

func (o SshHostCertificateMapOutput) ToSshHostCertificateMapOutputWithContext(ctx context.Context) SshHostCertificateMapOutput {
	return o
}

func (o SshHostCertificateMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SshHostCertificate] {
	return pulumix.Output[map[string]*SshHostCertificate]{
		OutputState: o.OutputState,
	}
}

func (o SshHostCertificateMapOutput) MapIndex(k pulumi.StringInput) SshHostCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SshHostCertificate {
		return vs[0].(map[string]*SshHostCertificate)[vs[1].(string)]
	}).(SshHostCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshHostCertificateInput)(nil)).Elem(), &SshHostCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshHostCertificateArrayInput)(nil)).Elem(), SshHostCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshHostCertificateMapInput)(nil)).Elem(), SshHostCertificateMap{})
	pulumi.RegisterOutputType(SshHostCertificateOutput{})
	pulumi.RegisterOutputType(SshHostCertificateArrayOutput{})
	pulumi.RegisterOutputType(SshHostCertificateMapOutput{})
}
