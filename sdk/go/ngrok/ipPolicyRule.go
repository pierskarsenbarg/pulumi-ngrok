// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// IP Policy Rules are the IPv4 or IPv6 CIDRs entries that
//
//	make up an IP Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ngrok.NewIpPolicyRule(ctx, "example", &ngrok.IpPolicyRuleArgs{
//				Action:      pulumi.String("allow"),
//				Cidr:        pulumi.String("212.3.14.0/24"),
//				Description: pulumi.String("nyc office"),
//				IpPolicyId:  pulumi.String("ipp_26rOydjEUNZSLTi8bYXBg278qUT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpPolicyRule struct {
	pulumi.CustomResourceState

	// the action to apply to the policy rule, either `allow` or `deny`
	Action pulumi.StringOutput `pulumi:"action"`
	// an IP or IP range specified in CIDR notation. IPv4 and IPv6 are both supported.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// human-readable description of the source IPs of this IP rule. optional, max 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of the IP policy this IP policy rule will be attached to
	IpPolicyId pulumi.StringOutput `pulumi:"ipPolicyId"`
	// arbitrary user-defined machine-readable data of this IP policy rule. optional, max 4096 bytes.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
}

// NewIpPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewIpPolicyRule(ctx *pulumi.Context,
	name string, args *IpPolicyRuleArgs, opts ...pulumi.ResourceOption) (*IpPolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.IpPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'IpPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpPolicyRule
	err := ctx.RegisterResource("ngrok:index/ipPolicyRule:IpPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpPolicyRule gets an existing IpPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpPolicyRuleState, opts ...pulumi.ResourceOption) (*IpPolicyRule, error) {
	var resource IpPolicyRule
	err := ctx.ReadResource("ngrok:index/ipPolicyRule:IpPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpPolicyRule resources.
type ipPolicyRuleState struct {
	// the action to apply to the policy rule, either `allow` or `deny`
	Action *string `pulumi:"action"`
	// an IP or IP range specified in CIDR notation. IPv4 and IPv6 are both supported.
	Cidr *string `pulumi:"cidr"`
	// human-readable description of the source IPs of this IP rule. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// ID of the IP policy this IP policy rule will be attached to
	IpPolicyId *string `pulumi:"ipPolicyId"`
	// arbitrary user-defined machine-readable data of this IP policy rule. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
}

type IpPolicyRuleState struct {
	// the action to apply to the policy rule, either `allow` or `deny`
	Action pulumi.StringPtrInput
	// an IP or IP range specified in CIDR notation. IPv4 and IPv6 are both supported.
	Cidr pulumi.StringPtrInput
	// human-readable description of the source IPs of this IP rule. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// ID of the IP policy this IP policy rule will be attached to
	IpPolicyId pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this IP policy rule. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
}

func (IpPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipPolicyRuleState)(nil)).Elem()
}

type ipPolicyRuleArgs struct {
	// the action to apply to the policy rule, either `allow` or `deny`
	Action string `pulumi:"action"`
	// an IP or IP range specified in CIDR notation. IPv4 and IPv6 are both supported.
	Cidr string `pulumi:"cidr"`
	// human-readable description of the source IPs of this IP rule. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// ID of the IP policy this IP policy rule will be attached to
	IpPolicyId string `pulumi:"ipPolicyId"`
	// arbitrary user-defined machine-readable data of this IP policy rule. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
}

// The set of arguments for constructing a IpPolicyRule resource.
type IpPolicyRuleArgs struct {
	// the action to apply to the policy rule, either `allow` or `deny`
	Action pulumi.StringInput
	// an IP or IP range specified in CIDR notation. IPv4 and IPv6 are both supported.
	Cidr pulumi.StringInput
	// human-readable description of the source IPs of this IP rule. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// ID of the IP policy this IP policy rule will be attached to
	IpPolicyId pulumi.StringInput
	// arbitrary user-defined machine-readable data of this IP policy rule. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
}

func (IpPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipPolicyRuleArgs)(nil)).Elem()
}

type IpPolicyRuleInput interface {
	pulumi.Input

	ToIpPolicyRuleOutput() IpPolicyRuleOutput
	ToIpPolicyRuleOutputWithContext(ctx context.Context) IpPolicyRuleOutput
}

func (*IpPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IpPolicyRule)(nil)).Elem()
}

func (i *IpPolicyRule) ToIpPolicyRuleOutput() IpPolicyRuleOutput {
	return i.ToIpPolicyRuleOutputWithContext(context.Background())
}

func (i *IpPolicyRule) ToIpPolicyRuleOutputWithContext(ctx context.Context) IpPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPolicyRuleOutput)
}

func (i *IpPolicyRule) ToOutput(ctx context.Context) pulumix.Output[*IpPolicyRule] {
	return pulumix.Output[*IpPolicyRule]{
		OutputState: i.ToIpPolicyRuleOutputWithContext(ctx).OutputState,
	}
}

// IpPolicyRuleArrayInput is an input type that accepts IpPolicyRuleArray and IpPolicyRuleArrayOutput values.
// You can construct a concrete instance of `IpPolicyRuleArrayInput` via:
//
//	IpPolicyRuleArray{ IpPolicyRuleArgs{...} }
type IpPolicyRuleArrayInput interface {
	pulumi.Input

	ToIpPolicyRuleArrayOutput() IpPolicyRuleArrayOutput
	ToIpPolicyRuleArrayOutputWithContext(context.Context) IpPolicyRuleArrayOutput
}

type IpPolicyRuleArray []IpPolicyRuleInput

func (IpPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpPolicyRule)(nil)).Elem()
}

func (i IpPolicyRuleArray) ToIpPolicyRuleArrayOutput() IpPolicyRuleArrayOutput {
	return i.ToIpPolicyRuleArrayOutputWithContext(context.Background())
}

func (i IpPolicyRuleArray) ToIpPolicyRuleArrayOutputWithContext(ctx context.Context) IpPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPolicyRuleArrayOutput)
}

func (i IpPolicyRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*IpPolicyRule] {
	return pulumix.Output[[]*IpPolicyRule]{
		OutputState: i.ToIpPolicyRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// IpPolicyRuleMapInput is an input type that accepts IpPolicyRuleMap and IpPolicyRuleMapOutput values.
// You can construct a concrete instance of `IpPolicyRuleMapInput` via:
//
//	IpPolicyRuleMap{ "key": IpPolicyRuleArgs{...} }
type IpPolicyRuleMapInput interface {
	pulumi.Input

	ToIpPolicyRuleMapOutput() IpPolicyRuleMapOutput
	ToIpPolicyRuleMapOutputWithContext(context.Context) IpPolicyRuleMapOutput
}

type IpPolicyRuleMap map[string]IpPolicyRuleInput

func (IpPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpPolicyRule)(nil)).Elem()
}

func (i IpPolicyRuleMap) ToIpPolicyRuleMapOutput() IpPolicyRuleMapOutput {
	return i.ToIpPolicyRuleMapOutputWithContext(context.Background())
}

func (i IpPolicyRuleMap) ToIpPolicyRuleMapOutputWithContext(ctx context.Context) IpPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPolicyRuleMapOutput)
}

func (i IpPolicyRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IpPolicyRule] {
	return pulumix.Output[map[string]*IpPolicyRule]{
		OutputState: i.ToIpPolicyRuleMapOutputWithContext(ctx).OutputState,
	}
}

type IpPolicyRuleOutput struct{ *pulumi.OutputState }

func (IpPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpPolicyRule)(nil)).Elem()
}

func (o IpPolicyRuleOutput) ToIpPolicyRuleOutput() IpPolicyRuleOutput {
	return o
}

func (o IpPolicyRuleOutput) ToIpPolicyRuleOutputWithContext(ctx context.Context) IpPolicyRuleOutput {
	return o
}

func (o IpPolicyRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*IpPolicyRule] {
	return pulumix.Output[*IpPolicyRule]{
		OutputState: o.OutputState,
	}
}

// the action to apply to the policy rule, either `allow` or `deny`
func (o IpPolicyRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPolicyRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// an IP or IP range specified in CIDR notation. IPv4 and IPv6 are both supported.
func (o IpPolicyRuleOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPolicyRule) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// human-readable description of the source IPs of this IP rule. optional, max 255 bytes.
func (o IpPolicyRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpPolicyRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ID of the IP policy this IP policy rule will be attached to
func (o IpPolicyRuleOutput) IpPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPolicyRule) pulumi.StringOutput { return v.IpPolicyId }).(pulumi.StringOutput)
}

// arbitrary user-defined machine-readable data of this IP policy rule. optional, max 4096 bytes.
func (o IpPolicyRuleOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpPolicyRule) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

type IpPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (IpPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpPolicyRule)(nil)).Elem()
}

func (o IpPolicyRuleArrayOutput) ToIpPolicyRuleArrayOutput() IpPolicyRuleArrayOutput {
	return o
}

func (o IpPolicyRuleArrayOutput) ToIpPolicyRuleArrayOutputWithContext(ctx context.Context) IpPolicyRuleArrayOutput {
	return o
}

func (o IpPolicyRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IpPolicyRule] {
	return pulumix.Output[[]*IpPolicyRule]{
		OutputState: o.OutputState,
	}
}

func (o IpPolicyRuleArrayOutput) Index(i pulumi.IntInput) IpPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpPolicyRule {
		return vs[0].([]*IpPolicyRule)[vs[1].(int)]
	}).(IpPolicyRuleOutput)
}

type IpPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (IpPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpPolicyRule)(nil)).Elem()
}

func (o IpPolicyRuleMapOutput) ToIpPolicyRuleMapOutput() IpPolicyRuleMapOutput {
	return o
}

func (o IpPolicyRuleMapOutput) ToIpPolicyRuleMapOutputWithContext(ctx context.Context) IpPolicyRuleMapOutput {
	return o
}

func (o IpPolicyRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IpPolicyRule] {
	return pulumix.Output[map[string]*IpPolicyRule]{
		OutputState: o.OutputState,
	}
}

func (o IpPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) IpPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpPolicyRule {
		return vs[0].(map[string]*IpPolicyRule)[vs[1].(string)]
	}).(IpPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpPolicyRuleInput)(nil)).Elem(), &IpPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpPolicyRuleArrayInput)(nil)).Elem(), IpPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpPolicyRuleMapInput)(nil)).Elem(), IpPolicyRuleMap{})
	pulumi.RegisterOutputType(IpPolicyRuleOutput{})
	pulumi.RegisterOutputType(IpPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(IpPolicyRuleMapOutput{})
}
