// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ngrok.NewHttpResponseBackend(ctx, "example", &ngrok.HttpResponseBackendArgs{
//				Body:        pulumi.String("I'm a teapot"),
//				Description: pulumi.String("acme http response"),
//				Headers: pulumi.StringMap{
//					"Content-Type": pulumi.String("text/plain"),
//				},
//				Metadata:   pulumi.String("{\"environment\": \"staging\"}"),
//				StatusCode: pulumi.Int(418),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HttpResponseBackend struct {
	pulumi.CustomResourceState

	// body to return as fixed content
	Body pulumi.StringPtrOutput `pulumi:"body"`
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// human-readable description of this backend. Optional
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// headers to return
	Headers pulumi.StringMapOutput `pulumi:"headers"`
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// status code to return
	StatusCode pulumi.IntPtrOutput `pulumi:"statusCode"`
	// URI of the HTTPResponseBackend API resource
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewHttpResponseBackend registers a new resource with the given unique name, arguments, and options.
func NewHttpResponseBackend(ctx *pulumi.Context,
	name string, args *HttpResponseBackendArgs, opts ...pulumi.ResourceOption) (*HttpResponseBackend, error) {
	if args == nil {
		args = &HttpResponseBackendArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpResponseBackend
	err := ctx.RegisterResource("ngrok:index/httpResponseBackend:HttpResponseBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpResponseBackend gets an existing HttpResponseBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpResponseBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpResponseBackendState, opts ...pulumi.ResourceOption) (*HttpResponseBackend, error) {
	var resource HttpResponseBackend
	err := ctx.ReadResource("ngrok:index/httpResponseBackend:HttpResponseBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpResponseBackend resources.
type httpResponseBackendState struct {
	// body to return as fixed content
	Body *string `pulumi:"body"`
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt *string `pulumi:"createdAt"`
	// human-readable description of this backend. Optional
	Description *string `pulumi:"description"`
	// headers to return
	Headers map[string]string `pulumi:"headers"`
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata *string `pulumi:"metadata"`
	// status code to return
	StatusCode *int `pulumi:"statusCode"`
	// URI of the HTTPResponseBackend API resource
	Uri *string `pulumi:"uri"`
}

type HttpResponseBackendState struct {
	// body to return as fixed content
	Body pulumi.StringPtrInput
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt pulumi.StringPtrInput
	// human-readable description of this backend. Optional
	Description pulumi.StringPtrInput
	// headers to return
	Headers pulumi.StringMapInput
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata pulumi.StringPtrInput
	// status code to return
	StatusCode pulumi.IntPtrInput
	// URI of the HTTPResponseBackend API resource
	Uri pulumi.StringPtrInput
}

func (HttpResponseBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpResponseBackendState)(nil)).Elem()
}

type httpResponseBackendArgs struct {
	// body to return as fixed content
	Body *string `pulumi:"body"`
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt *string `pulumi:"createdAt"`
	// human-readable description of this backend. Optional
	Description *string `pulumi:"description"`
	// headers to return
	Headers map[string]string `pulumi:"headers"`
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata *string `pulumi:"metadata"`
	// status code to return
	StatusCode *int `pulumi:"statusCode"`
	// URI of the HTTPResponseBackend API resource
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a HttpResponseBackend resource.
type HttpResponseBackendArgs struct {
	// body to return as fixed content
	Body pulumi.StringPtrInput
	// timestamp when the backend was created, RFC 3339 format
	CreatedAt pulumi.StringPtrInput
	// human-readable description of this backend. Optional
	Description pulumi.StringPtrInput
	// headers to return
	Headers pulumi.StringMapInput
	// arbitrary user-defined machine-readable data of this backend. Optional
	Metadata pulumi.StringPtrInput
	// status code to return
	StatusCode pulumi.IntPtrInput
	// URI of the HTTPResponseBackend API resource
	Uri pulumi.StringPtrInput
}

func (HttpResponseBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpResponseBackendArgs)(nil)).Elem()
}

type HttpResponseBackendInput interface {
	pulumi.Input

	ToHttpResponseBackendOutput() HttpResponseBackendOutput
	ToHttpResponseBackendOutputWithContext(ctx context.Context) HttpResponseBackendOutput
}

func (*HttpResponseBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpResponseBackend)(nil)).Elem()
}

func (i *HttpResponseBackend) ToHttpResponseBackendOutput() HttpResponseBackendOutput {
	return i.ToHttpResponseBackendOutputWithContext(context.Background())
}

func (i *HttpResponseBackend) ToHttpResponseBackendOutputWithContext(ctx context.Context) HttpResponseBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpResponseBackendOutput)
}

func (i *HttpResponseBackend) ToOutput(ctx context.Context) pulumix.Output[*HttpResponseBackend] {
	return pulumix.Output[*HttpResponseBackend]{
		OutputState: i.ToHttpResponseBackendOutputWithContext(ctx).OutputState,
	}
}

// HttpResponseBackendArrayInput is an input type that accepts HttpResponseBackendArray and HttpResponseBackendArrayOutput values.
// You can construct a concrete instance of `HttpResponseBackendArrayInput` via:
//
//	HttpResponseBackendArray{ HttpResponseBackendArgs{...} }
type HttpResponseBackendArrayInput interface {
	pulumi.Input

	ToHttpResponseBackendArrayOutput() HttpResponseBackendArrayOutput
	ToHttpResponseBackendArrayOutputWithContext(context.Context) HttpResponseBackendArrayOutput
}

type HttpResponseBackendArray []HttpResponseBackendInput

func (HttpResponseBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpResponseBackend)(nil)).Elem()
}

func (i HttpResponseBackendArray) ToHttpResponseBackendArrayOutput() HttpResponseBackendArrayOutput {
	return i.ToHttpResponseBackendArrayOutputWithContext(context.Background())
}

func (i HttpResponseBackendArray) ToHttpResponseBackendArrayOutputWithContext(ctx context.Context) HttpResponseBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpResponseBackendArrayOutput)
}

func (i HttpResponseBackendArray) ToOutput(ctx context.Context) pulumix.Output[[]*HttpResponseBackend] {
	return pulumix.Output[[]*HttpResponseBackend]{
		OutputState: i.ToHttpResponseBackendArrayOutputWithContext(ctx).OutputState,
	}
}

// HttpResponseBackendMapInput is an input type that accepts HttpResponseBackendMap and HttpResponseBackendMapOutput values.
// You can construct a concrete instance of `HttpResponseBackendMapInput` via:
//
//	HttpResponseBackendMap{ "key": HttpResponseBackendArgs{...} }
type HttpResponseBackendMapInput interface {
	pulumi.Input

	ToHttpResponseBackendMapOutput() HttpResponseBackendMapOutput
	ToHttpResponseBackendMapOutputWithContext(context.Context) HttpResponseBackendMapOutput
}

type HttpResponseBackendMap map[string]HttpResponseBackendInput

func (HttpResponseBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpResponseBackend)(nil)).Elem()
}

func (i HttpResponseBackendMap) ToHttpResponseBackendMapOutput() HttpResponseBackendMapOutput {
	return i.ToHttpResponseBackendMapOutputWithContext(context.Background())
}

func (i HttpResponseBackendMap) ToHttpResponseBackendMapOutputWithContext(ctx context.Context) HttpResponseBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpResponseBackendMapOutput)
}

func (i HttpResponseBackendMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*HttpResponseBackend] {
	return pulumix.Output[map[string]*HttpResponseBackend]{
		OutputState: i.ToHttpResponseBackendMapOutputWithContext(ctx).OutputState,
	}
}

type HttpResponseBackendOutput struct{ *pulumi.OutputState }

func (HttpResponseBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpResponseBackend)(nil)).Elem()
}

func (o HttpResponseBackendOutput) ToHttpResponseBackendOutput() HttpResponseBackendOutput {
	return o
}

func (o HttpResponseBackendOutput) ToHttpResponseBackendOutputWithContext(ctx context.Context) HttpResponseBackendOutput {
	return o
}

func (o HttpResponseBackendOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpResponseBackend] {
	return pulumix.Output[*HttpResponseBackend]{
		OutputState: o.OutputState,
	}
}

// body to return as fixed content
func (o HttpResponseBackendOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

// timestamp when the backend was created, RFC 3339 format
func (o HttpResponseBackendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// human-readable description of this backend. Optional
func (o HttpResponseBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// headers to return
func (o HttpResponseBackendOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.StringMapOutput { return v.Headers }).(pulumi.StringMapOutput)
}

// arbitrary user-defined machine-readable data of this backend. Optional
func (o HttpResponseBackendOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// status code to return
func (o HttpResponseBackendOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.IntPtrOutput { return v.StatusCode }).(pulumi.IntPtrOutput)
}

// URI of the HTTPResponseBackend API resource
func (o HttpResponseBackendOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpResponseBackend) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type HttpResponseBackendArrayOutput struct{ *pulumi.OutputState }

func (HttpResponseBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpResponseBackend)(nil)).Elem()
}

func (o HttpResponseBackendArrayOutput) ToHttpResponseBackendArrayOutput() HttpResponseBackendArrayOutput {
	return o
}

func (o HttpResponseBackendArrayOutput) ToHttpResponseBackendArrayOutputWithContext(ctx context.Context) HttpResponseBackendArrayOutput {
	return o
}

func (o HttpResponseBackendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*HttpResponseBackend] {
	return pulumix.Output[[]*HttpResponseBackend]{
		OutputState: o.OutputState,
	}
}

func (o HttpResponseBackendArrayOutput) Index(i pulumi.IntInput) HttpResponseBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpResponseBackend {
		return vs[0].([]*HttpResponseBackend)[vs[1].(int)]
	}).(HttpResponseBackendOutput)
}

type HttpResponseBackendMapOutput struct{ *pulumi.OutputState }

func (HttpResponseBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpResponseBackend)(nil)).Elem()
}

func (o HttpResponseBackendMapOutput) ToHttpResponseBackendMapOutput() HttpResponseBackendMapOutput {
	return o
}

func (o HttpResponseBackendMapOutput) ToHttpResponseBackendMapOutputWithContext(ctx context.Context) HttpResponseBackendMapOutput {
	return o
}

func (o HttpResponseBackendMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*HttpResponseBackend] {
	return pulumix.Output[map[string]*HttpResponseBackend]{
		OutputState: o.OutputState,
	}
}

func (o HttpResponseBackendMapOutput) MapIndex(k pulumi.StringInput) HttpResponseBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpResponseBackend {
		return vs[0].(map[string]*HttpResponseBackend)[vs[1].(string)]
	}).(HttpResponseBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpResponseBackendInput)(nil)).Elem(), &HttpResponseBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpResponseBackendArrayInput)(nil)).Elem(), HttpResponseBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpResponseBackendMapInput)(nil)).Elem(), HttpResponseBackendMap{})
	pulumi.RegisterOutputType(HttpResponseBackendOutput{})
	pulumi.RegisterOutputType(HttpResponseBackendArrayOutput{})
	pulumi.RegisterOutputType(HttpResponseBackendMapOutput{})
}
