// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "ngrok:index/agentIngress:AgentIngress":
		r = &AgentIngress{}
	case "ngrok:index/apiKey:ApiKey":
		r = &ApiKey{}
	case "ngrok:index/certificateAuthority:CertificateAuthority":
		r = &CertificateAuthority{}
	case "ngrok:index/credential:Credential":
		r = &Credential{}
	case "ngrok:index/endpointConfiguration:EndpointConfiguration":
		r = &EndpointConfiguration{}
	case "ngrok:index/eventDestination:EventDestination":
		r = &EventDestination{}
	case "ngrok:index/eventSubscription:EventSubscription":
		r = &EventSubscription{}
	case "ngrok:index/ipPolicy:IpPolicy":
		r = &IpPolicy{}
	case "ngrok:index/ipPolicyRule:IpPolicyRule":
		r = &IpPolicyRule{}
	case "ngrok:index/ipRestriction:IpRestriction":
		r = &IpRestriction{}
	case "ngrok:index/reservedAddress:ReservedAddress":
		r = &ReservedAddress{}
	case "ngrok:index/reservedDomain:ReservedDomain":
		r = &ReservedDomain{}
	case "ngrok:index/sshCertificateAuthority:SshCertificateAuthority":
		r = &SshCertificateAuthority{}
	case "ngrok:index/sshCredential:SshCredential":
		r = &SshCredential{}
	case "ngrok:index/sshHostCertificate:SshHostCertificate":
		r = &SshHostCertificate{}
	case "ngrok:index/sshUserCertificate:SshUserCertificate":
		r = &SshUserCertificate{}
	case "ngrok:index/tlsCertificate:TlsCertificate":
		r = &TlsCertificate{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:ngrok" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/agentIngress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/apiKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/certificateAuthority",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/credential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/endpointConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/eventDestination",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/eventSubscription",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/ipPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/ipPolicyRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/ipRestriction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/reservedAddress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/reservedDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/sshCertificateAuthority",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/sshCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/sshHostCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/sshUserCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ngrok",
		"index/tlsCertificate",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"ngrok",
		&pkg{version},
	)
}
