// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventDestination struct {
	pulumi.CustomResourceState

	// Human-readable description of the Event Destination. Optional, max 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatchLogs`, or `s3`.
	Targets             EventDestinationTargetArrayOutput `pulumi:"targets"`
	VerifyWithTestEvent pulumi.BoolPtrOutput              `pulumi:"verifyWithTestEvent"`
}

// NewEventDestination registers a new resource with the given unique name, arguments, and options.
func NewEventDestination(ctx *pulumi.Context,
	name string, args *EventDestinationArgs, opts ...pulumi.ResourceOption) (*EventDestination, error) {
	if args == nil {
		args = &EventDestinationArgs{}
	}

	var resource EventDestination
	err := ctx.RegisterResource("ngrok:index/eventDestination:EventDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventDestination gets an existing EventDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventDestinationState, opts ...pulumi.ResourceOption) (*EventDestination, error) {
	var resource EventDestination
	err := ctx.ReadResource("ngrok:index/eventDestination:EventDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventDestination resources.
type eventDestinationState struct {
	// Human-readable description of the Event Destination. Optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
	Format *string `pulumi:"format"`
	// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatchLogs`, or `s3`.
	Targets             []EventDestinationTarget `pulumi:"targets"`
	VerifyWithTestEvent *bool                    `pulumi:"verifyWithTestEvent"`
}

type EventDestinationState struct {
	// Human-readable description of the Event Destination. Optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
	Format pulumi.StringPtrInput
	// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatchLogs`, or `s3`.
	Targets             EventDestinationTargetArrayInput
	VerifyWithTestEvent pulumi.BoolPtrInput
}

func (EventDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDestinationState)(nil)).Elem()
}

type eventDestinationArgs struct {
	// Human-readable description of the Event Destination. Optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
	Format *string `pulumi:"format"`
	// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatchLogs`, or `s3`.
	Targets             []EventDestinationTarget `pulumi:"targets"`
	VerifyWithTestEvent *bool                    `pulumi:"verifyWithTestEvent"`
}

// The set of arguments for constructing a EventDestination resource.
type EventDestinationArgs struct {
	// Human-readable description of the Event Destination. Optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
	Format pulumi.StringPtrInput
	// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatchLogs`, or `s3`.
	Targets             EventDestinationTargetArrayInput
	VerifyWithTestEvent pulumi.BoolPtrInput
}

func (EventDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDestinationArgs)(nil)).Elem()
}

type EventDestinationInput interface {
	pulumi.Input

	ToEventDestinationOutput() EventDestinationOutput
	ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput
}

func (*EventDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDestination)(nil)).Elem()
}

func (i *EventDestination) ToEventDestinationOutput() EventDestinationOutput {
	return i.ToEventDestinationOutputWithContext(context.Background())
}

func (i *EventDestination) ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationOutput)
}

// EventDestinationArrayInput is an input type that accepts EventDestinationArray and EventDestinationArrayOutput values.
// You can construct a concrete instance of `EventDestinationArrayInput` via:
//
//	EventDestinationArray{ EventDestinationArgs{...} }
type EventDestinationArrayInput interface {
	pulumi.Input

	ToEventDestinationArrayOutput() EventDestinationArrayOutput
	ToEventDestinationArrayOutputWithContext(context.Context) EventDestinationArrayOutput
}

type EventDestinationArray []EventDestinationInput

func (EventDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventDestination)(nil)).Elem()
}

func (i EventDestinationArray) ToEventDestinationArrayOutput() EventDestinationArrayOutput {
	return i.ToEventDestinationArrayOutputWithContext(context.Background())
}

func (i EventDestinationArray) ToEventDestinationArrayOutputWithContext(ctx context.Context) EventDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationArrayOutput)
}

// EventDestinationMapInput is an input type that accepts EventDestinationMap and EventDestinationMapOutput values.
// You can construct a concrete instance of `EventDestinationMapInput` via:
//
//	EventDestinationMap{ "key": EventDestinationArgs{...} }
type EventDestinationMapInput interface {
	pulumi.Input

	ToEventDestinationMapOutput() EventDestinationMapOutput
	ToEventDestinationMapOutputWithContext(context.Context) EventDestinationMapOutput
}

type EventDestinationMap map[string]EventDestinationInput

func (EventDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventDestination)(nil)).Elem()
}

func (i EventDestinationMap) ToEventDestinationMapOutput() EventDestinationMapOutput {
	return i.ToEventDestinationMapOutputWithContext(context.Background())
}

func (i EventDestinationMap) ToEventDestinationMapOutputWithContext(ctx context.Context) EventDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationMapOutput)
}

type EventDestinationOutput struct{ *pulumi.OutputState }

func (EventDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDestination)(nil)).Elem()
}

func (o EventDestinationOutput) ToEventDestinationOutput() EventDestinationOutput {
	return o
}

func (o EventDestinationOutput) ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput {
	return o
}

// Human-readable description of the Event Destination. Optional, max 255 bytes.
func (o EventDestinationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The output format you would like to serialize events into when sending to their target. Currently the only accepted value is `JSON`.
func (o EventDestinationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// Arbitrary user-defined machine-readable data of this Event Destination. Optional, max 4096 bytes.
func (o EventDestinationOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// An object that encapsulates where and how to send your events. An event destination must contain exactly one of the following objects, leaving the rest null: `kinesis`, `firehose`, `cloudwatchLogs`, or `s3`.
func (o EventDestinationOutput) Targets() EventDestinationTargetArrayOutput {
	return o.ApplyT(func(v *EventDestination) EventDestinationTargetArrayOutput { return v.Targets }).(EventDestinationTargetArrayOutput)
}

func (o EventDestinationOutput) VerifyWithTestEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.BoolPtrOutput { return v.VerifyWithTestEvent }).(pulumi.BoolPtrOutput)
}

type EventDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventDestination)(nil)).Elem()
}

func (o EventDestinationArrayOutput) ToEventDestinationArrayOutput() EventDestinationArrayOutput {
	return o
}

func (o EventDestinationArrayOutput) ToEventDestinationArrayOutputWithContext(ctx context.Context) EventDestinationArrayOutput {
	return o
}

func (o EventDestinationArrayOutput) Index(i pulumi.IntInput) EventDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventDestination {
		return vs[0].([]*EventDestination)[vs[1].(int)]
	}).(EventDestinationOutput)
}

type EventDestinationMapOutput struct{ *pulumi.OutputState }

func (EventDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventDestination)(nil)).Elem()
}

func (o EventDestinationMapOutput) ToEventDestinationMapOutput() EventDestinationMapOutput {
	return o
}

func (o EventDestinationMapOutput) ToEventDestinationMapOutputWithContext(ctx context.Context) EventDestinationMapOutput {
	return o
}

func (o EventDestinationMapOutput) MapIndex(k pulumi.StringInput) EventDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventDestination {
		return vs[0].(map[string]*EventDestination)[vs[1].(string)]
	}).(EventDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationInput)(nil)).Elem(), &EventDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationArrayInput)(nil)).Elem(), EventDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationMapInput)(nil)).Elem(), EventDestinationMap{})
	pulumi.RegisterOutputType(EventDestinationOutput{})
	pulumi.RegisterOutputType(EventDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationMapOutput{})
}
