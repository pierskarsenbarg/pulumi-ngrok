// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An SSH Certificate Authority is a pair of an SSH Certificate and its private
//
//	key that can be used to sign other SSH host and user certificates.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ngrok.NewSshCertificateAuthority(ctx, "example", &ngrok.SshCertificateAuthorityArgs{
//				Description:    pulumi.String("Staging Environment Hosts"),
//				PrivateKeyType: pulumi.String("ed25519"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SshCertificateAuthority struct {
	pulumi.CustomResourceState

	// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// the type of elliptic curve to use when creating an ECDSA key
	EllipticCurve pulumi.StringPtrOutput `pulumi:"ellipticCurve"`
	// the key size to use when creating an RSA key. one of `2048` or `4096`
	KeySize pulumi.IntPtrOutput `pulumi:"keySize"`
	// the type of private key for this SSH Certificate Authority
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
	PrivateKeyType pulumi.StringPtrOutput `pulumi:"privateKeyType"`
	// raw public key for this SSH Certificate Authority
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
}

// NewSshCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewSshCertificateAuthority(ctx *pulumi.Context,
	name string, args *SshCertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*SshCertificateAuthority, error) {
	if args == nil {
		args = &SshCertificateAuthorityArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SshCertificateAuthority
	err := ctx.RegisterResource("ngrok:index/sshCertificateAuthority:SshCertificateAuthority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshCertificateAuthority gets an existing SshCertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshCertificateAuthorityState, opts ...pulumi.ResourceOption) (*SshCertificateAuthority, error) {
	var resource SshCertificateAuthority
	err := ctx.ReadResource("ngrok:index/sshCertificateAuthority:SshCertificateAuthority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshCertificateAuthority resources.
type sshCertificateAuthorityState struct {
	// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// the type of elliptic curve to use when creating an ECDSA key
	EllipticCurve *string `pulumi:"ellipticCurve"`
	// the key size to use when creating an RSA key. one of `2048` or `4096`
	KeySize *int `pulumi:"keySize"`
	// the type of private key for this SSH Certificate Authority
	KeyType *string `pulumi:"keyType"`
	// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
	PrivateKeyType *string `pulumi:"privateKeyType"`
	// raw public key for this SSH Certificate Authority
	PublicKey *string `pulumi:"publicKey"`
}

type SshCertificateAuthorityState struct {
	// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// the type of elliptic curve to use when creating an ECDSA key
	EllipticCurve pulumi.StringPtrInput
	// the key size to use when creating an RSA key. one of `2048` or `4096`
	KeySize pulumi.IntPtrInput
	// the type of private key for this SSH Certificate Authority
	KeyType pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
	PrivateKeyType pulumi.StringPtrInput
	// raw public key for this SSH Certificate Authority
	PublicKey pulumi.StringPtrInput
}

func (SshCertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshCertificateAuthorityState)(nil)).Elem()
}

type sshCertificateAuthorityArgs struct {
	// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// the type of elliptic curve to use when creating an ECDSA key
	EllipticCurve *string `pulumi:"ellipticCurve"`
	// the key size to use when creating an RSA key. one of `2048` or `4096`
	KeySize *int `pulumi:"keySize"`
	// the type of private key for this SSH Certificate Authority
	KeyType *string `pulumi:"keyType"`
	// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
	PrivateKeyType *string `pulumi:"privateKeyType"`
	// raw public key for this SSH Certificate Authority
	PublicKey *string `pulumi:"publicKey"`
}

// The set of arguments for constructing a SshCertificateAuthority resource.
type SshCertificateAuthorityArgs struct {
	// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// the type of elliptic curve to use when creating an ECDSA key
	EllipticCurve pulumi.StringPtrInput
	// the key size to use when creating an RSA key. one of `2048` or `4096`
	KeySize pulumi.IntPtrInput
	// the type of private key for this SSH Certificate Authority
	KeyType pulumi.StringPtrInput
	// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
	PrivateKeyType pulumi.StringPtrInput
	// raw public key for this SSH Certificate Authority
	PublicKey pulumi.StringPtrInput
}

func (SshCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshCertificateAuthorityArgs)(nil)).Elem()
}

type SshCertificateAuthorityInput interface {
	pulumi.Input

	ToSshCertificateAuthorityOutput() SshCertificateAuthorityOutput
	ToSshCertificateAuthorityOutputWithContext(ctx context.Context) SshCertificateAuthorityOutput
}

func (*SshCertificateAuthority) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCertificateAuthority)(nil)).Elem()
}

func (i *SshCertificateAuthority) ToSshCertificateAuthorityOutput() SshCertificateAuthorityOutput {
	return i.ToSshCertificateAuthorityOutputWithContext(context.Background())
}

func (i *SshCertificateAuthority) ToSshCertificateAuthorityOutputWithContext(ctx context.Context) SshCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCertificateAuthorityOutput)
}

// SshCertificateAuthorityArrayInput is an input type that accepts SshCertificateAuthorityArray and SshCertificateAuthorityArrayOutput values.
// You can construct a concrete instance of `SshCertificateAuthorityArrayInput` via:
//
//	SshCertificateAuthorityArray{ SshCertificateAuthorityArgs{...} }
type SshCertificateAuthorityArrayInput interface {
	pulumi.Input

	ToSshCertificateAuthorityArrayOutput() SshCertificateAuthorityArrayOutput
	ToSshCertificateAuthorityArrayOutputWithContext(context.Context) SshCertificateAuthorityArrayOutput
}

type SshCertificateAuthorityArray []SshCertificateAuthorityInput

func (SshCertificateAuthorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshCertificateAuthority)(nil)).Elem()
}

func (i SshCertificateAuthorityArray) ToSshCertificateAuthorityArrayOutput() SshCertificateAuthorityArrayOutput {
	return i.ToSshCertificateAuthorityArrayOutputWithContext(context.Background())
}

func (i SshCertificateAuthorityArray) ToSshCertificateAuthorityArrayOutputWithContext(ctx context.Context) SshCertificateAuthorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCertificateAuthorityArrayOutput)
}

// SshCertificateAuthorityMapInput is an input type that accepts SshCertificateAuthorityMap and SshCertificateAuthorityMapOutput values.
// You can construct a concrete instance of `SshCertificateAuthorityMapInput` via:
//
//	SshCertificateAuthorityMap{ "key": SshCertificateAuthorityArgs{...} }
type SshCertificateAuthorityMapInput interface {
	pulumi.Input

	ToSshCertificateAuthorityMapOutput() SshCertificateAuthorityMapOutput
	ToSshCertificateAuthorityMapOutputWithContext(context.Context) SshCertificateAuthorityMapOutput
}

type SshCertificateAuthorityMap map[string]SshCertificateAuthorityInput

func (SshCertificateAuthorityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshCertificateAuthority)(nil)).Elem()
}

func (i SshCertificateAuthorityMap) ToSshCertificateAuthorityMapOutput() SshCertificateAuthorityMapOutput {
	return i.ToSshCertificateAuthorityMapOutputWithContext(context.Background())
}

func (i SshCertificateAuthorityMap) ToSshCertificateAuthorityMapOutputWithContext(ctx context.Context) SshCertificateAuthorityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCertificateAuthorityMapOutput)
}

type SshCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (SshCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCertificateAuthority)(nil)).Elem()
}

func (o SshCertificateAuthorityOutput) ToSshCertificateAuthorityOutput() SshCertificateAuthorityOutput {
	return o
}

func (o SshCertificateAuthorityOutput) ToSshCertificateAuthorityOutputWithContext(ctx context.Context) SshCertificateAuthorityOutput {
	return o
}

// human-readable description of this SSH Certificate Authority. optional, max 255 bytes.
func (o SshCertificateAuthorityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// the type of elliptic curve to use when creating an ECDSA key
func (o SshCertificateAuthorityOutput) EllipticCurve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.StringPtrOutput { return v.EllipticCurve }).(pulumi.StringPtrOutput)
}

// the key size to use when creating an RSA key. one of `2048` or `4096`
func (o SshCertificateAuthorityOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.IntPtrOutput { return v.KeySize }).(pulumi.IntPtrOutput)
}

// the type of private key for this SSH Certificate Authority
func (o SshCertificateAuthorityOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// arbitrary user-defined machine-readable data of this SSH Certificate Authority. optional, max 4096 bytes.
func (o SshCertificateAuthorityOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// the type of private key to generate. one of `rsa`, `ecdsa`, `ed25519`
func (o SshCertificateAuthorityOutput) PrivateKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.StringPtrOutput { return v.PrivateKeyType }).(pulumi.StringPtrOutput)
}

// raw public key for this SSH Certificate Authority
func (o SshCertificateAuthorityOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SshCertificateAuthority) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

type SshCertificateAuthorityArrayOutput struct{ *pulumi.OutputState }

func (SshCertificateAuthorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshCertificateAuthority)(nil)).Elem()
}

func (o SshCertificateAuthorityArrayOutput) ToSshCertificateAuthorityArrayOutput() SshCertificateAuthorityArrayOutput {
	return o
}

func (o SshCertificateAuthorityArrayOutput) ToSshCertificateAuthorityArrayOutputWithContext(ctx context.Context) SshCertificateAuthorityArrayOutput {
	return o
}

func (o SshCertificateAuthorityArrayOutput) Index(i pulumi.IntInput) SshCertificateAuthorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SshCertificateAuthority {
		return vs[0].([]*SshCertificateAuthority)[vs[1].(int)]
	}).(SshCertificateAuthorityOutput)
}

type SshCertificateAuthorityMapOutput struct{ *pulumi.OutputState }

func (SshCertificateAuthorityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshCertificateAuthority)(nil)).Elem()
}

func (o SshCertificateAuthorityMapOutput) ToSshCertificateAuthorityMapOutput() SshCertificateAuthorityMapOutput {
	return o
}

func (o SshCertificateAuthorityMapOutput) ToSshCertificateAuthorityMapOutputWithContext(ctx context.Context) SshCertificateAuthorityMapOutput {
	return o
}

func (o SshCertificateAuthorityMapOutput) MapIndex(k pulumi.StringInput) SshCertificateAuthorityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SshCertificateAuthority {
		return vs[0].(map[string]*SshCertificateAuthority)[vs[1].(string)]
	}).(SshCertificateAuthorityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshCertificateAuthorityInput)(nil)).Elem(), &SshCertificateAuthority{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCertificateAuthorityArrayInput)(nil)).Elem(), SshCertificateAuthorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCertificateAuthorityMapInput)(nil)).Elem(), SshCertificateAuthorityMap{})
	pulumi.RegisterOutputType(SshCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(SshCertificateAuthorityArrayOutput{})
	pulumi.RegisterOutputType(SshCertificateAuthorityMapOutput{})
}
