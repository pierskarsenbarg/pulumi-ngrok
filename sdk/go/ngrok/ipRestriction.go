// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An IP restriction is a restriction placed on the CIDRs that are allowed to
//
//	initiate traffic to a specific aspect of your ngrok account. An IP
//	restriction has a type which defines the ingress it applies to. IP
//	restrictions can be used to enforce the source IPs that can make API
//	requests, log in to the dashboard, start ngrok agents, and connect to your
//	public-facing endpoints.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ngrok.NewIpRestriction(ctx, "example", &ngrok.IpRestrictionArgs{
//				IpPolicyIds: pulumi.StringArray{
//					pulumi.String("ipp_25auGwa4eEWUeCOBfCZkwtwqFey"),
//				},
//				Type: pulumi.String("dashboard"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpRestriction struct {
	pulumi.CustomResourceState

	// human-readable description of this IP restriction. optional, max 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// true if the IP restriction will be enforced. if false, only warnings will be issued
	Enforced pulumi.BoolPtrOutput `pulumi:"enforced"`
	// the set of IP policy identifiers that are used to enforce the restriction
	IpPolicyIds pulumi.StringArrayOutput `pulumi:"ipPolicyIds"`
	// arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIpRestriction registers a new resource with the given unique name, arguments, and options.
func NewIpRestriction(ctx *pulumi.Context,
	name string, args *IpRestrictionArgs, opts ...pulumi.ResourceOption) (*IpRestriction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpPolicyIds == nil {
		return nil, errors.New("invalid value for required argument 'IpPolicyIds'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpRestriction
	err := ctx.RegisterResource("ngrok:index/ipRestriction:IpRestriction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpRestriction gets an existing IpRestriction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpRestriction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpRestrictionState, opts ...pulumi.ResourceOption) (*IpRestriction, error) {
	var resource IpRestriction
	err := ctx.ReadResource("ngrok:index/ipRestriction:IpRestriction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpRestriction resources.
type ipRestrictionState struct {
	// human-readable description of this IP restriction. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// true if the IP restriction will be enforced. if false, only warnings will be issued
	Enforced *bool `pulumi:"enforced"`
	// the set of IP policy identifiers that are used to enforce the restriction
	IpPolicyIds []string `pulumi:"ipPolicyIds"`
	// arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
	Type *string `pulumi:"type"`
}

type IpRestrictionState struct {
	// human-readable description of this IP restriction. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// true if the IP restriction will be enforced. if false, only warnings will be issued
	Enforced pulumi.BoolPtrInput
	// the set of IP policy identifiers that are used to enforce the restriction
	IpPolicyIds pulumi.StringArrayInput
	// arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
	Type pulumi.StringPtrInput
}

func (IpRestrictionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipRestrictionState)(nil)).Elem()
}

type ipRestrictionArgs struct {
	// human-readable description of this IP restriction. optional, max 255 bytes.
	Description *string `pulumi:"description"`
	// true if the IP restriction will be enforced. if false, only warnings will be issued
	Enforced *bool `pulumi:"enforced"`
	// the set of IP policy identifiers that are used to enforce the restriction
	IpPolicyIds []string `pulumi:"ipPolicyIds"`
	// arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
	Metadata *string `pulumi:"metadata"`
	// the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a IpRestriction resource.
type IpRestrictionArgs struct {
	// human-readable description of this IP restriction. optional, max 255 bytes.
	Description pulumi.StringPtrInput
	// true if the IP restriction will be enforced. if false, only warnings will be issued
	Enforced pulumi.BoolPtrInput
	// the set of IP policy identifiers that are used to enforce the restriction
	IpPolicyIds pulumi.StringArrayInput
	// arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
	Metadata pulumi.StringPtrInput
	// the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
	Type pulumi.StringInput
}

func (IpRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipRestrictionArgs)(nil)).Elem()
}

type IpRestrictionInput interface {
	pulumi.Input

	ToIpRestrictionOutput() IpRestrictionOutput
	ToIpRestrictionOutputWithContext(ctx context.Context) IpRestrictionOutput
}

func (*IpRestriction) ElementType() reflect.Type {
	return reflect.TypeOf((**IpRestriction)(nil)).Elem()
}

func (i *IpRestriction) ToIpRestrictionOutput() IpRestrictionOutput {
	return i.ToIpRestrictionOutputWithContext(context.Background())
}

func (i *IpRestriction) ToIpRestrictionOutputWithContext(ctx context.Context) IpRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRestrictionOutput)
}

// IpRestrictionArrayInput is an input type that accepts IpRestrictionArray and IpRestrictionArrayOutput values.
// You can construct a concrete instance of `IpRestrictionArrayInput` via:
//
//	IpRestrictionArray{ IpRestrictionArgs{...} }
type IpRestrictionArrayInput interface {
	pulumi.Input

	ToIpRestrictionArrayOutput() IpRestrictionArrayOutput
	ToIpRestrictionArrayOutputWithContext(context.Context) IpRestrictionArrayOutput
}

type IpRestrictionArray []IpRestrictionInput

func (IpRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpRestriction)(nil)).Elem()
}

func (i IpRestrictionArray) ToIpRestrictionArrayOutput() IpRestrictionArrayOutput {
	return i.ToIpRestrictionArrayOutputWithContext(context.Background())
}

func (i IpRestrictionArray) ToIpRestrictionArrayOutputWithContext(ctx context.Context) IpRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRestrictionArrayOutput)
}

// IpRestrictionMapInput is an input type that accepts IpRestrictionMap and IpRestrictionMapOutput values.
// You can construct a concrete instance of `IpRestrictionMapInput` via:
//
//	IpRestrictionMap{ "key": IpRestrictionArgs{...} }
type IpRestrictionMapInput interface {
	pulumi.Input

	ToIpRestrictionMapOutput() IpRestrictionMapOutput
	ToIpRestrictionMapOutputWithContext(context.Context) IpRestrictionMapOutput
}

type IpRestrictionMap map[string]IpRestrictionInput

func (IpRestrictionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpRestriction)(nil)).Elem()
}

func (i IpRestrictionMap) ToIpRestrictionMapOutput() IpRestrictionMapOutput {
	return i.ToIpRestrictionMapOutputWithContext(context.Background())
}

func (i IpRestrictionMap) ToIpRestrictionMapOutputWithContext(ctx context.Context) IpRestrictionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRestrictionMapOutput)
}

type IpRestrictionOutput struct{ *pulumi.OutputState }

func (IpRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpRestriction)(nil)).Elem()
}

func (o IpRestrictionOutput) ToIpRestrictionOutput() IpRestrictionOutput {
	return o
}

func (o IpRestrictionOutput) ToIpRestrictionOutputWithContext(ctx context.Context) IpRestrictionOutput {
	return o
}

// human-readable description of this IP restriction. optional, max 255 bytes.
func (o IpRestrictionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpRestriction) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// true if the IP restriction will be enforced. if false, only warnings will be issued
func (o IpRestrictionOutput) Enforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpRestriction) pulumi.BoolPtrOutput { return v.Enforced }).(pulumi.BoolPtrOutput)
}

// the set of IP policy identifiers that are used to enforce the restriction
func (o IpRestrictionOutput) IpPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpRestriction) pulumi.StringArrayOutput { return v.IpPolicyIds }).(pulumi.StringArrayOutput)
}

// arbitrary user-defined machine-readable data of this IP restriction. optional, max 4096 bytes.
func (o IpRestrictionOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpRestriction) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// the type of IP restriction. this defines what traffic will be restricted with the attached policies. four values are currently supported: `dashboard`, `api`, `agent`, and `endpoints`
func (o IpRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IpRestriction) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IpRestrictionArrayOutput struct{ *pulumi.OutputState }

func (IpRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpRestriction)(nil)).Elem()
}

func (o IpRestrictionArrayOutput) ToIpRestrictionArrayOutput() IpRestrictionArrayOutput {
	return o
}

func (o IpRestrictionArrayOutput) ToIpRestrictionArrayOutputWithContext(ctx context.Context) IpRestrictionArrayOutput {
	return o
}

func (o IpRestrictionArrayOutput) Index(i pulumi.IntInput) IpRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpRestriction {
		return vs[0].([]*IpRestriction)[vs[1].(int)]
	}).(IpRestrictionOutput)
}

type IpRestrictionMapOutput struct{ *pulumi.OutputState }

func (IpRestrictionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpRestriction)(nil)).Elem()
}

func (o IpRestrictionMapOutput) ToIpRestrictionMapOutput() IpRestrictionMapOutput {
	return o
}

func (o IpRestrictionMapOutput) ToIpRestrictionMapOutputWithContext(ctx context.Context) IpRestrictionMapOutput {
	return o
}

func (o IpRestrictionMapOutput) MapIndex(k pulumi.StringInput) IpRestrictionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpRestriction {
		return vs[0].(map[string]*IpRestriction)[vs[1].(string)]
	}).(IpRestrictionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpRestrictionInput)(nil)).Elem(), &IpRestriction{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRestrictionArrayInput)(nil)).Elem(), IpRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRestrictionMapInput)(nil)).Elem(), IpRestrictionMap{})
	pulumi.RegisterOutputType(IpRestrictionOutput{})
	pulumi.RegisterOutputType(IpRestrictionArrayOutput{})
	pulumi.RegisterOutputType(IpRestrictionMapOutput{})
}
