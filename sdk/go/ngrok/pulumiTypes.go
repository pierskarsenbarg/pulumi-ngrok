// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ngrok

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ngrok/sdk/go/ngrok/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AgentIngressCertificateManagementPolicy struct {
	// certificate authority to request certificates from. The only supported value is letsencrypt.
	Authority *string `pulumi:"authority"`
	// type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
	PrivateKeyType *string `pulumi:"privateKeyType"`
}

// AgentIngressCertificateManagementPolicyInput is an input type that accepts AgentIngressCertificateManagementPolicyArgs and AgentIngressCertificateManagementPolicyOutput values.
// You can construct a concrete instance of `AgentIngressCertificateManagementPolicyInput` via:
//
//	AgentIngressCertificateManagementPolicyArgs{...}
type AgentIngressCertificateManagementPolicyInput interface {
	pulumi.Input

	ToAgentIngressCertificateManagementPolicyOutput() AgentIngressCertificateManagementPolicyOutput
	ToAgentIngressCertificateManagementPolicyOutputWithContext(context.Context) AgentIngressCertificateManagementPolicyOutput
}

type AgentIngressCertificateManagementPolicyArgs struct {
	// certificate authority to request certificates from. The only supported value is letsencrypt.
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	// type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
	PrivateKeyType pulumi.StringPtrInput `pulumi:"privateKeyType"`
}

func (AgentIngressCertificateManagementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentIngressCertificateManagementPolicy)(nil)).Elem()
}

func (i AgentIngressCertificateManagementPolicyArgs) ToAgentIngressCertificateManagementPolicyOutput() AgentIngressCertificateManagementPolicyOutput {
	return i.ToAgentIngressCertificateManagementPolicyOutputWithContext(context.Background())
}

func (i AgentIngressCertificateManagementPolicyArgs) ToAgentIngressCertificateManagementPolicyOutputWithContext(ctx context.Context) AgentIngressCertificateManagementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentIngressCertificateManagementPolicyOutput)
}

func (i AgentIngressCertificateManagementPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[AgentIngressCertificateManagementPolicy] {
	return pulumix.Output[AgentIngressCertificateManagementPolicy]{
		OutputState: i.ToAgentIngressCertificateManagementPolicyOutputWithContext(ctx).OutputState,
	}
}

// AgentIngressCertificateManagementPolicyArrayInput is an input type that accepts AgentIngressCertificateManagementPolicyArray and AgentIngressCertificateManagementPolicyArrayOutput values.
// You can construct a concrete instance of `AgentIngressCertificateManagementPolicyArrayInput` via:
//
//	AgentIngressCertificateManagementPolicyArray{ AgentIngressCertificateManagementPolicyArgs{...} }
type AgentIngressCertificateManagementPolicyArrayInput interface {
	pulumi.Input

	ToAgentIngressCertificateManagementPolicyArrayOutput() AgentIngressCertificateManagementPolicyArrayOutput
	ToAgentIngressCertificateManagementPolicyArrayOutputWithContext(context.Context) AgentIngressCertificateManagementPolicyArrayOutput
}

type AgentIngressCertificateManagementPolicyArray []AgentIngressCertificateManagementPolicyInput

func (AgentIngressCertificateManagementPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentIngressCertificateManagementPolicy)(nil)).Elem()
}

func (i AgentIngressCertificateManagementPolicyArray) ToAgentIngressCertificateManagementPolicyArrayOutput() AgentIngressCertificateManagementPolicyArrayOutput {
	return i.ToAgentIngressCertificateManagementPolicyArrayOutputWithContext(context.Background())
}

func (i AgentIngressCertificateManagementPolicyArray) ToAgentIngressCertificateManagementPolicyArrayOutputWithContext(ctx context.Context) AgentIngressCertificateManagementPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentIngressCertificateManagementPolicyArrayOutput)
}

func (i AgentIngressCertificateManagementPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]AgentIngressCertificateManagementPolicy] {
	return pulumix.Output[[]AgentIngressCertificateManagementPolicy]{
		OutputState: i.ToAgentIngressCertificateManagementPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type AgentIngressCertificateManagementPolicyOutput struct{ *pulumi.OutputState }

func (AgentIngressCertificateManagementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentIngressCertificateManagementPolicy)(nil)).Elem()
}

func (o AgentIngressCertificateManagementPolicyOutput) ToAgentIngressCertificateManagementPolicyOutput() AgentIngressCertificateManagementPolicyOutput {
	return o
}

func (o AgentIngressCertificateManagementPolicyOutput) ToAgentIngressCertificateManagementPolicyOutputWithContext(ctx context.Context) AgentIngressCertificateManagementPolicyOutput {
	return o
}

func (o AgentIngressCertificateManagementPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AgentIngressCertificateManagementPolicy] {
	return pulumix.Output[AgentIngressCertificateManagementPolicy]{
		OutputState: o.OutputState,
	}
}

// certificate authority to request certificates from. The only supported value is letsencrypt.
func (o AgentIngressCertificateManagementPolicyOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentIngressCertificateManagementPolicy) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

// type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
func (o AgentIngressCertificateManagementPolicyOutput) PrivateKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentIngressCertificateManagementPolicy) *string { return v.PrivateKeyType }).(pulumi.StringPtrOutput)
}

type AgentIngressCertificateManagementPolicyArrayOutput struct{ *pulumi.OutputState }

func (AgentIngressCertificateManagementPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentIngressCertificateManagementPolicy)(nil)).Elem()
}

func (o AgentIngressCertificateManagementPolicyArrayOutput) ToAgentIngressCertificateManagementPolicyArrayOutput() AgentIngressCertificateManagementPolicyArrayOutput {
	return o
}

func (o AgentIngressCertificateManagementPolicyArrayOutput) ToAgentIngressCertificateManagementPolicyArrayOutputWithContext(ctx context.Context) AgentIngressCertificateManagementPolicyArrayOutput {
	return o
}

func (o AgentIngressCertificateManagementPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AgentIngressCertificateManagementPolicy] {
	return pulumix.Output[[]AgentIngressCertificateManagementPolicy]{
		OutputState: o.OutputState,
	}
}

func (o AgentIngressCertificateManagementPolicyArrayOutput) Index(i pulumi.IntInput) AgentIngressCertificateManagementPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AgentIngressCertificateManagementPolicy {
		return vs[0].([]AgentIngressCertificateManagementPolicy)[vs[1].(int)]
	}).(AgentIngressCertificateManagementPolicyOutput)
}

type EventDestinationTarget struct {
	// Configuration used to send events to Amazon CloudWatch Logs.
	CloudwatchLogs []EventDestinationTargetCloudwatchLog `pulumi:"cloudwatchLogs"`
	// Configuration used to send events to Datadog.
	Datadogs []EventDestinationTargetDatadog `pulumi:"datadogs"`
	// Configuration used for internal debugging.
	Debugs []EventDestinationTargetDebug `pulumi:"debugs"`
	// Configuration used to send events to Amazon Kinesis Data Firehose.
	Firehoses []EventDestinationTargetFirehose `pulumi:"firehoses"`
	// Configuration used to send events to Amazon Kinesis.
	Kineses []EventDestinationTargetKinese `pulumi:"kineses"`
}

// EventDestinationTargetInput is an input type that accepts EventDestinationTargetArgs and EventDestinationTargetOutput values.
// You can construct a concrete instance of `EventDestinationTargetInput` via:
//
//	EventDestinationTargetArgs{...}
type EventDestinationTargetInput interface {
	pulumi.Input

	ToEventDestinationTargetOutput() EventDestinationTargetOutput
	ToEventDestinationTargetOutputWithContext(context.Context) EventDestinationTargetOutput
}

type EventDestinationTargetArgs struct {
	// Configuration used to send events to Amazon CloudWatch Logs.
	CloudwatchLogs EventDestinationTargetCloudwatchLogArrayInput `pulumi:"cloudwatchLogs"`
	// Configuration used to send events to Datadog.
	Datadogs EventDestinationTargetDatadogArrayInput `pulumi:"datadogs"`
	// Configuration used for internal debugging.
	Debugs EventDestinationTargetDebugArrayInput `pulumi:"debugs"`
	// Configuration used to send events to Amazon Kinesis Data Firehose.
	Firehoses EventDestinationTargetFirehoseArrayInput `pulumi:"firehoses"`
	// Configuration used to send events to Amazon Kinesis.
	Kineses EventDestinationTargetKineseArrayInput `pulumi:"kineses"`
}

func (EventDestinationTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTarget)(nil)).Elem()
}

func (i EventDestinationTargetArgs) ToEventDestinationTargetOutput() EventDestinationTargetOutput {
	return i.ToEventDestinationTargetOutputWithContext(context.Background())
}

func (i EventDestinationTargetArgs) ToEventDestinationTargetOutputWithContext(ctx context.Context) EventDestinationTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetOutput)
}

func (i EventDestinationTargetArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTarget] {
	return pulumix.Output[EventDestinationTarget]{
		OutputState: i.ToEventDestinationTargetOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetArrayInput is an input type that accepts EventDestinationTargetArray and EventDestinationTargetArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetArrayInput` via:
//
//	EventDestinationTargetArray{ EventDestinationTargetArgs{...} }
type EventDestinationTargetArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetArrayOutput() EventDestinationTargetArrayOutput
	ToEventDestinationTargetArrayOutputWithContext(context.Context) EventDestinationTargetArrayOutput
}

type EventDestinationTargetArray []EventDestinationTargetInput

func (EventDestinationTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTarget)(nil)).Elem()
}

func (i EventDestinationTargetArray) ToEventDestinationTargetArrayOutput() EventDestinationTargetArrayOutput {
	return i.ToEventDestinationTargetArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetArray) ToEventDestinationTargetArrayOutputWithContext(ctx context.Context) EventDestinationTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetArrayOutput)
}

func (i EventDestinationTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTarget] {
	return pulumix.Output[[]EventDestinationTarget]{
		OutputState: i.ToEventDestinationTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTarget)(nil)).Elem()
}

func (o EventDestinationTargetOutput) ToEventDestinationTargetOutput() EventDestinationTargetOutput {
	return o
}

func (o EventDestinationTargetOutput) ToEventDestinationTargetOutputWithContext(ctx context.Context) EventDestinationTargetOutput {
	return o
}

func (o EventDestinationTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTarget] {
	return pulumix.Output[EventDestinationTarget]{
		OutputState: o.OutputState,
	}
}

// Configuration used to send events to Amazon CloudWatch Logs.
func (o EventDestinationTargetOutput) CloudwatchLogs() EventDestinationTargetCloudwatchLogArrayOutput {
	return o.ApplyT(func(v EventDestinationTarget) []EventDestinationTargetCloudwatchLog { return v.CloudwatchLogs }).(EventDestinationTargetCloudwatchLogArrayOutput)
}

// Configuration used to send events to Datadog.
func (o EventDestinationTargetOutput) Datadogs() EventDestinationTargetDatadogArrayOutput {
	return o.ApplyT(func(v EventDestinationTarget) []EventDestinationTargetDatadog { return v.Datadogs }).(EventDestinationTargetDatadogArrayOutput)
}

// Configuration used for internal debugging.
func (o EventDestinationTargetOutput) Debugs() EventDestinationTargetDebugArrayOutput {
	return o.ApplyT(func(v EventDestinationTarget) []EventDestinationTargetDebug { return v.Debugs }).(EventDestinationTargetDebugArrayOutput)
}

// Configuration used to send events to Amazon Kinesis Data Firehose.
func (o EventDestinationTargetOutput) Firehoses() EventDestinationTargetFirehoseArrayOutput {
	return o.ApplyT(func(v EventDestinationTarget) []EventDestinationTargetFirehose { return v.Firehoses }).(EventDestinationTargetFirehoseArrayOutput)
}

// Configuration used to send events to Amazon Kinesis.
func (o EventDestinationTargetOutput) Kineses() EventDestinationTargetKineseArrayOutput {
	return o.ApplyT(func(v EventDestinationTarget) []EventDestinationTargetKinese { return v.Kineses }).(EventDestinationTargetKineseArrayOutput)
}

type EventDestinationTargetArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTarget)(nil)).Elem()
}

func (o EventDestinationTargetArrayOutput) ToEventDestinationTargetArrayOutput() EventDestinationTargetArrayOutput {
	return o
}

func (o EventDestinationTargetArrayOutput) ToEventDestinationTargetArrayOutputWithContext(ctx context.Context) EventDestinationTargetArrayOutput {
	return o
}

func (o EventDestinationTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTarget] {
	return pulumix.Output[[]EventDestinationTarget]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTarget {
		return vs[0].([]EventDestinationTarget)[vs[1].(int)]
	}).(EventDestinationTargetOutput)
}

type EventDestinationTargetCloudwatchLog struct {
	Auths       []EventDestinationTargetCloudwatchLogAuth `pulumi:"auths"`
	LogGroupArn *string                                   `pulumi:"logGroupArn"`
}

// EventDestinationTargetCloudwatchLogInput is an input type that accepts EventDestinationTargetCloudwatchLogArgs and EventDestinationTargetCloudwatchLogOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogInput` via:
//
//	EventDestinationTargetCloudwatchLogArgs{...}
type EventDestinationTargetCloudwatchLogInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogOutput() EventDestinationTargetCloudwatchLogOutput
	ToEventDestinationTargetCloudwatchLogOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogOutput
}

type EventDestinationTargetCloudwatchLogArgs struct {
	Auths       EventDestinationTargetCloudwatchLogAuthArrayInput `pulumi:"auths"`
	LogGroupArn pulumi.StringPtrInput                             `pulumi:"logGroupArn"`
}

func (EventDestinationTargetCloudwatchLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLog)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogArgs) ToEventDestinationTargetCloudwatchLogOutput() EventDestinationTargetCloudwatchLogOutput {
	return i.ToEventDestinationTargetCloudwatchLogOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogArgs) ToEventDestinationTargetCloudwatchLogOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogOutput)
}

func (i EventDestinationTargetCloudwatchLogArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLog] {
	return pulumix.Output[EventDestinationTargetCloudwatchLog]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetCloudwatchLogArrayInput is an input type that accepts EventDestinationTargetCloudwatchLogArray and EventDestinationTargetCloudwatchLogArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogArrayInput` via:
//
//	EventDestinationTargetCloudwatchLogArray{ EventDestinationTargetCloudwatchLogArgs{...} }
type EventDestinationTargetCloudwatchLogArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogArrayOutput() EventDestinationTargetCloudwatchLogArrayOutput
	ToEventDestinationTargetCloudwatchLogArrayOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogArrayOutput
}

type EventDestinationTargetCloudwatchLogArray []EventDestinationTargetCloudwatchLogInput

func (EventDestinationTargetCloudwatchLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLog)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogArray) ToEventDestinationTargetCloudwatchLogArrayOutput() EventDestinationTargetCloudwatchLogArrayOutput {
	return i.ToEventDestinationTargetCloudwatchLogArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogArray) ToEventDestinationTargetCloudwatchLogArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogArrayOutput)
}

func (i EventDestinationTargetCloudwatchLogArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLog] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLog]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetCloudwatchLogOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLog)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogOutput) ToEventDestinationTargetCloudwatchLogOutput() EventDestinationTargetCloudwatchLogOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogOutput) ToEventDestinationTargetCloudwatchLogOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLog] {
	return pulumix.Output[EventDestinationTargetCloudwatchLog]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogOutput) Auths() EventDestinationTargetCloudwatchLogAuthArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLog) []EventDestinationTargetCloudwatchLogAuth { return v.Auths }).(EventDestinationTargetCloudwatchLogAuthArrayOutput)
}

func (o EventDestinationTargetCloudwatchLogOutput) LogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLog) *string { return v.LogGroupArn }).(pulumi.StringPtrOutput)
}

type EventDestinationTargetCloudwatchLogArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLog)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogArrayOutput) ToEventDestinationTargetCloudwatchLogArrayOutput() EventDestinationTargetCloudwatchLogArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogArrayOutput) ToEventDestinationTargetCloudwatchLogArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLog] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLog]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetCloudwatchLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetCloudwatchLog {
		return vs[0].([]EventDestinationTargetCloudwatchLog)[vs[1].(int)]
	}).(EventDestinationTargetCloudwatchLogOutput)
}

type EventDestinationTargetCloudwatchLogAuth struct {
	Creds []EventDestinationTargetCloudwatchLogAuthCred `pulumi:"creds"`
	Roles []EventDestinationTargetCloudwatchLogAuthRole `pulumi:"roles"`
}

// EventDestinationTargetCloudwatchLogAuthInput is an input type that accepts EventDestinationTargetCloudwatchLogAuthArgs and EventDestinationTargetCloudwatchLogAuthOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogAuthInput` via:
//
//	EventDestinationTargetCloudwatchLogAuthArgs{...}
type EventDestinationTargetCloudwatchLogAuthInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogAuthOutput() EventDestinationTargetCloudwatchLogAuthOutput
	ToEventDestinationTargetCloudwatchLogAuthOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogAuthOutput
}

type EventDestinationTargetCloudwatchLogAuthArgs struct {
	Creds EventDestinationTargetCloudwatchLogAuthCredArrayInput `pulumi:"creds"`
	Roles EventDestinationTargetCloudwatchLogAuthRoleArrayInput `pulumi:"roles"`
}

func (EventDestinationTargetCloudwatchLogAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuth)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogAuthArgs) ToEventDestinationTargetCloudwatchLogAuthOutput() EventDestinationTargetCloudwatchLogAuthOutput {
	return i.ToEventDestinationTargetCloudwatchLogAuthOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogAuthArgs) ToEventDestinationTargetCloudwatchLogAuthOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogAuthOutput)
}

func (i EventDestinationTargetCloudwatchLogAuthArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLogAuth] {
	return pulumix.Output[EventDestinationTargetCloudwatchLogAuth]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogAuthOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetCloudwatchLogAuthArrayInput is an input type that accepts EventDestinationTargetCloudwatchLogAuthArray and EventDestinationTargetCloudwatchLogAuthArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogAuthArrayInput` via:
//
//	EventDestinationTargetCloudwatchLogAuthArray{ EventDestinationTargetCloudwatchLogAuthArgs{...} }
type EventDestinationTargetCloudwatchLogAuthArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogAuthArrayOutput() EventDestinationTargetCloudwatchLogAuthArrayOutput
	ToEventDestinationTargetCloudwatchLogAuthArrayOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogAuthArrayOutput
}

type EventDestinationTargetCloudwatchLogAuthArray []EventDestinationTargetCloudwatchLogAuthInput

func (EventDestinationTargetCloudwatchLogAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLogAuth)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogAuthArray) ToEventDestinationTargetCloudwatchLogAuthArrayOutput() EventDestinationTargetCloudwatchLogAuthArrayOutput {
	return i.ToEventDestinationTargetCloudwatchLogAuthArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogAuthArray) ToEventDestinationTargetCloudwatchLogAuthArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogAuthArrayOutput)
}

func (i EventDestinationTargetCloudwatchLogAuthArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLogAuth] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLogAuth]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogAuthArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetCloudwatchLogAuthOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuth)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogAuthOutput) ToEventDestinationTargetCloudwatchLogAuthOutput() EventDestinationTargetCloudwatchLogAuthOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthOutput) ToEventDestinationTargetCloudwatchLogAuthOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLogAuth] {
	return pulumix.Output[EventDestinationTargetCloudwatchLogAuth]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogAuthOutput) Creds() EventDestinationTargetCloudwatchLogAuthCredArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLogAuth) []EventDestinationTargetCloudwatchLogAuthCred {
		return v.Creds
	}).(EventDestinationTargetCloudwatchLogAuthCredArrayOutput)
}

func (o EventDestinationTargetCloudwatchLogAuthOutput) Roles() EventDestinationTargetCloudwatchLogAuthRoleArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLogAuth) []EventDestinationTargetCloudwatchLogAuthRole {
		return v.Roles
	}).(EventDestinationTargetCloudwatchLogAuthRoleArrayOutput)
}

type EventDestinationTargetCloudwatchLogAuthArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLogAuth)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogAuthArrayOutput) ToEventDestinationTargetCloudwatchLogAuthArrayOutput() EventDestinationTargetCloudwatchLogAuthArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthArrayOutput) ToEventDestinationTargetCloudwatchLogAuthArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLogAuth] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLogAuth]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogAuthArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetCloudwatchLogAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetCloudwatchLogAuth {
		return vs[0].([]EventDestinationTargetCloudwatchLogAuth)[vs[1].(int)]
	}).(EventDestinationTargetCloudwatchLogAuthOutput)
}

type EventDestinationTargetCloudwatchLogAuthCred struct {
	AwsAccessKeyId     string `pulumi:"awsAccessKeyId"`
	AwsSecretAccessKey string `pulumi:"awsSecretAccessKey"`
}

// EventDestinationTargetCloudwatchLogAuthCredInput is an input type that accepts EventDestinationTargetCloudwatchLogAuthCredArgs and EventDestinationTargetCloudwatchLogAuthCredOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogAuthCredInput` via:
//
//	EventDestinationTargetCloudwatchLogAuthCredArgs{...}
type EventDestinationTargetCloudwatchLogAuthCredInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogAuthCredOutput() EventDestinationTargetCloudwatchLogAuthCredOutput
	ToEventDestinationTargetCloudwatchLogAuthCredOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogAuthCredOutput
}

type EventDestinationTargetCloudwatchLogAuthCredArgs struct {
	AwsAccessKeyId     pulumi.StringInput `pulumi:"awsAccessKeyId"`
	AwsSecretAccessKey pulumi.StringInput `pulumi:"awsSecretAccessKey"`
}

func (EventDestinationTargetCloudwatchLogAuthCredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthCred)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogAuthCredArgs) ToEventDestinationTargetCloudwatchLogAuthCredOutput() EventDestinationTargetCloudwatchLogAuthCredOutput {
	return i.ToEventDestinationTargetCloudwatchLogAuthCredOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogAuthCredArgs) ToEventDestinationTargetCloudwatchLogAuthCredOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthCredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogAuthCredOutput)
}

func (i EventDestinationTargetCloudwatchLogAuthCredArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLogAuthCred] {
	return pulumix.Output[EventDestinationTargetCloudwatchLogAuthCred]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogAuthCredOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetCloudwatchLogAuthCredArrayInput is an input type that accepts EventDestinationTargetCloudwatchLogAuthCredArray and EventDestinationTargetCloudwatchLogAuthCredArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogAuthCredArrayInput` via:
//
//	EventDestinationTargetCloudwatchLogAuthCredArray{ EventDestinationTargetCloudwatchLogAuthCredArgs{...} }
type EventDestinationTargetCloudwatchLogAuthCredArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogAuthCredArrayOutput() EventDestinationTargetCloudwatchLogAuthCredArrayOutput
	ToEventDestinationTargetCloudwatchLogAuthCredArrayOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogAuthCredArrayOutput
}

type EventDestinationTargetCloudwatchLogAuthCredArray []EventDestinationTargetCloudwatchLogAuthCredInput

func (EventDestinationTargetCloudwatchLogAuthCredArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLogAuthCred)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogAuthCredArray) ToEventDestinationTargetCloudwatchLogAuthCredArrayOutput() EventDestinationTargetCloudwatchLogAuthCredArrayOutput {
	return i.ToEventDestinationTargetCloudwatchLogAuthCredArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogAuthCredArray) ToEventDestinationTargetCloudwatchLogAuthCredArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthCredArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogAuthCredArrayOutput)
}

func (i EventDestinationTargetCloudwatchLogAuthCredArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthCred] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthCred]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogAuthCredArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetCloudwatchLogAuthCredOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogAuthCredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthCred)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogAuthCredOutput) ToEventDestinationTargetCloudwatchLogAuthCredOutput() EventDestinationTargetCloudwatchLogAuthCredOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthCredOutput) ToEventDestinationTargetCloudwatchLogAuthCredOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthCredOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthCredOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLogAuthCred] {
	return pulumix.Output[EventDestinationTargetCloudwatchLogAuthCred]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogAuthCredOutput) AwsAccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLogAuthCred) string { return v.AwsAccessKeyId }).(pulumi.StringOutput)
}

func (o EventDestinationTargetCloudwatchLogAuthCredOutput) AwsSecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLogAuthCred) string { return v.AwsSecretAccessKey }).(pulumi.StringOutput)
}

type EventDestinationTargetCloudwatchLogAuthCredArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogAuthCredArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLogAuthCred)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogAuthCredArrayOutput) ToEventDestinationTargetCloudwatchLogAuthCredArrayOutput() EventDestinationTargetCloudwatchLogAuthCredArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthCredArrayOutput) ToEventDestinationTargetCloudwatchLogAuthCredArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthCredArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthCredArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthCred] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthCred]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogAuthCredArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetCloudwatchLogAuthCredOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetCloudwatchLogAuthCred {
		return vs[0].([]EventDestinationTargetCloudwatchLogAuthCred)[vs[1].(int)]
	}).(EventDestinationTargetCloudwatchLogAuthCredOutput)
}

type EventDestinationTargetCloudwatchLogAuthRole struct {
	RoleArn string `pulumi:"roleArn"`
}

// EventDestinationTargetCloudwatchLogAuthRoleInput is an input type that accepts EventDestinationTargetCloudwatchLogAuthRoleArgs and EventDestinationTargetCloudwatchLogAuthRoleOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogAuthRoleInput` via:
//
//	EventDestinationTargetCloudwatchLogAuthRoleArgs{...}
type EventDestinationTargetCloudwatchLogAuthRoleInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogAuthRoleOutput() EventDestinationTargetCloudwatchLogAuthRoleOutput
	ToEventDestinationTargetCloudwatchLogAuthRoleOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogAuthRoleOutput
}

type EventDestinationTargetCloudwatchLogAuthRoleArgs struct {
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (EventDestinationTargetCloudwatchLogAuthRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthRole)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogAuthRoleArgs) ToEventDestinationTargetCloudwatchLogAuthRoleOutput() EventDestinationTargetCloudwatchLogAuthRoleOutput {
	return i.ToEventDestinationTargetCloudwatchLogAuthRoleOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogAuthRoleArgs) ToEventDestinationTargetCloudwatchLogAuthRoleOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogAuthRoleOutput)
}

func (i EventDestinationTargetCloudwatchLogAuthRoleArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLogAuthRole] {
	return pulumix.Output[EventDestinationTargetCloudwatchLogAuthRole]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogAuthRoleOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetCloudwatchLogAuthRoleArrayInput is an input type that accepts EventDestinationTargetCloudwatchLogAuthRoleArray and EventDestinationTargetCloudwatchLogAuthRoleArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetCloudwatchLogAuthRoleArrayInput` via:
//
//	EventDestinationTargetCloudwatchLogAuthRoleArray{ EventDestinationTargetCloudwatchLogAuthRoleArgs{...} }
type EventDestinationTargetCloudwatchLogAuthRoleArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutput() EventDestinationTargetCloudwatchLogAuthRoleArrayOutput
	ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutputWithContext(context.Context) EventDestinationTargetCloudwatchLogAuthRoleArrayOutput
}

type EventDestinationTargetCloudwatchLogAuthRoleArray []EventDestinationTargetCloudwatchLogAuthRoleInput

func (EventDestinationTargetCloudwatchLogAuthRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLogAuthRole)(nil)).Elem()
}

func (i EventDestinationTargetCloudwatchLogAuthRoleArray) ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutput() EventDestinationTargetCloudwatchLogAuthRoleArrayOutput {
	return i.ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetCloudwatchLogAuthRoleArray) ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetCloudwatchLogAuthRoleArrayOutput)
}

func (i EventDestinationTargetCloudwatchLogAuthRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthRole] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthRole]{
		OutputState: i.ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetCloudwatchLogAuthRoleOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogAuthRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthRole)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogAuthRoleOutput) ToEventDestinationTargetCloudwatchLogAuthRoleOutput() EventDestinationTargetCloudwatchLogAuthRoleOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthRoleOutput) ToEventDestinationTargetCloudwatchLogAuthRoleOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthRoleOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthRoleOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetCloudwatchLogAuthRole] {
	return pulumix.Output[EventDestinationTargetCloudwatchLogAuthRole]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogAuthRoleOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetCloudwatchLogAuthRole) string { return v.RoleArn }).(pulumi.StringOutput)
}

type EventDestinationTargetCloudwatchLogAuthRoleArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetCloudwatchLogAuthRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetCloudwatchLogAuthRole)(nil)).Elem()
}

func (o EventDestinationTargetCloudwatchLogAuthRoleArrayOutput) ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutput() EventDestinationTargetCloudwatchLogAuthRoleArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthRoleArrayOutput) ToEventDestinationTargetCloudwatchLogAuthRoleArrayOutputWithContext(ctx context.Context) EventDestinationTargetCloudwatchLogAuthRoleArrayOutput {
	return o
}

func (o EventDestinationTargetCloudwatchLogAuthRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthRole] {
	return pulumix.Output[[]EventDestinationTargetCloudwatchLogAuthRole]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetCloudwatchLogAuthRoleArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetCloudwatchLogAuthRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetCloudwatchLogAuthRole {
		return vs[0].([]EventDestinationTargetCloudwatchLogAuthRole)[vs[1].(int)]
	}).(EventDestinationTargetCloudwatchLogAuthRoleOutput)
}

type EventDestinationTargetDatadog struct {
	ApiKey  *string `pulumi:"apiKey"`
	Ddsite  *string `pulumi:"ddsite"`
	Ddtags  *string `pulumi:"ddtags"`
	Service *string `pulumi:"service"`
}

// EventDestinationTargetDatadogInput is an input type that accepts EventDestinationTargetDatadogArgs and EventDestinationTargetDatadogOutput values.
// You can construct a concrete instance of `EventDestinationTargetDatadogInput` via:
//
//	EventDestinationTargetDatadogArgs{...}
type EventDestinationTargetDatadogInput interface {
	pulumi.Input

	ToEventDestinationTargetDatadogOutput() EventDestinationTargetDatadogOutput
	ToEventDestinationTargetDatadogOutputWithContext(context.Context) EventDestinationTargetDatadogOutput
}

type EventDestinationTargetDatadogArgs struct {
	ApiKey  pulumi.StringPtrInput `pulumi:"apiKey"`
	Ddsite  pulumi.StringPtrInput `pulumi:"ddsite"`
	Ddtags  pulumi.StringPtrInput `pulumi:"ddtags"`
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (EventDestinationTargetDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetDatadog)(nil)).Elem()
}

func (i EventDestinationTargetDatadogArgs) ToEventDestinationTargetDatadogOutput() EventDestinationTargetDatadogOutput {
	return i.ToEventDestinationTargetDatadogOutputWithContext(context.Background())
}

func (i EventDestinationTargetDatadogArgs) ToEventDestinationTargetDatadogOutputWithContext(ctx context.Context) EventDestinationTargetDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetDatadogOutput)
}

func (i EventDestinationTargetDatadogArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetDatadog] {
	return pulumix.Output[EventDestinationTargetDatadog]{
		OutputState: i.ToEventDestinationTargetDatadogOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetDatadogArrayInput is an input type that accepts EventDestinationTargetDatadogArray and EventDestinationTargetDatadogArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetDatadogArrayInput` via:
//
//	EventDestinationTargetDatadogArray{ EventDestinationTargetDatadogArgs{...} }
type EventDestinationTargetDatadogArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetDatadogArrayOutput() EventDestinationTargetDatadogArrayOutput
	ToEventDestinationTargetDatadogArrayOutputWithContext(context.Context) EventDestinationTargetDatadogArrayOutput
}

type EventDestinationTargetDatadogArray []EventDestinationTargetDatadogInput

func (EventDestinationTargetDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetDatadog)(nil)).Elem()
}

func (i EventDestinationTargetDatadogArray) ToEventDestinationTargetDatadogArrayOutput() EventDestinationTargetDatadogArrayOutput {
	return i.ToEventDestinationTargetDatadogArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetDatadogArray) ToEventDestinationTargetDatadogArrayOutputWithContext(ctx context.Context) EventDestinationTargetDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetDatadogArrayOutput)
}

func (i EventDestinationTargetDatadogArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetDatadog] {
	return pulumix.Output[[]EventDestinationTargetDatadog]{
		OutputState: i.ToEventDestinationTargetDatadogArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetDatadogOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetDatadog)(nil)).Elem()
}

func (o EventDestinationTargetDatadogOutput) ToEventDestinationTargetDatadogOutput() EventDestinationTargetDatadogOutput {
	return o
}

func (o EventDestinationTargetDatadogOutput) ToEventDestinationTargetDatadogOutputWithContext(ctx context.Context) EventDestinationTargetDatadogOutput {
	return o
}

func (o EventDestinationTargetDatadogOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetDatadog] {
	return pulumix.Output[EventDestinationTargetDatadog]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetDatadogOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetDatadog) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o EventDestinationTargetDatadogOutput) Ddsite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetDatadog) *string { return v.Ddsite }).(pulumi.StringPtrOutput)
}

func (o EventDestinationTargetDatadogOutput) Ddtags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetDatadog) *string { return v.Ddtags }).(pulumi.StringPtrOutput)
}

func (o EventDestinationTargetDatadogOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetDatadog) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type EventDestinationTargetDatadogArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetDatadog)(nil)).Elem()
}

func (o EventDestinationTargetDatadogArrayOutput) ToEventDestinationTargetDatadogArrayOutput() EventDestinationTargetDatadogArrayOutput {
	return o
}

func (o EventDestinationTargetDatadogArrayOutput) ToEventDestinationTargetDatadogArrayOutputWithContext(ctx context.Context) EventDestinationTargetDatadogArrayOutput {
	return o
}

func (o EventDestinationTargetDatadogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetDatadog] {
	return pulumix.Output[[]EventDestinationTargetDatadog]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetDatadogArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetDatadog {
		return vs[0].([]EventDestinationTargetDatadog)[vs[1].(int)]
	}).(EventDestinationTargetDatadogOutput)
}

type EventDestinationTargetDebug struct {
	CallbackUrl *string `pulumi:"callbackUrl"`
	Log         *bool   `pulumi:"log"`
}

// EventDestinationTargetDebugInput is an input type that accepts EventDestinationTargetDebugArgs and EventDestinationTargetDebugOutput values.
// You can construct a concrete instance of `EventDestinationTargetDebugInput` via:
//
//	EventDestinationTargetDebugArgs{...}
type EventDestinationTargetDebugInput interface {
	pulumi.Input

	ToEventDestinationTargetDebugOutput() EventDestinationTargetDebugOutput
	ToEventDestinationTargetDebugOutputWithContext(context.Context) EventDestinationTargetDebugOutput
}

type EventDestinationTargetDebugArgs struct {
	CallbackUrl pulumi.StringPtrInput `pulumi:"callbackUrl"`
	Log         pulumi.BoolPtrInput   `pulumi:"log"`
}

func (EventDestinationTargetDebugArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetDebug)(nil)).Elem()
}

func (i EventDestinationTargetDebugArgs) ToEventDestinationTargetDebugOutput() EventDestinationTargetDebugOutput {
	return i.ToEventDestinationTargetDebugOutputWithContext(context.Background())
}

func (i EventDestinationTargetDebugArgs) ToEventDestinationTargetDebugOutputWithContext(ctx context.Context) EventDestinationTargetDebugOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetDebugOutput)
}

func (i EventDestinationTargetDebugArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetDebug] {
	return pulumix.Output[EventDestinationTargetDebug]{
		OutputState: i.ToEventDestinationTargetDebugOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetDebugArrayInput is an input type that accepts EventDestinationTargetDebugArray and EventDestinationTargetDebugArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetDebugArrayInput` via:
//
//	EventDestinationTargetDebugArray{ EventDestinationTargetDebugArgs{...} }
type EventDestinationTargetDebugArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetDebugArrayOutput() EventDestinationTargetDebugArrayOutput
	ToEventDestinationTargetDebugArrayOutputWithContext(context.Context) EventDestinationTargetDebugArrayOutput
}

type EventDestinationTargetDebugArray []EventDestinationTargetDebugInput

func (EventDestinationTargetDebugArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetDebug)(nil)).Elem()
}

func (i EventDestinationTargetDebugArray) ToEventDestinationTargetDebugArrayOutput() EventDestinationTargetDebugArrayOutput {
	return i.ToEventDestinationTargetDebugArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetDebugArray) ToEventDestinationTargetDebugArrayOutputWithContext(ctx context.Context) EventDestinationTargetDebugArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetDebugArrayOutput)
}

func (i EventDestinationTargetDebugArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetDebug] {
	return pulumix.Output[[]EventDestinationTargetDebug]{
		OutputState: i.ToEventDestinationTargetDebugArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetDebugOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetDebugOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetDebug)(nil)).Elem()
}

func (o EventDestinationTargetDebugOutput) ToEventDestinationTargetDebugOutput() EventDestinationTargetDebugOutput {
	return o
}

func (o EventDestinationTargetDebugOutput) ToEventDestinationTargetDebugOutputWithContext(ctx context.Context) EventDestinationTargetDebugOutput {
	return o
}

func (o EventDestinationTargetDebugOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetDebug] {
	return pulumix.Output[EventDestinationTargetDebug]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetDebugOutput) CallbackUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetDebug) *string { return v.CallbackUrl }).(pulumi.StringPtrOutput)
}

func (o EventDestinationTargetDebugOutput) Log() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetDebug) *bool { return v.Log }).(pulumi.BoolPtrOutput)
}

type EventDestinationTargetDebugArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetDebugArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetDebug)(nil)).Elem()
}

func (o EventDestinationTargetDebugArrayOutput) ToEventDestinationTargetDebugArrayOutput() EventDestinationTargetDebugArrayOutput {
	return o
}

func (o EventDestinationTargetDebugArrayOutput) ToEventDestinationTargetDebugArrayOutputWithContext(ctx context.Context) EventDestinationTargetDebugArrayOutput {
	return o
}

func (o EventDestinationTargetDebugArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetDebug] {
	return pulumix.Output[[]EventDestinationTargetDebug]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetDebugArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetDebugOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetDebug {
		return vs[0].([]EventDestinationTargetDebug)[vs[1].(int)]
	}).(EventDestinationTargetDebugOutput)
}

type EventDestinationTargetFirehose struct {
	Auths             []EventDestinationTargetFirehoseAuth `pulumi:"auths"`
	DeliveryStreamArn *string                              `pulumi:"deliveryStreamArn"`
}

// EventDestinationTargetFirehoseInput is an input type that accepts EventDestinationTargetFirehoseArgs and EventDestinationTargetFirehoseOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseInput` via:
//
//	EventDestinationTargetFirehoseArgs{...}
type EventDestinationTargetFirehoseInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseOutput() EventDestinationTargetFirehoseOutput
	ToEventDestinationTargetFirehoseOutputWithContext(context.Context) EventDestinationTargetFirehoseOutput
}

type EventDestinationTargetFirehoseArgs struct {
	Auths             EventDestinationTargetFirehoseAuthArrayInput `pulumi:"auths"`
	DeliveryStreamArn pulumi.StringPtrInput                        `pulumi:"deliveryStreamArn"`
}

func (EventDestinationTargetFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehose)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseArgs) ToEventDestinationTargetFirehoseOutput() EventDestinationTargetFirehoseOutput {
	return i.ToEventDestinationTargetFirehoseOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseArgs) ToEventDestinationTargetFirehoseOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseOutput)
}

func (i EventDestinationTargetFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehose] {
	return pulumix.Output[EventDestinationTargetFirehose]{
		OutputState: i.ToEventDestinationTargetFirehoseOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetFirehoseArrayInput is an input type that accepts EventDestinationTargetFirehoseArray and EventDestinationTargetFirehoseArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseArrayInput` via:
//
//	EventDestinationTargetFirehoseArray{ EventDestinationTargetFirehoseArgs{...} }
type EventDestinationTargetFirehoseArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseArrayOutput() EventDestinationTargetFirehoseArrayOutput
	ToEventDestinationTargetFirehoseArrayOutputWithContext(context.Context) EventDestinationTargetFirehoseArrayOutput
}

type EventDestinationTargetFirehoseArray []EventDestinationTargetFirehoseInput

func (EventDestinationTargetFirehoseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehose)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseArray) ToEventDestinationTargetFirehoseArrayOutput() EventDestinationTargetFirehoseArrayOutput {
	return i.ToEventDestinationTargetFirehoseArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseArray) ToEventDestinationTargetFirehoseArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseArrayOutput)
}

func (i EventDestinationTargetFirehoseArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehose] {
	return pulumix.Output[[]EventDestinationTargetFirehose]{
		OutputState: i.ToEventDestinationTargetFirehoseArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetFirehoseOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehose)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseOutput) ToEventDestinationTargetFirehoseOutput() EventDestinationTargetFirehoseOutput {
	return o
}

func (o EventDestinationTargetFirehoseOutput) ToEventDestinationTargetFirehoseOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseOutput {
	return o
}

func (o EventDestinationTargetFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehose] {
	return pulumix.Output[EventDestinationTargetFirehose]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseOutput) Auths() EventDestinationTargetFirehoseAuthArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehose) []EventDestinationTargetFirehoseAuth { return v.Auths }).(EventDestinationTargetFirehoseAuthArrayOutput)
}

func (o EventDestinationTargetFirehoseOutput) DeliveryStreamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehose) *string { return v.DeliveryStreamArn }).(pulumi.StringPtrOutput)
}

type EventDestinationTargetFirehoseArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehose)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseArrayOutput) ToEventDestinationTargetFirehoseArrayOutput() EventDestinationTargetFirehoseArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseArrayOutput) ToEventDestinationTargetFirehoseArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehose] {
	return pulumix.Output[[]EventDestinationTargetFirehose]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetFirehoseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetFirehose {
		return vs[0].([]EventDestinationTargetFirehose)[vs[1].(int)]
	}).(EventDestinationTargetFirehoseOutput)
}

type EventDestinationTargetFirehoseAuth struct {
	Creds []EventDestinationTargetFirehoseAuthCred `pulumi:"creds"`
	Roles []EventDestinationTargetFirehoseAuthRole `pulumi:"roles"`
}

// EventDestinationTargetFirehoseAuthInput is an input type that accepts EventDestinationTargetFirehoseAuthArgs and EventDestinationTargetFirehoseAuthOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseAuthInput` via:
//
//	EventDestinationTargetFirehoseAuthArgs{...}
type EventDestinationTargetFirehoseAuthInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseAuthOutput() EventDestinationTargetFirehoseAuthOutput
	ToEventDestinationTargetFirehoseAuthOutputWithContext(context.Context) EventDestinationTargetFirehoseAuthOutput
}

type EventDestinationTargetFirehoseAuthArgs struct {
	Creds EventDestinationTargetFirehoseAuthCredArrayInput `pulumi:"creds"`
	Roles EventDestinationTargetFirehoseAuthRoleArrayInput `pulumi:"roles"`
}

func (EventDestinationTargetFirehoseAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehoseAuth)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseAuthArgs) ToEventDestinationTargetFirehoseAuthOutput() EventDestinationTargetFirehoseAuthOutput {
	return i.ToEventDestinationTargetFirehoseAuthOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseAuthArgs) ToEventDestinationTargetFirehoseAuthOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseAuthOutput)
}

func (i EventDestinationTargetFirehoseAuthArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehoseAuth] {
	return pulumix.Output[EventDestinationTargetFirehoseAuth]{
		OutputState: i.ToEventDestinationTargetFirehoseAuthOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetFirehoseAuthArrayInput is an input type that accepts EventDestinationTargetFirehoseAuthArray and EventDestinationTargetFirehoseAuthArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseAuthArrayInput` via:
//
//	EventDestinationTargetFirehoseAuthArray{ EventDestinationTargetFirehoseAuthArgs{...} }
type EventDestinationTargetFirehoseAuthArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseAuthArrayOutput() EventDestinationTargetFirehoseAuthArrayOutput
	ToEventDestinationTargetFirehoseAuthArrayOutputWithContext(context.Context) EventDestinationTargetFirehoseAuthArrayOutput
}

type EventDestinationTargetFirehoseAuthArray []EventDestinationTargetFirehoseAuthInput

func (EventDestinationTargetFirehoseAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehoseAuth)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseAuthArray) ToEventDestinationTargetFirehoseAuthArrayOutput() EventDestinationTargetFirehoseAuthArrayOutput {
	return i.ToEventDestinationTargetFirehoseAuthArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseAuthArray) ToEventDestinationTargetFirehoseAuthArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseAuthArrayOutput)
}

func (i EventDestinationTargetFirehoseAuthArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehoseAuth] {
	return pulumix.Output[[]EventDestinationTargetFirehoseAuth]{
		OutputState: i.ToEventDestinationTargetFirehoseAuthArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetFirehoseAuthOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehoseAuth)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseAuthOutput) ToEventDestinationTargetFirehoseAuthOutput() EventDestinationTargetFirehoseAuthOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthOutput) ToEventDestinationTargetFirehoseAuthOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehoseAuth] {
	return pulumix.Output[EventDestinationTargetFirehoseAuth]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseAuthOutput) Creds() EventDestinationTargetFirehoseAuthCredArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehoseAuth) []EventDestinationTargetFirehoseAuthCred { return v.Creds }).(EventDestinationTargetFirehoseAuthCredArrayOutput)
}

func (o EventDestinationTargetFirehoseAuthOutput) Roles() EventDestinationTargetFirehoseAuthRoleArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehoseAuth) []EventDestinationTargetFirehoseAuthRole { return v.Roles }).(EventDestinationTargetFirehoseAuthRoleArrayOutput)
}

type EventDestinationTargetFirehoseAuthArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehoseAuth)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseAuthArrayOutput) ToEventDestinationTargetFirehoseAuthArrayOutput() EventDestinationTargetFirehoseAuthArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthArrayOutput) ToEventDestinationTargetFirehoseAuthArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehoseAuth] {
	return pulumix.Output[[]EventDestinationTargetFirehoseAuth]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseAuthArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetFirehoseAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetFirehoseAuth {
		return vs[0].([]EventDestinationTargetFirehoseAuth)[vs[1].(int)]
	}).(EventDestinationTargetFirehoseAuthOutput)
}

type EventDestinationTargetFirehoseAuthCred struct {
	AwsAccessKeyId     string `pulumi:"awsAccessKeyId"`
	AwsSecretAccessKey string `pulumi:"awsSecretAccessKey"`
}

// EventDestinationTargetFirehoseAuthCredInput is an input type that accepts EventDestinationTargetFirehoseAuthCredArgs and EventDestinationTargetFirehoseAuthCredOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseAuthCredInput` via:
//
//	EventDestinationTargetFirehoseAuthCredArgs{...}
type EventDestinationTargetFirehoseAuthCredInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseAuthCredOutput() EventDestinationTargetFirehoseAuthCredOutput
	ToEventDestinationTargetFirehoseAuthCredOutputWithContext(context.Context) EventDestinationTargetFirehoseAuthCredOutput
}

type EventDestinationTargetFirehoseAuthCredArgs struct {
	AwsAccessKeyId     pulumi.StringInput `pulumi:"awsAccessKeyId"`
	AwsSecretAccessKey pulumi.StringInput `pulumi:"awsSecretAccessKey"`
}

func (EventDestinationTargetFirehoseAuthCredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehoseAuthCred)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseAuthCredArgs) ToEventDestinationTargetFirehoseAuthCredOutput() EventDestinationTargetFirehoseAuthCredOutput {
	return i.ToEventDestinationTargetFirehoseAuthCredOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseAuthCredArgs) ToEventDestinationTargetFirehoseAuthCredOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthCredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseAuthCredOutput)
}

func (i EventDestinationTargetFirehoseAuthCredArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehoseAuthCred] {
	return pulumix.Output[EventDestinationTargetFirehoseAuthCred]{
		OutputState: i.ToEventDestinationTargetFirehoseAuthCredOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetFirehoseAuthCredArrayInput is an input type that accepts EventDestinationTargetFirehoseAuthCredArray and EventDestinationTargetFirehoseAuthCredArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseAuthCredArrayInput` via:
//
//	EventDestinationTargetFirehoseAuthCredArray{ EventDestinationTargetFirehoseAuthCredArgs{...} }
type EventDestinationTargetFirehoseAuthCredArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseAuthCredArrayOutput() EventDestinationTargetFirehoseAuthCredArrayOutput
	ToEventDestinationTargetFirehoseAuthCredArrayOutputWithContext(context.Context) EventDestinationTargetFirehoseAuthCredArrayOutput
}

type EventDestinationTargetFirehoseAuthCredArray []EventDestinationTargetFirehoseAuthCredInput

func (EventDestinationTargetFirehoseAuthCredArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehoseAuthCred)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseAuthCredArray) ToEventDestinationTargetFirehoseAuthCredArrayOutput() EventDestinationTargetFirehoseAuthCredArrayOutput {
	return i.ToEventDestinationTargetFirehoseAuthCredArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseAuthCredArray) ToEventDestinationTargetFirehoseAuthCredArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthCredArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseAuthCredArrayOutput)
}

func (i EventDestinationTargetFirehoseAuthCredArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehoseAuthCred] {
	return pulumix.Output[[]EventDestinationTargetFirehoseAuthCred]{
		OutputState: i.ToEventDestinationTargetFirehoseAuthCredArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetFirehoseAuthCredOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseAuthCredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehoseAuthCred)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseAuthCredOutput) ToEventDestinationTargetFirehoseAuthCredOutput() EventDestinationTargetFirehoseAuthCredOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthCredOutput) ToEventDestinationTargetFirehoseAuthCredOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthCredOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthCredOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehoseAuthCred] {
	return pulumix.Output[EventDestinationTargetFirehoseAuthCred]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseAuthCredOutput) AwsAccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehoseAuthCred) string { return v.AwsAccessKeyId }).(pulumi.StringOutput)
}

func (o EventDestinationTargetFirehoseAuthCredOutput) AwsSecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehoseAuthCred) string { return v.AwsSecretAccessKey }).(pulumi.StringOutput)
}

type EventDestinationTargetFirehoseAuthCredArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseAuthCredArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehoseAuthCred)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseAuthCredArrayOutput) ToEventDestinationTargetFirehoseAuthCredArrayOutput() EventDestinationTargetFirehoseAuthCredArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthCredArrayOutput) ToEventDestinationTargetFirehoseAuthCredArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthCredArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthCredArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehoseAuthCred] {
	return pulumix.Output[[]EventDestinationTargetFirehoseAuthCred]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseAuthCredArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetFirehoseAuthCredOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetFirehoseAuthCred {
		return vs[0].([]EventDestinationTargetFirehoseAuthCred)[vs[1].(int)]
	}).(EventDestinationTargetFirehoseAuthCredOutput)
}

type EventDestinationTargetFirehoseAuthRole struct {
	RoleArn string `pulumi:"roleArn"`
}

// EventDestinationTargetFirehoseAuthRoleInput is an input type that accepts EventDestinationTargetFirehoseAuthRoleArgs and EventDestinationTargetFirehoseAuthRoleOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseAuthRoleInput` via:
//
//	EventDestinationTargetFirehoseAuthRoleArgs{...}
type EventDestinationTargetFirehoseAuthRoleInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseAuthRoleOutput() EventDestinationTargetFirehoseAuthRoleOutput
	ToEventDestinationTargetFirehoseAuthRoleOutputWithContext(context.Context) EventDestinationTargetFirehoseAuthRoleOutput
}

type EventDestinationTargetFirehoseAuthRoleArgs struct {
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (EventDestinationTargetFirehoseAuthRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehoseAuthRole)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseAuthRoleArgs) ToEventDestinationTargetFirehoseAuthRoleOutput() EventDestinationTargetFirehoseAuthRoleOutput {
	return i.ToEventDestinationTargetFirehoseAuthRoleOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseAuthRoleArgs) ToEventDestinationTargetFirehoseAuthRoleOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseAuthRoleOutput)
}

func (i EventDestinationTargetFirehoseAuthRoleArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehoseAuthRole] {
	return pulumix.Output[EventDestinationTargetFirehoseAuthRole]{
		OutputState: i.ToEventDestinationTargetFirehoseAuthRoleOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetFirehoseAuthRoleArrayInput is an input type that accepts EventDestinationTargetFirehoseAuthRoleArray and EventDestinationTargetFirehoseAuthRoleArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetFirehoseAuthRoleArrayInput` via:
//
//	EventDestinationTargetFirehoseAuthRoleArray{ EventDestinationTargetFirehoseAuthRoleArgs{...} }
type EventDestinationTargetFirehoseAuthRoleArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetFirehoseAuthRoleArrayOutput() EventDestinationTargetFirehoseAuthRoleArrayOutput
	ToEventDestinationTargetFirehoseAuthRoleArrayOutputWithContext(context.Context) EventDestinationTargetFirehoseAuthRoleArrayOutput
}

type EventDestinationTargetFirehoseAuthRoleArray []EventDestinationTargetFirehoseAuthRoleInput

func (EventDestinationTargetFirehoseAuthRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehoseAuthRole)(nil)).Elem()
}

func (i EventDestinationTargetFirehoseAuthRoleArray) ToEventDestinationTargetFirehoseAuthRoleArrayOutput() EventDestinationTargetFirehoseAuthRoleArrayOutput {
	return i.ToEventDestinationTargetFirehoseAuthRoleArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetFirehoseAuthRoleArray) ToEventDestinationTargetFirehoseAuthRoleArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetFirehoseAuthRoleArrayOutput)
}

func (i EventDestinationTargetFirehoseAuthRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehoseAuthRole] {
	return pulumix.Output[[]EventDestinationTargetFirehoseAuthRole]{
		OutputState: i.ToEventDestinationTargetFirehoseAuthRoleArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetFirehoseAuthRoleOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseAuthRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetFirehoseAuthRole)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseAuthRoleOutput) ToEventDestinationTargetFirehoseAuthRoleOutput() EventDestinationTargetFirehoseAuthRoleOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthRoleOutput) ToEventDestinationTargetFirehoseAuthRoleOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthRoleOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthRoleOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetFirehoseAuthRole] {
	return pulumix.Output[EventDestinationTargetFirehoseAuthRole]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseAuthRoleOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetFirehoseAuthRole) string { return v.RoleArn }).(pulumi.StringOutput)
}

type EventDestinationTargetFirehoseAuthRoleArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetFirehoseAuthRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetFirehoseAuthRole)(nil)).Elem()
}

func (o EventDestinationTargetFirehoseAuthRoleArrayOutput) ToEventDestinationTargetFirehoseAuthRoleArrayOutput() EventDestinationTargetFirehoseAuthRoleArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthRoleArrayOutput) ToEventDestinationTargetFirehoseAuthRoleArrayOutputWithContext(ctx context.Context) EventDestinationTargetFirehoseAuthRoleArrayOutput {
	return o
}

func (o EventDestinationTargetFirehoseAuthRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetFirehoseAuthRole] {
	return pulumix.Output[[]EventDestinationTargetFirehoseAuthRole]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetFirehoseAuthRoleArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetFirehoseAuthRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetFirehoseAuthRole {
		return vs[0].([]EventDestinationTargetFirehoseAuthRole)[vs[1].(int)]
	}).(EventDestinationTargetFirehoseAuthRoleOutput)
}

type EventDestinationTargetKinese struct {
	Auths     []EventDestinationTargetKineseAuth `pulumi:"auths"`
	StreamArn *string                            `pulumi:"streamArn"`
}

// EventDestinationTargetKineseInput is an input type that accepts EventDestinationTargetKineseArgs and EventDestinationTargetKineseOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseInput` via:
//
//	EventDestinationTargetKineseArgs{...}
type EventDestinationTargetKineseInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseOutput() EventDestinationTargetKineseOutput
	ToEventDestinationTargetKineseOutputWithContext(context.Context) EventDestinationTargetKineseOutput
}

type EventDestinationTargetKineseArgs struct {
	Auths     EventDestinationTargetKineseAuthArrayInput `pulumi:"auths"`
	StreamArn pulumi.StringPtrInput                      `pulumi:"streamArn"`
}

func (EventDestinationTargetKineseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKinese)(nil)).Elem()
}

func (i EventDestinationTargetKineseArgs) ToEventDestinationTargetKineseOutput() EventDestinationTargetKineseOutput {
	return i.ToEventDestinationTargetKineseOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseArgs) ToEventDestinationTargetKineseOutputWithContext(ctx context.Context) EventDestinationTargetKineseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseOutput)
}

func (i EventDestinationTargetKineseArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKinese] {
	return pulumix.Output[EventDestinationTargetKinese]{
		OutputState: i.ToEventDestinationTargetKineseOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetKineseArrayInput is an input type that accepts EventDestinationTargetKineseArray and EventDestinationTargetKineseArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseArrayInput` via:
//
//	EventDestinationTargetKineseArray{ EventDestinationTargetKineseArgs{...} }
type EventDestinationTargetKineseArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseArrayOutput() EventDestinationTargetKineseArrayOutput
	ToEventDestinationTargetKineseArrayOutputWithContext(context.Context) EventDestinationTargetKineseArrayOutput
}

type EventDestinationTargetKineseArray []EventDestinationTargetKineseInput

func (EventDestinationTargetKineseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKinese)(nil)).Elem()
}

func (i EventDestinationTargetKineseArray) ToEventDestinationTargetKineseArrayOutput() EventDestinationTargetKineseArrayOutput {
	return i.ToEventDestinationTargetKineseArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseArray) ToEventDestinationTargetKineseArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseArrayOutput)
}

func (i EventDestinationTargetKineseArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKinese] {
	return pulumix.Output[[]EventDestinationTargetKinese]{
		OutputState: i.ToEventDestinationTargetKineseArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetKineseOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKinese)(nil)).Elem()
}

func (o EventDestinationTargetKineseOutput) ToEventDestinationTargetKineseOutput() EventDestinationTargetKineseOutput {
	return o
}

func (o EventDestinationTargetKineseOutput) ToEventDestinationTargetKineseOutputWithContext(ctx context.Context) EventDestinationTargetKineseOutput {
	return o
}

func (o EventDestinationTargetKineseOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKinese] {
	return pulumix.Output[EventDestinationTargetKinese]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseOutput) Auths() EventDestinationTargetKineseAuthArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetKinese) []EventDestinationTargetKineseAuth { return v.Auths }).(EventDestinationTargetKineseAuthArrayOutput)
}

func (o EventDestinationTargetKineseOutput) StreamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDestinationTargetKinese) *string { return v.StreamArn }).(pulumi.StringPtrOutput)
}

type EventDestinationTargetKineseArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKinese)(nil)).Elem()
}

func (o EventDestinationTargetKineseArrayOutput) ToEventDestinationTargetKineseArrayOutput() EventDestinationTargetKineseArrayOutput {
	return o
}

func (o EventDestinationTargetKineseArrayOutput) ToEventDestinationTargetKineseArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseArrayOutput {
	return o
}

func (o EventDestinationTargetKineseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKinese] {
	return pulumix.Output[[]EventDestinationTargetKinese]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetKineseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetKinese {
		return vs[0].([]EventDestinationTargetKinese)[vs[1].(int)]
	}).(EventDestinationTargetKineseOutput)
}

type EventDestinationTargetKineseAuth struct {
	Creds []EventDestinationTargetKineseAuthCred `pulumi:"creds"`
	Roles []EventDestinationTargetKineseAuthRole `pulumi:"roles"`
}

// EventDestinationTargetKineseAuthInput is an input type that accepts EventDestinationTargetKineseAuthArgs and EventDestinationTargetKineseAuthOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseAuthInput` via:
//
//	EventDestinationTargetKineseAuthArgs{...}
type EventDestinationTargetKineseAuthInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseAuthOutput() EventDestinationTargetKineseAuthOutput
	ToEventDestinationTargetKineseAuthOutputWithContext(context.Context) EventDestinationTargetKineseAuthOutput
}

type EventDestinationTargetKineseAuthArgs struct {
	Creds EventDestinationTargetKineseAuthCredArrayInput `pulumi:"creds"`
	Roles EventDestinationTargetKineseAuthRoleArrayInput `pulumi:"roles"`
}

func (EventDestinationTargetKineseAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKineseAuth)(nil)).Elem()
}

func (i EventDestinationTargetKineseAuthArgs) ToEventDestinationTargetKineseAuthOutput() EventDestinationTargetKineseAuthOutput {
	return i.ToEventDestinationTargetKineseAuthOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseAuthArgs) ToEventDestinationTargetKineseAuthOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseAuthOutput)
}

func (i EventDestinationTargetKineseAuthArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKineseAuth] {
	return pulumix.Output[EventDestinationTargetKineseAuth]{
		OutputState: i.ToEventDestinationTargetKineseAuthOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetKineseAuthArrayInput is an input type that accepts EventDestinationTargetKineseAuthArray and EventDestinationTargetKineseAuthArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseAuthArrayInput` via:
//
//	EventDestinationTargetKineseAuthArray{ EventDestinationTargetKineseAuthArgs{...} }
type EventDestinationTargetKineseAuthArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseAuthArrayOutput() EventDestinationTargetKineseAuthArrayOutput
	ToEventDestinationTargetKineseAuthArrayOutputWithContext(context.Context) EventDestinationTargetKineseAuthArrayOutput
}

type EventDestinationTargetKineseAuthArray []EventDestinationTargetKineseAuthInput

func (EventDestinationTargetKineseAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKineseAuth)(nil)).Elem()
}

func (i EventDestinationTargetKineseAuthArray) ToEventDestinationTargetKineseAuthArrayOutput() EventDestinationTargetKineseAuthArrayOutput {
	return i.ToEventDestinationTargetKineseAuthArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseAuthArray) ToEventDestinationTargetKineseAuthArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseAuthArrayOutput)
}

func (i EventDestinationTargetKineseAuthArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKineseAuth] {
	return pulumix.Output[[]EventDestinationTargetKineseAuth]{
		OutputState: i.ToEventDestinationTargetKineseAuthArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetKineseAuthOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKineseAuth)(nil)).Elem()
}

func (o EventDestinationTargetKineseAuthOutput) ToEventDestinationTargetKineseAuthOutput() EventDestinationTargetKineseAuthOutput {
	return o
}

func (o EventDestinationTargetKineseAuthOutput) ToEventDestinationTargetKineseAuthOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthOutput {
	return o
}

func (o EventDestinationTargetKineseAuthOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKineseAuth] {
	return pulumix.Output[EventDestinationTargetKineseAuth]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseAuthOutput) Creds() EventDestinationTargetKineseAuthCredArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetKineseAuth) []EventDestinationTargetKineseAuthCred { return v.Creds }).(EventDestinationTargetKineseAuthCredArrayOutput)
}

func (o EventDestinationTargetKineseAuthOutput) Roles() EventDestinationTargetKineseAuthRoleArrayOutput {
	return o.ApplyT(func(v EventDestinationTargetKineseAuth) []EventDestinationTargetKineseAuthRole { return v.Roles }).(EventDestinationTargetKineseAuthRoleArrayOutput)
}

type EventDestinationTargetKineseAuthArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKineseAuth)(nil)).Elem()
}

func (o EventDestinationTargetKineseAuthArrayOutput) ToEventDestinationTargetKineseAuthArrayOutput() EventDestinationTargetKineseAuthArrayOutput {
	return o
}

func (o EventDestinationTargetKineseAuthArrayOutput) ToEventDestinationTargetKineseAuthArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthArrayOutput {
	return o
}

func (o EventDestinationTargetKineseAuthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKineseAuth] {
	return pulumix.Output[[]EventDestinationTargetKineseAuth]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseAuthArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetKineseAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetKineseAuth {
		return vs[0].([]EventDestinationTargetKineseAuth)[vs[1].(int)]
	}).(EventDestinationTargetKineseAuthOutput)
}

type EventDestinationTargetKineseAuthCred struct {
	AwsAccessKeyId     string `pulumi:"awsAccessKeyId"`
	AwsSecretAccessKey string `pulumi:"awsSecretAccessKey"`
}

// EventDestinationTargetKineseAuthCredInput is an input type that accepts EventDestinationTargetKineseAuthCredArgs and EventDestinationTargetKineseAuthCredOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseAuthCredInput` via:
//
//	EventDestinationTargetKineseAuthCredArgs{...}
type EventDestinationTargetKineseAuthCredInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseAuthCredOutput() EventDestinationTargetKineseAuthCredOutput
	ToEventDestinationTargetKineseAuthCredOutputWithContext(context.Context) EventDestinationTargetKineseAuthCredOutput
}

type EventDestinationTargetKineseAuthCredArgs struct {
	AwsAccessKeyId     pulumi.StringInput `pulumi:"awsAccessKeyId"`
	AwsSecretAccessKey pulumi.StringInput `pulumi:"awsSecretAccessKey"`
}

func (EventDestinationTargetKineseAuthCredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKineseAuthCred)(nil)).Elem()
}

func (i EventDestinationTargetKineseAuthCredArgs) ToEventDestinationTargetKineseAuthCredOutput() EventDestinationTargetKineseAuthCredOutput {
	return i.ToEventDestinationTargetKineseAuthCredOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseAuthCredArgs) ToEventDestinationTargetKineseAuthCredOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthCredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseAuthCredOutput)
}

func (i EventDestinationTargetKineseAuthCredArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKineseAuthCred] {
	return pulumix.Output[EventDestinationTargetKineseAuthCred]{
		OutputState: i.ToEventDestinationTargetKineseAuthCredOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetKineseAuthCredArrayInput is an input type that accepts EventDestinationTargetKineseAuthCredArray and EventDestinationTargetKineseAuthCredArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseAuthCredArrayInput` via:
//
//	EventDestinationTargetKineseAuthCredArray{ EventDestinationTargetKineseAuthCredArgs{...} }
type EventDestinationTargetKineseAuthCredArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseAuthCredArrayOutput() EventDestinationTargetKineseAuthCredArrayOutput
	ToEventDestinationTargetKineseAuthCredArrayOutputWithContext(context.Context) EventDestinationTargetKineseAuthCredArrayOutput
}

type EventDestinationTargetKineseAuthCredArray []EventDestinationTargetKineseAuthCredInput

func (EventDestinationTargetKineseAuthCredArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKineseAuthCred)(nil)).Elem()
}

func (i EventDestinationTargetKineseAuthCredArray) ToEventDestinationTargetKineseAuthCredArrayOutput() EventDestinationTargetKineseAuthCredArrayOutput {
	return i.ToEventDestinationTargetKineseAuthCredArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseAuthCredArray) ToEventDestinationTargetKineseAuthCredArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthCredArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseAuthCredArrayOutput)
}

func (i EventDestinationTargetKineseAuthCredArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKineseAuthCred] {
	return pulumix.Output[[]EventDestinationTargetKineseAuthCred]{
		OutputState: i.ToEventDestinationTargetKineseAuthCredArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetKineseAuthCredOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseAuthCredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKineseAuthCred)(nil)).Elem()
}

func (o EventDestinationTargetKineseAuthCredOutput) ToEventDestinationTargetKineseAuthCredOutput() EventDestinationTargetKineseAuthCredOutput {
	return o
}

func (o EventDestinationTargetKineseAuthCredOutput) ToEventDestinationTargetKineseAuthCredOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthCredOutput {
	return o
}

func (o EventDestinationTargetKineseAuthCredOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKineseAuthCred] {
	return pulumix.Output[EventDestinationTargetKineseAuthCred]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseAuthCredOutput) AwsAccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetKineseAuthCred) string { return v.AwsAccessKeyId }).(pulumi.StringOutput)
}

func (o EventDestinationTargetKineseAuthCredOutput) AwsSecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetKineseAuthCred) string { return v.AwsSecretAccessKey }).(pulumi.StringOutput)
}

type EventDestinationTargetKineseAuthCredArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseAuthCredArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKineseAuthCred)(nil)).Elem()
}

func (o EventDestinationTargetKineseAuthCredArrayOutput) ToEventDestinationTargetKineseAuthCredArrayOutput() EventDestinationTargetKineseAuthCredArrayOutput {
	return o
}

func (o EventDestinationTargetKineseAuthCredArrayOutput) ToEventDestinationTargetKineseAuthCredArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthCredArrayOutput {
	return o
}

func (o EventDestinationTargetKineseAuthCredArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKineseAuthCred] {
	return pulumix.Output[[]EventDestinationTargetKineseAuthCred]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseAuthCredArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetKineseAuthCredOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetKineseAuthCred {
		return vs[0].([]EventDestinationTargetKineseAuthCred)[vs[1].(int)]
	}).(EventDestinationTargetKineseAuthCredOutput)
}

type EventDestinationTargetKineseAuthRole struct {
	RoleArn string `pulumi:"roleArn"`
}

// EventDestinationTargetKineseAuthRoleInput is an input type that accepts EventDestinationTargetKineseAuthRoleArgs and EventDestinationTargetKineseAuthRoleOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseAuthRoleInput` via:
//
//	EventDestinationTargetKineseAuthRoleArgs{...}
type EventDestinationTargetKineseAuthRoleInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseAuthRoleOutput() EventDestinationTargetKineseAuthRoleOutput
	ToEventDestinationTargetKineseAuthRoleOutputWithContext(context.Context) EventDestinationTargetKineseAuthRoleOutput
}

type EventDestinationTargetKineseAuthRoleArgs struct {
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (EventDestinationTargetKineseAuthRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKineseAuthRole)(nil)).Elem()
}

func (i EventDestinationTargetKineseAuthRoleArgs) ToEventDestinationTargetKineseAuthRoleOutput() EventDestinationTargetKineseAuthRoleOutput {
	return i.ToEventDestinationTargetKineseAuthRoleOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseAuthRoleArgs) ToEventDestinationTargetKineseAuthRoleOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseAuthRoleOutput)
}

func (i EventDestinationTargetKineseAuthRoleArgs) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKineseAuthRole] {
	return pulumix.Output[EventDestinationTargetKineseAuthRole]{
		OutputState: i.ToEventDestinationTargetKineseAuthRoleOutputWithContext(ctx).OutputState,
	}
}

// EventDestinationTargetKineseAuthRoleArrayInput is an input type that accepts EventDestinationTargetKineseAuthRoleArray and EventDestinationTargetKineseAuthRoleArrayOutput values.
// You can construct a concrete instance of `EventDestinationTargetKineseAuthRoleArrayInput` via:
//
//	EventDestinationTargetKineseAuthRoleArray{ EventDestinationTargetKineseAuthRoleArgs{...} }
type EventDestinationTargetKineseAuthRoleArrayInput interface {
	pulumi.Input

	ToEventDestinationTargetKineseAuthRoleArrayOutput() EventDestinationTargetKineseAuthRoleArrayOutput
	ToEventDestinationTargetKineseAuthRoleArrayOutputWithContext(context.Context) EventDestinationTargetKineseAuthRoleArrayOutput
}

type EventDestinationTargetKineseAuthRoleArray []EventDestinationTargetKineseAuthRoleInput

func (EventDestinationTargetKineseAuthRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKineseAuthRole)(nil)).Elem()
}

func (i EventDestinationTargetKineseAuthRoleArray) ToEventDestinationTargetKineseAuthRoleArrayOutput() EventDestinationTargetKineseAuthRoleArrayOutput {
	return i.ToEventDestinationTargetKineseAuthRoleArrayOutputWithContext(context.Background())
}

func (i EventDestinationTargetKineseAuthRoleArray) ToEventDestinationTargetKineseAuthRoleArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationTargetKineseAuthRoleArrayOutput)
}

func (i EventDestinationTargetKineseAuthRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKineseAuthRole] {
	return pulumix.Output[[]EventDestinationTargetKineseAuthRole]{
		OutputState: i.ToEventDestinationTargetKineseAuthRoleArrayOutputWithContext(ctx).OutputState,
	}
}

type EventDestinationTargetKineseAuthRoleOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseAuthRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationTargetKineseAuthRole)(nil)).Elem()
}

func (o EventDestinationTargetKineseAuthRoleOutput) ToEventDestinationTargetKineseAuthRoleOutput() EventDestinationTargetKineseAuthRoleOutput {
	return o
}

func (o EventDestinationTargetKineseAuthRoleOutput) ToEventDestinationTargetKineseAuthRoleOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthRoleOutput {
	return o
}

func (o EventDestinationTargetKineseAuthRoleOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationTargetKineseAuthRole] {
	return pulumix.Output[EventDestinationTargetKineseAuthRole]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseAuthRoleOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventDestinationTargetKineseAuthRole) string { return v.RoleArn }).(pulumi.StringOutput)
}

type EventDestinationTargetKineseAuthRoleArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationTargetKineseAuthRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDestinationTargetKineseAuthRole)(nil)).Elem()
}

func (o EventDestinationTargetKineseAuthRoleArrayOutput) ToEventDestinationTargetKineseAuthRoleArrayOutput() EventDestinationTargetKineseAuthRoleArrayOutput {
	return o
}

func (o EventDestinationTargetKineseAuthRoleArrayOutput) ToEventDestinationTargetKineseAuthRoleArrayOutputWithContext(ctx context.Context) EventDestinationTargetKineseAuthRoleArrayOutput {
	return o
}

func (o EventDestinationTargetKineseAuthRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventDestinationTargetKineseAuthRole] {
	return pulumix.Output[[]EventDestinationTargetKineseAuthRole]{
		OutputState: o.OutputState,
	}
}

func (o EventDestinationTargetKineseAuthRoleArrayOutput) Index(i pulumi.IntInput) EventDestinationTargetKineseAuthRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDestinationTargetKineseAuthRole {
		return vs[0].([]EventDestinationTargetKineseAuthRole)[vs[1].(int)]
	}).(EventDestinationTargetKineseAuthRoleOutput)
}

type EventSubscriptionSource struct {
	// TODO
	Fields []string `pulumi:"fields"`
	// TODO
	Filter *string `pulumi:"filter"`
	// Type of event for which an event subscription will trigger
	Type *string `pulumi:"type"`
	// URI of the Event Source API resource.
	Uri *string `pulumi:"uri"`
}

// EventSubscriptionSourceInput is an input type that accepts EventSubscriptionSourceArgs and EventSubscriptionSourceOutput values.
// You can construct a concrete instance of `EventSubscriptionSourceInput` via:
//
//	EventSubscriptionSourceArgs{...}
type EventSubscriptionSourceInput interface {
	pulumi.Input

	ToEventSubscriptionSourceOutput() EventSubscriptionSourceOutput
	ToEventSubscriptionSourceOutputWithContext(context.Context) EventSubscriptionSourceOutput
}

type EventSubscriptionSourceArgs struct {
	// TODO
	Fields pulumi.StringArrayInput `pulumi:"fields"`
	// TODO
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Type of event for which an event subscription will trigger
	Type pulumi.StringPtrInput `pulumi:"type"`
	// URI of the Event Source API resource.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (EventSubscriptionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSource)(nil)).Elem()
}

func (i EventSubscriptionSourceArgs) ToEventSubscriptionSourceOutput() EventSubscriptionSourceOutput {
	return i.ToEventSubscriptionSourceOutputWithContext(context.Background())
}

func (i EventSubscriptionSourceArgs) ToEventSubscriptionSourceOutputWithContext(ctx context.Context) EventSubscriptionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSourceOutput)
}

func (i EventSubscriptionSourceArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionSource] {
	return pulumix.Output[EventSubscriptionSource]{
		OutputState: i.ToEventSubscriptionSourceOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionSourceArrayInput is an input type that accepts EventSubscriptionSourceArray and EventSubscriptionSourceArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionSourceArrayInput` via:
//
//	EventSubscriptionSourceArray{ EventSubscriptionSourceArgs{...} }
type EventSubscriptionSourceArrayInput interface {
	pulumi.Input

	ToEventSubscriptionSourceArrayOutput() EventSubscriptionSourceArrayOutput
	ToEventSubscriptionSourceArrayOutputWithContext(context.Context) EventSubscriptionSourceArrayOutput
}

type EventSubscriptionSourceArray []EventSubscriptionSourceInput

func (EventSubscriptionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionSource)(nil)).Elem()
}

func (i EventSubscriptionSourceArray) ToEventSubscriptionSourceArrayOutput() EventSubscriptionSourceArrayOutput {
	return i.ToEventSubscriptionSourceArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionSourceArray) ToEventSubscriptionSourceArrayOutputWithContext(ctx context.Context) EventSubscriptionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSourceArrayOutput)
}

func (i EventSubscriptionSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionSource] {
	return pulumix.Output[[]EventSubscriptionSource]{
		OutputState: i.ToEventSubscriptionSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionSourceOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSource)(nil)).Elem()
}

func (o EventSubscriptionSourceOutput) ToEventSubscriptionSourceOutput() EventSubscriptionSourceOutput {
	return o
}

func (o EventSubscriptionSourceOutput) ToEventSubscriptionSourceOutputWithContext(ctx context.Context) EventSubscriptionSourceOutput {
	return o
}

func (o EventSubscriptionSourceOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionSource] {
	return pulumix.Output[EventSubscriptionSource]{
		OutputState: o.OutputState,
	}
}

// TODO
func (o EventSubscriptionSourceOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionSource) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// TODO
func (o EventSubscriptionSourceOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSource) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Type of event for which an event subscription will trigger
func (o EventSubscriptionSourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// URI of the Event Source API resource.
func (o EventSubscriptionSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type EventSubscriptionSourceArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionSource)(nil)).Elem()
}

func (o EventSubscriptionSourceArrayOutput) ToEventSubscriptionSourceArrayOutput() EventSubscriptionSourceArrayOutput {
	return o
}

func (o EventSubscriptionSourceArrayOutput) ToEventSubscriptionSourceArrayOutputWithContext(ctx context.Context) EventSubscriptionSourceArrayOutput {
	return o
}

func (o EventSubscriptionSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionSource] {
	return pulumix.Output[[]EventSubscriptionSource]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionSourceArrayOutput) Index(i pulumi.IntInput) EventSubscriptionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionSource {
		return vs[0].([]EventSubscriptionSource)[vs[1].(int)]
	}).(EventSubscriptionSourceOutput)
}

type ReservedDomainCertificateManagementPolicy struct {
	// certificate authority to request certificates from. The only supported value is letsencrypt.
	Authority *string `pulumi:"authority"`
	// type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
	PrivateKeyType *string `pulumi:"privateKeyType"`
}

// ReservedDomainCertificateManagementPolicyInput is an input type that accepts ReservedDomainCertificateManagementPolicyArgs and ReservedDomainCertificateManagementPolicyOutput values.
// You can construct a concrete instance of `ReservedDomainCertificateManagementPolicyInput` via:
//
//	ReservedDomainCertificateManagementPolicyArgs{...}
type ReservedDomainCertificateManagementPolicyInput interface {
	pulumi.Input

	ToReservedDomainCertificateManagementPolicyOutput() ReservedDomainCertificateManagementPolicyOutput
	ToReservedDomainCertificateManagementPolicyOutputWithContext(context.Context) ReservedDomainCertificateManagementPolicyOutput
}

type ReservedDomainCertificateManagementPolicyArgs struct {
	// certificate authority to request certificates from. The only supported value is letsencrypt.
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	// type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
	PrivateKeyType pulumi.StringPtrInput `pulumi:"privateKeyType"`
}

func (ReservedDomainCertificateManagementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedDomainCertificateManagementPolicy)(nil)).Elem()
}

func (i ReservedDomainCertificateManagementPolicyArgs) ToReservedDomainCertificateManagementPolicyOutput() ReservedDomainCertificateManagementPolicyOutput {
	return i.ToReservedDomainCertificateManagementPolicyOutputWithContext(context.Background())
}

func (i ReservedDomainCertificateManagementPolicyArgs) ToReservedDomainCertificateManagementPolicyOutputWithContext(ctx context.Context) ReservedDomainCertificateManagementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedDomainCertificateManagementPolicyOutput)
}

func (i ReservedDomainCertificateManagementPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ReservedDomainCertificateManagementPolicy] {
	return pulumix.Output[ReservedDomainCertificateManagementPolicy]{
		OutputState: i.ToReservedDomainCertificateManagementPolicyOutputWithContext(ctx).OutputState,
	}
}

// ReservedDomainCertificateManagementPolicyArrayInput is an input type that accepts ReservedDomainCertificateManagementPolicyArray and ReservedDomainCertificateManagementPolicyArrayOutput values.
// You can construct a concrete instance of `ReservedDomainCertificateManagementPolicyArrayInput` via:
//
//	ReservedDomainCertificateManagementPolicyArray{ ReservedDomainCertificateManagementPolicyArgs{...} }
type ReservedDomainCertificateManagementPolicyArrayInput interface {
	pulumi.Input

	ToReservedDomainCertificateManagementPolicyArrayOutput() ReservedDomainCertificateManagementPolicyArrayOutput
	ToReservedDomainCertificateManagementPolicyArrayOutputWithContext(context.Context) ReservedDomainCertificateManagementPolicyArrayOutput
}

type ReservedDomainCertificateManagementPolicyArray []ReservedDomainCertificateManagementPolicyInput

func (ReservedDomainCertificateManagementPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservedDomainCertificateManagementPolicy)(nil)).Elem()
}

func (i ReservedDomainCertificateManagementPolicyArray) ToReservedDomainCertificateManagementPolicyArrayOutput() ReservedDomainCertificateManagementPolicyArrayOutput {
	return i.ToReservedDomainCertificateManagementPolicyArrayOutputWithContext(context.Background())
}

func (i ReservedDomainCertificateManagementPolicyArray) ToReservedDomainCertificateManagementPolicyArrayOutputWithContext(ctx context.Context) ReservedDomainCertificateManagementPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedDomainCertificateManagementPolicyArrayOutput)
}

func (i ReservedDomainCertificateManagementPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]ReservedDomainCertificateManagementPolicy] {
	return pulumix.Output[[]ReservedDomainCertificateManagementPolicy]{
		OutputState: i.ToReservedDomainCertificateManagementPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type ReservedDomainCertificateManagementPolicyOutput struct{ *pulumi.OutputState }

func (ReservedDomainCertificateManagementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedDomainCertificateManagementPolicy)(nil)).Elem()
}

func (o ReservedDomainCertificateManagementPolicyOutput) ToReservedDomainCertificateManagementPolicyOutput() ReservedDomainCertificateManagementPolicyOutput {
	return o
}

func (o ReservedDomainCertificateManagementPolicyOutput) ToReservedDomainCertificateManagementPolicyOutputWithContext(ctx context.Context) ReservedDomainCertificateManagementPolicyOutput {
	return o
}

func (o ReservedDomainCertificateManagementPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ReservedDomainCertificateManagementPolicy] {
	return pulumix.Output[ReservedDomainCertificateManagementPolicy]{
		OutputState: o.OutputState,
	}
}

// certificate authority to request certificates from. The only supported value is letsencrypt.
func (o ReservedDomainCertificateManagementPolicyOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservedDomainCertificateManagementPolicy) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

// type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
func (o ReservedDomainCertificateManagementPolicyOutput) PrivateKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservedDomainCertificateManagementPolicy) *string { return v.PrivateKeyType }).(pulumi.StringPtrOutput)
}

type ReservedDomainCertificateManagementPolicyArrayOutput struct{ *pulumi.OutputState }

func (ReservedDomainCertificateManagementPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservedDomainCertificateManagementPolicy)(nil)).Elem()
}

func (o ReservedDomainCertificateManagementPolicyArrayOutput) ToReservedDomainCertificateManagementPolicyArrayOutput() ReservedDomainCertificateManagementPolicyArrayOutput {
	return o
}

func (o ReservedDomainCertificateManagementPolicyArrayOutput) ToReservedDomainCertificateManagementPolicyArrayOutputWithContext(ctx context.Context) ReservedDomainCertificateManagementPolicyArrayOutput {
	return o
}

func (o ReservedDomainCertificateManagementPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ReservedDomainCertificateManagementPolicy] {
	return pulumix.Output[[]ReservedDomainCertificateManagementPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ReservedDomainCertificateManagementPolicyArrayOutput) Index(i pulumi.IntInput) ReservedDomainCertificateManagementPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservedDomainCertificateManagementPolicy {
		return vs[0].([]ReservedDomainCertificateManagementPolicy)[vs[1].(int)]
	}).(ReservedDomainCertificateManagementPolicyOutput)
}

type TlsCertificateSubjectAlternativeName struct {
	// set of additional domains (including wildcards) this TLS certificate is valid for
	DnsNames []string `pulumi:"dnsNames"`
	// set of IP addresses this TLS certificate is also valid for
	Ips []string `pulumi:"ips"`
}

// TlsCertificateSubjectAlternativeNameInput is an input type that accepts TlsCertificateSubjectAlternativeNameArgs and TlsCertificateSubjectAlternativeNameOutput values.
// You can construct a concrete instance of `TlsCertificateSubjectAlternativeNameInput` via:
//
//	TlsCertificateSubjectAlternativeNameArgs{...}
type TlsCertificateSubjectAlternativeNameInput interface {
	pulumi.Input

	ToTlsCertificateSubjectAlternativeNameOutput() TlsCertificateSubjectAlternativeNameOutput
	ToTlsCertificateSubjectAlternativeNameOutputWithContext(context.Context) TlsCertificateSubjectAlternativeNameOutput
}

type TlsCertificateSubjectAlternativeNameArgs struct {
	// set of additional domains (including wildcards) this TLS certificate is valid for
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// set of IP addresses this TLS certificate is also valid for
	Ips pulumi.StringArrayInput `pulumi:"ips"`
}

func (TlsCertificateSubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateSubjectAlternativeName)(nil)).Elem()
}

func (i TlsCertificateSubjectAlternativeNameArgs) ToTlsCertificateSubjectAlternativeNameOutput() TlsCertificateSubjectAlternativeNameOutput {
	return i.ToTlsCertificateSubjectAlternativeNameOutputWithContext(context.Background())
}

func (i TlsCertificateSubjectAlternativeNameArgs) ToTlsCertificateSubjectAlternativeNameOutputWithContext(ctx context.Context) TlsCertificateSubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateSubjectAlternativeNameOutput)
}

func (i TlsCertificateSubjectAlternativeNameArgs) ToOutput(ctx context.Context) pulumix.Output[TlsCertificateSubjectAlternativeName] {
	return pulumix.Output[TlsCertificateSubjectAlternativeName]{
		OutputState: i.ToTlsCertificateSubjectAlternativeNameOutputWithContext(ctx).OutputState,
	}
}

// TlsCertificateSubjectAlternativeNameArrayInput is an input type that accepts TlsCertificateSubjectAlternativeNameArray and TlsCertificateSubjectAlternativeNameArrayOutput values.
// You can construct a concrete instance of `TlsCertificateSubjectAlternativeNameArrayInput` via:
//
//	TlsCertificateSubjectAlternativeNameArray{ TlsCertificateSubjectAlternativeNameArgs{...} }
type TlsCertificateSubjectAlternativeNameArrayInput interface {
	pulumi.Input

	ToTlsCertificateSubjectAlternativeNameArrayOutput() TlsCertificateSubjectAlternativeNameArrayOutput
	ToTlsCertificateSubjectAlternativeNameArrayOutputWithContext(context.Context) TlsCertificateSubjectAlternativeNameArrayOutput
}

type TlsCertificateSubjectAlternativeNameArray []TlsCertificateSubjectAlternativeNameInput

func (TlsCertificateSubjectAlternativeNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificateSubjectAlternativeName)(nil)).Elem()
}

func (i TlsCertificateSubjectAlternativeNameArray) ToTlsCertificateSubjectAlternativeNameArrayOutput() TlsCertificateSubjectAlternativeNameArrayOutput {
	return i.ToTlsCertificateSubjectAlternativeNameArrayOutputWithContext(context.Background())
}

func (i TlsCertificateSubjectAlternativeNameArray) ToTlsCertificateSubjectAlternativeNameArrayOutputWithContext(ctx context.Context) TlsCertificateSubjectAlternativeNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateSubjectAlternativeNameArrayOutput)
}

func (i TlsCertificateSubjectAlternativeNameArray) ToOutput(ctx context.Context) pulumix.Output[[]TlsCertificateSubjectAlternativeName] {
	return pulumix.Output[[]TlsCertificateSubjectAlternativeName]{
		OutputState: i.ToTlsCertificateSubjectAlternativeNameArrayOutputWithContext(ctx).OutputState,
	}
}

type TlsCertificateSubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (TlsCertificateSubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateSubjectAlternativeName)(nil)).Elem()
}

func (o TlsCertificateSubjectAlternativeNameOutput) ToTlsCertificateSubjectAlternativeNameOutput() TlsCertificateSubjectAlternativeNameOutput {
	return o
}

func (o TlsCertificateSubjectAlternativeNameOutput) ToTlsCertificateSubjectAlternativeNameOutputWithContext(ctx context.Context) TlsCertificateSubjectAlternativeNameOutput {
	return o
}

func (o TlsCertificateSubjectAlternativeNameOutput) ToOutput(ctx context.Context) pulumix.Output[TlsCertificateSubjectAlternativeName] {
	return pulumix.Output[TlsCertificateSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

// set of additional domains (including wildcards) this TLS certificate is valid for
func (o TlsCertificateSubjectAlternativeNameOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsCertificateSubjectAlternativeName) []string { return v.DnsNames }).(pulumi.StringArrayOutput)
}

// set of IP addresses this TLS certificate is also valid for
func (o TlsCertificateSubjectAlternativeNameOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsCertificateSubjectAlternativeName) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

type TlsCertificateSubjectAlternativeNameArrayOutput struct{ *pulumi.OutputState }

func (TlsCertificateSubjectAlternativeNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificateSubjectAlternativeName)(nil)).Elem()
}

func (o TlsCertificateSubjectAlternativeNameArrayOutput) ToTlsCertificateSubjectAlternativeNameArrayOutput() TlsCertificateSubjectAlternativeNameArrayOutput {
	return o
}

func (o TlsCertificateSubjectAlternativeNameArrayOutput) ToTlsCertificateSubjectAlternativeNameArrayOutputWithContext(ctx context.Context) TlsCertificateSubjectAlternativeNameArrayOutput {
	return o
}

func (o TlsCertificateSubjectAlternativeNameArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TlsCertificateSubjectAlternativeName] {
	return pulumix.Output[[]TlsCertificateSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

func (o TlsCertificateSubjectAlternativeNameArrayOutput) Index(i pulumi.IntInput) TlsCertificateSubjectAlternativeNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsCertificateSubjectAlternativeName {
		return vs[0].([]TlsCertificateSubjectAlternativeName)[vs[1].(int)]
	}).(TlsCertificateSubjectAlternativeNameOutput)
}

type TunnelGroupBackendTunnel struct {
	// a resource identifier
	Id *string `pulumi:"id"`
	// a uri for locating a resource
	Uri *string `pulumi:"uri"`
}

// TunnelGroupBackendTunnelInput is an input type that accepts TunnelGroupBackendTunnelArgs and TunnelGroupBackendTunnelOutput values.
// You can construct a concrete instance of `TunnelGroupBackendTunnelInput` via:
//
//	TunnelGroupBackendTunnelArgs{...}
type TunnelGroupBackendTunnelInput interface {
	pulumi.Input

	ToTunnelGroupBackendTunnelOutput() TunnelGroupBackendTunnelOutput
	ToTunnelGroupBackendTunnelOutputWithContext(context.Context) TunnelGroupBackendTunnelOutput
}

type TunnelGroupBackendTunnelArgs struct {
	// a resource identifier
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a uri for locating a resource
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (TunnelGroupBackendTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelGroupBackendTunnel)(nil)).Elem()
}

func (i TunnelGroupBackendTunnelArgs) ToTunnelGroupBackendTunnelOutput() TunnelGroupBackendTunnelOutput {
	return i.ToTunnelGroupBackendTunnelOutputWithContext(context.Background())
}

func (i TunnelGroupBackendTunnelArgs) ToTunnelGroupBackendTunnelOutputWithContext(ctx context.Context) TunnelGroupBackendTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelGroupBackendTunnelOutput)
}

func (i TunnelGroupBackendTunnelArgs) ToOutput(ctx context.Context) pulumix.Output[TunnelGroupBackendTunnel] {
	return pulumix.Output[TunnelGroupBackendTunnel]{
		OutputState: i.ToTunnelGroupBackendTunnelOutputWithContext(ctx).OutputState,
	}
}

// TunnelGroupBackendTunnelArrayInput is an input type that accepts TunnelGroupBackendTunnelArray and TunnelGroupBackendTunnelArrayOutput values.
// You can construct a concrete instance of `TunnelGroupBackendTunnelArrayInput` via:
//
//	TunnelGroupBackendTunnelArray{ TunnelGroupBackendTunnelArgs{...} }
type TunnelGroupBackendTunnelArrayInput interface {
	pulumi.Input

	ToTunnelGroupBackendTunnelArrayOutput() TunnelGroupBackendTunnelArrayOutput
	ToTunnelGroupBackendTunnelArrayOutputWithContext(context.Context) TunnelGroupBackendTunnelArrayOutput
}

type TunnelGroupBackendTunnelArray []TunnelGroupBackendTunnelInput

func (TunnelGroupBackendTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TunnelGroupBackendTunnel)(nil)).Elem()
}

func (i TunnelGroupBackendTunnelArray) ToTunnelGroupBackendTunnelArrayOutput() TunnelGroupBackendTunnelArrayOutput {
	return i.ToTunnelGroupBackendTunnelArrayOutputWithContext(context.Background())
}

func (i TunnelGroupBackendTunnelArray) ToTunnelGroupBackendTunnelArrayOutputWithContext(ctx context.Context) TunnelGroupBackendTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelGroupBackendTunnelArrayOutput)
}

func (i TunnelGroupBackendTunnelArray) ToOutput(ctx context.Context) pulumix.Output[[]TunnelGroupBackendTunnel] {
	return pulumix.Output[[]TunnelGroupBackendTunnel]{
		OutputState: i.ToTunnelGroupBackendTunnelArrayOutputWithContext(ctx).OutputState,
	}
}

type TunnelGroupBackendTunnelOutput struct{ *pulumi.OutputState }

func (TunnelGroupBackendTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelGroupBackendTunnel)(nil)).Elem()
}

func (o TunnelGroupBackendTunnelOutput) ToTunnelGroupBackendTunnelOutput() TunnelGroupBackendTunnelOutput {
	return o
}

func (o TunnelGroupBackendTunnelOutput) ToTunnelGroupBackendTunnelOutputWithContext(ctx context.Context) TunnelGroupBackendTunnelOutput {
	return o
}

func (o TunnelGroupBackendTunnelOutput) ToOutput(ctx context.Context) pulumix.Output[TunnelGroupBackendTunnel] {
	return pulumix.Output[TunnelGroupBackendTunnel]{
		OutputState: o.OutputState,
	}
}

// a resource identifier
func (o TunnelGroupBackendTunnelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelGroupBackendTunnel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a uri for locating a resource
func (o TunnelGroupBackendTunnelOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelGroupBackendTunnel) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type TunnelGroupBackendTunnelArrayOutput struct{ *pulumi.OutputState }

func (TunnelGroupBackendTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TunnelGroupBackendTunnel)(nil)).Elem()
}

func (o TunnelGroupBackendTunnelArrayOutput) ToTunnelGroupBackendTunnelArrayOutput() TunnelGroupBackendTunnelArrayOutput {
	return o
}

func (o TunnelGroupBackendTunnelArrayOutput) ToTunnelGroupBackendTunnelArrayOutputWithContext(ctx context.Context) TunnelGroupBackendTunnelArrayOutput {
	return o
}

func (o TunnelGroupBackendTunnelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TunnelGroupBackendTunnel] {
	return pulumix.Output[[]TunnelGroupBackendTunnel]{
		OutputState: o.OutputState,
	}
}

func (o TunnelGroupBackendTunnelArrayOutput) Index(i pulumi.IntInput) TunnelGroupBackendTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TunnelGroupBackendTunnel {
		return vs[0].([]TunnelGroupBackendTunnel)[vs[1].(int)]
	}).(TunnelGroupBackendTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentIngressCertificateManagementPolicyInput)(nil)).Elem(), AgentIngressCertificateManagementPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentIngressCertificateManagementPolicyArrayInput)(nil)).Elem(), AgentIngressCertificateManagementPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetInput)(nil)).Elem(), EventDestinationTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetArrayInput)(nil)).Elem(), EventDestinationTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogArrayInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthArrayInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthCredInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogAuthCredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthCredArrayInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogAuthCredArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthRoleInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogAuthRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetCloudwatchLogAuthRoleArrayInput)(nil)).Elem(), EventDestinationTargetCloudwatchLogAuthRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetDatadogInput)(nil)).Elem(), EventDestinationTargetDatadogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetDatadogArrayInput)(nil)).Elem(), EventDestinationTargetDatadogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetDebugInput)(nil)).Elem(), EventDestinationTargetDebugArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetDebugArrayInput)(nil)).Elem(), EventDestinationTargetDebugArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseInput)(nil)).Elem(), EventDestinationTargetFirehoseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseArrayInput)(nil)).Elem(), EventDestinationTargetFirehoseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseAuthInput)(nil)).Elem(), EventDestinationTargetFirehoseAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseAuthArrayInput)(nil)).Elem(), EventDestinationTargetFirehoseAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseAuthCredInput)(nil)).Elem(), EventDestinationTargetFirehoseAuthCredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseAuthCredArrayInput)(nil)).Elem(), EventDestinationTargetFirehoseAuthCredArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseAuthRoleInput)(nil)).Elem(), EventDestinationTargetFirehoseAuthRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetFirehoseAuthRoleArrayInput)(nil)).Elem(), EventDestinationTargetFirehoseAuthRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseInput)(nil)).Elem(), EventDestinationTargetKineseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseArrayInput)(nil)).Elem(), EventDestinationTargetKineseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseAuthInput)(nil)).Elem(), EventDestinationTargetKineseAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseAuthArrayInput)(nil)).Elem(), EventDestinationTargetKineseAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseAuthCredInput)(nil)).Elem(), EventDestinationTargetKineseAuthCredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseAuthCredArrayInput)(nil)).Elem(), EventDestinationTargetKineseAuthCredArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseAuthRoleInput)(nil)).Elem(), EventDestinationTargetKineseAuthRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationTargetKineseAuthRoleArrayInput)(nil)).Elem(), EventDestinationTargetKineseAuthRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionSourceInput)(nil)).Elem(), EventSubscriptionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionSourceArrayInput)(nil)).Elem(), EventSubscriptionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedDomainCertificateManagementPolicyInput)(nil)).Elem(), ReservedDomainCertificateManagementPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedDomainCertificateManagementPolicyArrayInput)(nil)).Elem(), ReservedDomainCertificateManagementPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateSubjectAlternativeNameInput)(nil)).Elem(), TlsCertificateSubjectAlternativeNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateSubjectAlternativeNameArrayInput)(nil)).Elem(), TlsCertificateSubjectAlternativeNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelGroupBackendTunnelInput)(nil)).Elem(), TunnelGroupBackendTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelGroupBackendTunnelArrayInput)(nil)).Elem(), TunnelGroupBackendTunnelArray{})
	pulumi.RegisterOutputType(AgentIngressCertificateManagementPolicyOutput{})
	pulumi.RegisterOutputType(AgentIngressCertificateManagementPolicyArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogAuthOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogAuthArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogAuthCredOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogAuthCredArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogAuthRoleOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetCloudwatchLogAuthRoleArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetDatadogOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetDatadogArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetDebugOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetDebugArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseAuthOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseAuthArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseAuthCredOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseAuthCredArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseAuthRoleOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetFirehoseAuthRoleArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseAuthOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseAuthArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseAuthCredOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseAuthCredArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseAuthRoleOutput{})
	pulumi.RegisterOutputType(EventDestinationTargetKineseAuthRoleArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSourceOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSourceArrayOutput{})
	pulumi.RegisterOutputType(ReservedDomainCertificateManagementPolicyOutput{})
	pulumi.RegisterOutputType(ReservedDomainCertificateManagementPolicyArrayOutput{})
	pulumi.RegisterOutputType(TlsCertificateSubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(TlsCertificateSubjectAlternativeNameArrayOutput{})
	pulumi.RegisterOutputType(TunnelGroupBackendTunnelOutput{})
	pulumi.RegisterOutputType(TunnelGroupBackendTunnelArrayOutput{})
}
